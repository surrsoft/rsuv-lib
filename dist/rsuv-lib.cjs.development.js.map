{"version":3,"file":"rsuv-lib.cjs.development.js","sources":["../src/RsuvValueAnd.ts","../src/RsuvErr.ts","../src/RsuvPaginationGyth.ts","../src/RsuvResultBoolPknz.ts","../src/RsuvResultTibo.ts","../src/RsuvConst.ts","../src/RsuvTxString.ts","../src/RsuvTxStringAA.ts","../src/RsuvTuString.ts","../src/RsuvTxStringB.ts","../src/RsuvTxStringC.ts","../src/RsuvTxEmail.ts"],"sourcesContent":["export class RsuvValueAnd {\n  /**\n   * МОТИВАЦИЯ: допустим мы хотим получить значение ячейки столбца, но такого столбца не существует; в этом случае\n   * возврат просто falsy значения (undefined и т.п.) не позволяет понять, это значение ячейки undefined или же это\n   * означает что ячейки не существует.\n   *\n   * @param value\n   * @param isValueExist (2) -- если здесь FALSE то это означает что значение поля {@link value} не следует брать во\n   * внимание т.к. на самом деле значения получить не удалось (например сущности из которой предполагается взять\n   * значение просто не существует)\n   */\n  constructor(readonly value: string, readonly isValueExist: boolean = true) {\n  }\n}\n","/**\n * Представляет какую-либо ошибку\n */\nexport class RsuvErr {\n  constructor(readonly code: string = '', readonly message: string = '') {\n  }\n\n  asString(): string {\n    return `code [${this.code}] message [${this.message}]`\n  }\n\n  static asStringB(oj: RsuvErr): string {\n    return `code [${oj.code}] message [${oj.message}]`\n  }\n}\n","/**\n * [[gyth]]\n * Сущность для пагинации. Передаём в конструктор \"общее кол-во элементов\" и \"кол-во элементов на странице\", и затем\n * по \"номеру страницы\" узнаём начальный и конечный индексы с помощью метода {@link indexesByPageNum}\n */\nexport class RsuvPaginationGyth {\n\n  /**\n   * Количество страниц\n   */\n  public readonly pageCount: number = 1\n\n  /**\n   * При интанцировании вычисляет поле {@link pageCount}\n   *\n   * @param elemsCount (1) -- общее количество элементов\n   * @param elemsPerPageCount (2) -- элементов на одной странице\n   */\n  constructor(readonly elemsCount: number = 20, readonly elemsPerPageCount: number = 10) {\n    // --- вычисление this.pageCount\n    if (elemsCount >= elemsPerPageCount) {\n      const pagesFloat = elemsCount / elemsPerPageCount\n      const pages = Math.trunc(pagesFloat)\n      const dev = pagesFloat - pages;\n      if (dev === 0) {\n        this.pageCount = pages\n      } else if (dev > 0) {\n        this.pageCount = pages + 1\n      }\n    }\n  }\n\n  /**\n   *\n   * @param pageNum (1) -- 1+, если больше реального количества страниц, то возвращаются данные для фактичесчки последней\n   * страницы\n   */\n  indexesByPageNum(pageNum: number): { indexStart: number, indexLast: number } {\n    const pageNum0 = pageNum > this.pageCount ? this.pageCount : pageNum;\n    // ---\n    const indexLast = pageNum0 * this.elemsPerPageCount - 1;\n    const indexStart = indexLast - this.elemsPerPageCount + 1;\n    return {indexStart, indexLast}\n  }\n\n  elemsByPageNum(elems: any[], pageNum: number): any[] {\n    const {indexStart, indexLast} = this.indexesByPageNum(pageNum);\n    return elems.slice(indexStart, indexLast + 1)\n  }\n\n}\n","/**\n * [[pknz]]\n */\nexport class RsuvResultBoolPknz {\n  constructor(readonly success: boolean = true, readonly errCode: string = '', readonly errMessage: string = '') {\n  }\n}\n","/*\n[[tibo]]\n */\n\nexport class RsuvResultTibo {\n  success: boolean = true\n  successCode?: string\n  value?: any\n  errCode?: string\n  errMessage?: string\n\n  constructor(tibo?: RsuvResultTibo) {\n    if(tibo) {\n      this.success = tibo.success\n      this.successCode = tibo.successCode\n      this.value = tibo.value\n      this.errCode = tibo.errCode\n      this.errMessage = tibo.errMessage\n    }\n  }\n}\n\n","/*\nконстанты разные\n */\n\n/**\n * Когда что-то уже существует\n */\nexport const RSUV_AL_ALREADY_EXIST = 'RSUV_AL_ALREADY_EXIST';\n","/*\n * Представляет строку не нулевой длины\n */\n\nimport { RsuvBnuwNT } from './RsuvBnuwNT';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport _ from 'lodash';\n\nexport class RsuvTxString implements RsuvBnuwNT {\n  constructor(public val: string) {\n\n  }\n\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      if (!this.val) {\n        return new RsuvResultBoolPknz(false, '[[210705185504]]', 'is falsy')\n      }\n      if (!_.isString(this.val)) {\n        return new RsuvResultBoolPknz(false, '[[210706090804]]', 'is not string')\n      }\n      if (this.val.length < 1) {\n        return new RsuvResultBoolPknz(false, '[[210705185559]]', 'length < 1')\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(false, '[[210705185560]]', err.message)\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","/*\n * Представляет строку которая: (не нулевой длины) И (не содержит пробелов/переносов)\n */\n\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxString } from './RsuvTxString';\n\nexport class RsuvTxStringAA extends RsuvTxString {\n\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid()\n      if (!res.success) {\n        return res\n      }\n      // ---\n      if (/\\s/.test(this.val)) {\n        return new RsuvResultBoolPknz(false, '[[210706092510]]', 'includes whitespace(s)');\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(false, '[[210706092135]]', err.message)\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","/*\nутилиты для String\n */\n\n/**\n * Возвращает TRUE если строка str это NULL, строка нулевой длины, или строка из одних пробелов\n *\n * source [210217114100]\n */\nexport function isEmptyOrWhitespaces(str: any): Boolean {\n  return (!str || str.length === 0 || /^\\s*$/.test(str))\n}\n","/*\n * Представляет строку которая: (не нулевой длины) И (не состоит из одних пробелов/переносов)\n */\n\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxString } from './RsuvTxString';\nimport { isEmptyOrWhitespaces } from './RsuvTuString';\n\nexport class RsuvTxStringB extends RsuvTxString {\n\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid()\n      if (!res.success) {\n        return res\n      }\n      // ---\n      if (isEmptyOrWhitespaces(this.val)) {\n        return new RsuvResultBoolPknz(false, '[[210705191242]]', 'contains only whitespaces')\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(false, '[[210705190613]]', err.message)\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","/*\n * Представляет строку которая: (не нулевой длины) И (не состоит из одних пробелов/переносов) И (не начинается с пробела/переноса)\n * И (не заканчивается пробелом/переносом)\n */\n\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxStringB } from './RsuvTxStringB';\n\nexport class RsuvTxStringC extends RsuvTxStringB {\n\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid();\n      if (!res.success) {\n        return res;\n      }\n      // ---\n      if (/^\\s/.test(this.val)) {\n        return new RsuvResultBoolPknz(false, '[[210705191717]]', 'started with whitespace');\n      }\n      if (/\\s$/.test(this.val)) {\n        return new RsuvResultBoolPknz(false, '[[210705191826]]', 'ended with whitespace');\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(false, '[[210705191508]]', err.message);\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","import { RsuvTxStringAA } from './RsuvTxStringAA';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport EmailValidator from 'email-validator';\n\nexport class RsuvTxEmail extends RsuvTxStringAA {\n  bnuwIsValid(): RsuvResultBoolPknz {\n    const resV = EmailValidator.validate(this.val)\n    if(!resV) {\n      return new RsuvResultBoolPknz(false, '[[210706113857]]', 'EmailValidator')\n    }\n\n    // const resValid = super.bnuwIsValid();\n    // if (!resValid.success) {\n    //   return resValid;\n    // }\n    // // ---\n    // const b1 = new RegExp(\n    //   /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g,\n    // ).test(this.val)\n    // if (!b1) {\n    //   return new RsuvResultBoolPknz(false, '[[210706105956]]', 'is not email');\n    // }\n    // const splited = this.val.split('@');\n    // if (splited.length > 2) {\n    //   return new RsuvResultBoolPknz(false, '[[210706112944]]', 'only one @ allowed');\n    // }\n    // if(splited[0].length > 64) {\n    //   return new RsuvResultBoolPknz(false, '[[210706113459]]', 'local-part is > 64 length');\n    // }\n    return new RsuvResultBoolPknz(true)\n  }\n}\n"],"names":["RsuvValueAnd","value","isValueExist","RsuvErr","code","message","asString","asStringB","oj","RsuvPaginationGyth","elemsCount","elemsPerPageCount","pagesFloat","pages","Math","trunc","dev","pageCount","indexesByPageNum","pageNum","pageNum0","indexLast","indexStart","elemsByPageNum","elems","slice","RsuvResultBoolPknz","success","errCode","errMessage","RsuvResultTibo","tibo","successCode","RSUV_AL_ALREADY_EXIST","RsuvTxString","val","bnuwIsValid","_","isString","length","err","RsuvTxStringAA","res","test","isEmptyOrWhitespaces","str","RsuvTxStringB","RsuvTxStringC","RsuvTxEmail","resV","EmailValidator","validate"],"mappings":"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"}