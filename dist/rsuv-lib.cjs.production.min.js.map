{"version":3,"file":"rsuv-lib.cjs.production.min.js","sources":["../src/RsuvErr.ts","../src/RsuvPaginationGyth.ts","../src/RsuvResultBoolPknz.ts","../src/RsuvTxString.ts","../src/RsuvTxStringAA.ts","../src/RsuvTuString.ts","../src/RsuvTxStringB.ts","../src/RsuvTxStringC.ts","../src/RsuvTxEmail.ts","../src/RsuvConst.ts","../src/RsuvResultTibo.ts","../src/RsuvValueAnd.ts"],"sourcesContent":["/**\n * Представляет какую-либо ошибку\n */\nexport class RsuvErr {\n  constructor(readonly code: string = '', readonly message: string = '') {\n  }\n\n  asString(): string {\n    return `code [${this.code}] message [${this.message}]`\n  }\n\n  static asStringB(oj: RsuvErr): string {\n    return `code [${oj.code}] message [${oj.message}]`\n  }\n}\n","/**\n * [[gyth]]\n * Сущность для пагинации. Передаём в конструктор \"общее кол-во элементов\" и \"кол-во элементов на странице\", и затем\n * по \"номеру страницы\" узнаём начальный и конечный индексы с помощью метода {@link indexesByPageNum}\n */\nexport class RsuvPaginationGyth {\n\n  /**\n   * Количество страниц\n   */\n  public readonly pageCount: number = 1\n\n  /**\n   * При интанцировании вычисляет поле {@link pageCount}\n   *\n   * @param elemsCount (1) -- общее количество элементов\n   * @param elemsPerPageCount (2) -- элементов на одной странице\n   */\n  constructor(readonly elemsCount: number = 20, readonly elemsPerPageCount: number = 10) {\n    // --- вычисление this.pageCount\n    if (elemsCount >= elemsPerPageCount) {\n      const pagesFloat = elemsCount / elemsPerPageCount\n      const pages = Math.trunc(pagesFloat)\n      const dev = pagesFloat - pages;\n      if (dev === 0) {\n        this.pageCount = pages\n      } else if (dev > 0) {\n        this.pageCount = pages + 1\n      }\n    }\n  }\n\n  /**\n   *\n   * @param pageNum (1) -- 1+, если больше реального количества страниц, то возвращаются данные для фактичесчки последней\n   * страницы\n   */\n  indexesByPageNum(pageNum: number): { indexStart: number, indexLast: number } {\n    const pageNum0 = pageNum > this.pageCount ? this.pageCount : pageNum;\n    // ---\n    const indexLast = pageNum0 * this.elemsPerPageCount - 1;\n    const indexStart = indexLast - this.elemsPerPageCount + 1;\n    return {indexStart, indexLast}\n  }\n\n  elemsByPageNum(elems: any[], pageNum: number): any[] {\n    const {indexStart, indexLast} = this.indexesByPageNum(pageNum);\n    return elems.slice(indexStart, indexLast + 1)\n  }\n\n}\n","/**\n * [[pknz]]\n */\nexport class RsuvResultBoolPknz {\n  constructor(readonly success: boolean = true, readonly errCode: string = '', readonly errMessage: string = '') {\n  }\n}\n","/*\n * Представляет строку не нулевой длины\n */\n\nimport { RsuvBnuwNT } from './RsuvBnuwNT';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport _ from 'lodash';\n\nexport class RsuvTxString implements RsuvBnuwNT {\n  constructor(public val: string) {\n\n  }\n\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      if (!this.val) {\n        return new RsuvResultBoolPknz(false, '[[210705185504]]', 'is falsy')\n      }\n      if (!_.isString(this.val)) {\n        return new RsuvResultBoolPknz(false, '[[210706090804]]', 'is not string')\n      }\n      if (this.val.length < 1) {\n        return new RsuvResultBoolPknz(false, '[[210705185559]]', 'length < 1')\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(false, '[[210705185560]]', err.message)\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","/*\n * Представляет строку которая: (не нулевой длины) И (не содержит пробелов/переносов)\n */\n\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxString } from './RsuvTxString';\n\nexport class RsuvTxStringAA extends RsuvTxString {\n\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid()\n      if (!res.success) {\n        return res\n      }\n      // ---\n      if (/\\s/.test(this.val)) {\n        return new RsuvResultBoolPknz(false, '[[210706092510]]', 'includes whitespace(s)');\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(false, '[[210706092135]]', err.message)\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","/*\nутилиты для String\n */\n\n/**\n * Возвращает TRUE если строка str это NULL, строка нулевой длины, или строка из одних пробелов\n *\n * source [210217114100]\n */\nexport function isEmptyOrWhitespaces(str: any): Boolean {\n  return (!str || str.length === 0 || /^\\s*$/.test(str))\n}\n","/*\n * Представляет строку которая: (не нулевой длины) И (не состоит из одних пробелов/переносов)\n */\n\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxString } from './RsuvTxString';\nimport { isEmptyOrWhitespaces } from './RsuvTuString';\n\nexport class RsuvTxStringB extends RsuvTxString {\n\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid()\n      if (!res.success) {\n        return res\n      }\n      // ---\n      if (isEmptyOrWhitespaces(this.val)) {\n        return new RsuvResultBoolPknz(false, '[[210705191242]]', 'contains only whitespaces')\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(false, '[[210705190613]]', err.message)\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","/*\n * Представляет строку которая: (не нулевой длины) И (не состоит из одних пробелов/переносов) И (не начинается с пробела/переноса)\n * И (не заканчивается пробелом/переносом)\n */\n\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxStringB } from './RsuvTxStringB';\n\nexport class RsuvTxStringC extends RsuvTxStringB {\n\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid();\n      if (!res.success) {\n        return res;\n      }\n      // ---\n      if (/^\\s/.test(this.val)) {\n        return new RsuvResultBoolPknz(false, '[[210705191717]]', 'started with whitespace');\n      }\n      if (/\\s$/.test(this.val)) {\n        return new RsuvResultBoolPknz(false, '[[210705191826]]', 'ended with whitespace');\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(false, '[[210705191508]]', err.message);\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","import { RsuvTxStringAA } from './RsuvTxStringAA';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport EmailValidator from 'email-validator';\n\nexport class RsuvTxEmail extends RsuvTxStringAA {\n  bnuwIsValid(): RsuvResultBoolPknz {\n    const resV = EmailValidator.validate(this.val)\n    if(!resV) {\n      return new RsuvResultBoolPknz(false, '[[210706113857]]', 'EmailValidator')\n    }\n\n    // const resValid = super.bnuwIsValid();\n    // if (!resValid.success) {\n    //   return resValid;\n    // }\n    // // ---\n    // const b1 = new RegExp(\n    //   /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g,\n    // ).test(this.val)\n    // if (!b1) {\n    //   return new RsuvResultBoolPknz(false, '[[210706105956]]', 'is not email');\n    // }\n    // const splited = this.val.split('@');\n    // if (splited.length > 2) {\n    //   return new RsuvResultBoolPknz(false, '[[210706112944]]', 'only one @ allowed');\n    // }\n    // if(splited[0].length > 64) {\n    //   return new RsuvResultBoolPknz(false, '[[210706113459]]', 'local-part is > 64 length');\n    // }\n    return new RsuvResultBoolPknz(true)\n  }\n}\n","/*\nконстанты разные\n */\n\n/**\n * Когда что-то уже существует\n */\nexport const RSUV_AL_ALREADY_EXIST = 'RSUV_AL_ALREADY_EXIST';\n","/*\n[[tibo]]\n */\n\nexport class RsuvResultTibo {\n  success: boolean = true\n  successCode?: string\n  value?: any\n  errCode?: string\n  errMessage?: string\n\n  constructor(tibo?: RsuvResultTibo) {\n    if(tibo) {\n      this.success = tibo.success\n      this.successCode = tibo.successCode\n      this.value = tibo.value\n      this.errCode = tibo.errCode\n      this.errMessage = tibo.errMessage\n    }\n  }\n}\n\n","export class RsuvValueAnd {\n  /**\n   * МОТИВАЦИЯ: допустим мы хотим получить значение ячейки столбца, но такого столбца не существует; в этом случае\n   * возврат просто falsy значения (undefined и т.п.) не позволяет понять, это значение ячейки undefined или же это\n   * означает что ячейки не существует.\n   *\n   * @param value\n   * @param isValueExist (2) -- если здесь FALSE то это означает что значение поля {@link value} не следует брать во\n   * внимание т.к. на самом деле значения получить не удалось (например сущности из которой предполагается взять\n   * значение просто не существует)\n   */\n  constructor(readonly value: string, readonly isValueExist: boolean = true) {\n  }\n}\n"],"names":["RsuvErr","code","message","asString","this","asStringB","oj","RsuvPaginationGyth","elemsCount","elemsPerPageCount","pagesFloat","pages","Math","trunc","dev","pageCount","indexesByPageNum","pageNum","indexLast","indexStart","elemsByPageNum","elems","slice","RsuvResultBoolPknz","success","errCode","errMessage","RsuvTxString","val","bnuwIsValid","_","isString","length","err","RsuvTxStringAA","res","test","isEmptyOrWhitespaces","str","RsuvTxStringB","RsuvTxStringC","RsuvTxEmail","EmailValidator","validate","tibo","successCode","value","isValueExist"],"mappings":"qMAGaA,wBACUC,EAA4BC,YAA5BD,IAAAA,EAAe,aAAaC,IAAAA,EAAkB,cAA9CD,eAA4BC,qBAGjDC,SAAA,0BACkBC,KAAKH,mBAAkBG,KAAKF,eAGvCG,UAAP,SAAiBC,kBACCA,EAAGL,mBAAkBK,EAAGJ,kBCP/BK,wBAaUC,EAAkCC,eAAlCD,IAAAA,EAAqB,aAAaC,IAAAA,EAA4B,oBAA9DD,yBAAkCC,iBARnB,EAU9BD,GAAcC,EAAmB,KAC7BC,EAAaF,EAAaC,EAC1BE,EAAQC,KAAKC,MAAMH,GACnBI,EAAMJ,EAAaC,EACb,IAARG,OACGC,UAAYJ,EACRG,EAAM,SACVC,UAAYJ,EAAQ,+BAU/BK,iBAAA,SAAiBC,OAGTC,GAFWD,EAAUb,KAAKW,UAAYX,KAAKW,UAAYE,GAEhCb,KAAKK,kBAAoB,QAE/C,CAACU,WADWD,EAAYd,KAAKK,kBAAoB,EACpCS,UAAAA,MAGtBE,eAAA,SAAeC,EAAcJ,SACKb,KAAKY,iBAAiBC,UAC/CI,EAAMC,QADNH,aAAYD,UACwB,SC5ClCK,EACX,SAAqBC,EAAkCC,EAA+BC,YAAjEF,IAAAA,GAAmB,YAAeC,IAAAA,EAAkB,aAAaC,IAAAA,EAAqB,iBAAtFF,eAAkCC,kBAA+BC,GCI3EC,wBACQC,YAAAA,qBAInBC,YAAA,mBAESzB,KAAKwB,WACD,IAAIL,GAAmB,EAAO,mBAAoB,gBAEtDO,EAAEC,SAAS3B,KAAKwB,YACZ,IAAIL,GAAmB,EAAO,mBAAoB,oBAEvDnB,KAAKwB,IAAII,OAAS,SACb,IAAIT,GAAmB,EAAO,mBAAoB,cAE3D,MAAOU,UACA,IAAIV,GAAmB,EAAO,mBAAoBU,EAAI/B,gBAExD,IAAIqB,GAAmB,kKCpBrBW,0FAEXL,YAAA,mBAEUM,cAAYN,2BACbM,EAAIX,eACAW,KAGL,KAAKC,KAAKhC,KAAKwB,YACV,IAAIL,GAAmB,EAAO,mBAAoB,0BAE3D,MAAOU,UACA,IAAIV,GAAmB,EAAO,mBAAoBU,EAAI/B,gBAExD,IAAIqB,GAAmB,OAfEI,YCEpBU,EAAqBC,UAC1BA,GAAsB,IAAfA,EAAIN,QAAgB,QAAQI,KAAKE,iDCFtCC,0FAEXV,YAAA,mBAEUM,cAAYN,2BACbM,EAAIX,eACAW,KAGLE,EAAqBjC,KAAKwB,YACrB,IAAIL,GAAmB,EAAO,mBAAoB,6BAE3D,MAAOU,UACA,IAAIV,GAAmB,EAAO,mBAAoBU,EAAI/B,gBAExD,IAAIqB,GAAmB,OAfCI,GCAtBa,0FAEXX,YAAA,mBAEUM,cAAYN,2BACbM,EAAIX,eACAW,KAGL,MAAMC,KAAKhC,KAAKwB,YACX,IAAIL,GAAmB,EAAO,mBAAoB,8BAEvD,MAAMa,KAAKhC,KAAKwB,YACX,IAAIL,GAAmB,EAAO,mBAAoB,yBAE3D,MAAOU,UACA,IAAIV,GAAmB,EAAO,mBAAoBU,EAAI/B,gBAExD,IAAIqB,GAAmB,OAlBCgB,GCJtBE,0FACXZ,YAAA,kBACea,EAAeC,SAASvC,KAAKwB,KAuBnC,IAAIL,GAAmB,GArBrB,IAAIA,GAAmB,EAAO,mBAAoB,sBAJ9BW,iCCGI,2HCInC,SAAYU,iBANO,EAOdA,SACIpB,QAAUoB,EAAKpB,aACfqB,YAAcD,EAAKC,iBACnBC,MAAQF,EAAKE,WACbrB,QAAUmB,EAAKnB,aACfC,WAAakB,EAAKlB,+KCN3B,SAAqBoB,EAAwBC,YAAAA,IAAAA,GAAwB,cAAhDD,oBAAwBC"}