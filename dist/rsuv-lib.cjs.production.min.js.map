{"version":3,"file":"rsuv-lib.cjs.production.min.js","sources":["../src/RsuvErr.ts","../src/RsuvPaginationGyth.ts","../src/RsuvResultBoolPknz.ts","../src/RsuvResultTibo.ts","../src/RsuvBnuwUtils.ts","../src/RsuvTxString.ts","../src/RsuvTuString.ts","../src/RsuvTxStringAB.ts","../src/RsuvTxStringAC.ts","../src/RsuvTxStringACB.ts","../src/RsuvTxStringACC.ts","../src/RsuvTuDateTime.ts","../src/RsuvTxStringAD.ts","../src/RsuvTxStringADB.ts","../src/RsuvTuTree.ts","../src/RsuvTxEmail.ts","../node_modules/regenerator-runtime/runtime.js","../src/RsuvAdapterZrnx.tsx","../src/RsuvTxBoolean.ts","../src/RsuvCheckModels.ts","../src/RsuvResultAsau11.ts","../src/RsuvTuArray.ts","../src/RsuvTuPromiseAllSettled.ts","../src/RsuvSearchMode.ts","../src/RsuvTxJsonServer.ts","../src/RsuvTxNumInt.ts","../src/RsuvTxNumIntAB.ts","../src/RsuvTxNumIntABB.ts","../src/RsuvTxNumIntAC.ts","../src/RsuvTxNumIntDiap.ts","../src/RsuvTxFieldName.ts","../src/RsuvTxFieldNameLodash.ts","../src/RsuvSearchHow.ts","../src/RsuvEnCaseSensitive.ts","../src/RsuvEnDataTypes.ts","../src/RsuvEnSort.ts","../src/RsuvEnResultCrudSet.ts","../src/RsuvTuInfo.ts","../src/RsuvSearchElem.ts","../src/RsuvConst.ts","../src/RsuvSearchElems.ts","../src/RsuvTu.ts","../src/RsuvTxChecked.ts","../src/RsuvTxSort.ts","../src/RsuvValueAnd.ts"],"sourcesContent":["/**\r\n * Представляет какую-либо ошибку\r\n */\r\nexport class RsuvErr {\r\n  constructor(readonly code: string = '', readonly message: string = '') {\r\n  }\r\n\r\n  asString(): string {\r\n    return `code [${this.code}] message [${this.message}]`\r\n  }\r\n\r\n  static asStringB(oj: RsuvErr): string {\r\n    return `code [${oj.code}] message [${oj.message}]`\r\n  }\r\n}\r\n","/**\r\n * [[gyth]]\r\n * Сущность для пагинации. Передаём в конструктор \"общее кол-во элементов\" и \"кол-во элементов на странице\", и затем\r\n * по \"номеру страницы\" узнаём начальный и конечный индексы с помощью метода {@link indexesByPageNum}\r\n */\r\nexport class RsuvPaginationGyth {\r\n\r\n  /**\r\n   * Количество страниц\r\n   */\r\n  public readonly pageCount: number = 1\r\n\r\n  /**\r\n   * При интанцировании вычисляет поле {@link pageCount}\r\n   *\r\n   * @param elemsCount (1) -- общее количество элементов\r\n   * @param elemsPerPageCount (2) -- элементов на одной странице\r\n   */\r\n  constructor(readonly elemsCount: number = 20, readonly elemsPerPageCount: number = 10) {\r\n    // --- вычисление this.pageCount\r\n    if (elemsCount >= elemsPerPageCount) {\r\n      const pagesFloat = elemsCount / elemsPerPageCount\r\n      const pages = Math.trunc(pagesFloat)\r\n      const dev = pagesFloat - pages;\r\n      if (dev === 0) {\r\n        this.pageCount = pages\r\n      } else if (dev > 0) {\r\n        this.pageCount = pages + 1\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param pageNum (1) -- 1+, если больше реального количества страниц, то возвращаются данные для фактичесчки последней\r\n   * страницы\r\n   */\r\n  indexesByPageNum(pageNum: number): { indexStart: number, indexLast: number } {\r\n    const pageNum0 = pageNum > this.pageCount ? this.pageCount : pageNum;\r\n    // ---\r\n    const indexLast = pageNum0 * this.elemsPerPageCount - 1;\r\n    const indexStart = indexLast - this.elemsPerPageCount + 1;\r\n    return {indexStart, indexLast}\r\n  }\r\n\r\n  elemsByPageNum(elems: any[], pageNum: number): any[] {\r\n    const {indexStart, indexLast} = this.indexesByPageNum(pageNum);\r\n    return elems.slice(indexStart, indexLast + 1)\r\n  }\r\n\r\n}\r\n","\r\n/**\r\n * [[pknz]]\r\n *\r\n * представление результата вида \"успех/не-успех\"\r\n *\r\n * СМ. ТАКЖЕ: [220108130347]\r\n */\r\nexport class RsuvResultBoolPknz {\r\n\r\n  constructor(readonly success: boolean = true, readonly errCode: string = '', readonly errMessage: string = '') {\r\n  }\r\n\r\n  /**\r\n   * Возвращает информацию о том какие элементы из (1) являются {success: true, ...} а какие {success: false, ...}\r\n   * @param elems (1) --\r\n   */\r\n  static infoMulti(elems: RsuvResultBoolPknz[]): RsuvT2 {\r\n    const ret = {success: [], notSuccess: []} as RsuvT2\r\n    elems.forEach((el) => {\r\n      if (el.success) {\r\n        ret.success.push(el)\r\n      } else {\r\n        ret.notSuccess.push(el)\r\n      }\r\n    })\r\n    return ret\r\n  }\r\n\r\n  /**\r\n   * Возвращает TRUE если ВСЕ элементы (1) являются {success: true, ...}.\r\n   * Если elems это пустой массив, то возвращает FALSE\r\n   * @param elems (1) --\r\n   */\r\n  static successAllIsSugar(elems: RsuvResultBoolPknz[]): RsuvResultBoolPknz {\r\n    const info: RsuvT2 = RsuvResultBoolPknz.infoMulti(elems)\r\n    const b1 = info.notSuccess.length === 0 && info.success.length > 0\r\n    if (b1) {\r\n      return new RsuvResultBoolPknz(true)\r\n    }\r\n    if (info.notSuccess.length > 0) {\r\n      return info.notSuccess[0]\r\n    }\r\n    return new RsuvResultBoolPknz(false, '[[210725095419]]', '')\r\n  }\r\n}\r\n\r\nexport type RsuvT2 = {\r\n  success: RsuvResultBoolPknz[],\r\n  notSuccess: RsuvResultBoolPknz[]\r\n}\r\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\n\r\n/**\r\n * Представление результата \"успешно/неуспешно\" плюс значение <T> результата\r\n *\r\n * ID [[tibo]]\r\n */\r\nexport class RsuvResultTibo<T> {\r\n  success: boolean = true;\r\n  successCode?: string;\r\n  value?: T;\r\n  errCode?: string;\r\n  errMessage?: string;\r\n\r\n  constructor(tibo?: RsuvResultTibo<T>) {\r\n    if (tibo) {\r\n      this.success = tibo.success;\r\n      this.successCode = tibo.successCode;\r\n      this.value = tibo.value;\r\n      this.errCode = tibo.errCode;\r\n      this.errMessage = tibo.errMessage;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * [[220108130347]]\r\n   * @param pknz\r\n   */\r\n  static fromPknz(pknz: RsuvResultBoolPknz): RsuvResultTibo<any> {\r\n    if (pknz) {\r\n      return new RsuvResultTibo({\r\n        success: pknz.success,\r\n        errCode: pknz.errCode,\r\n        errMessage: pknz.errMessage,\r\n      });\r\n    }\r\n    return new RsuvResultTibo({\r\n      success: false,\r\n      errCode: '[[210725095953]]',\r\n      errMessage: '',\r\n    });\r\n  }\r\n}\r\n","import { RsuvBnuwNT } from './RsuvBnuwNT';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\n\r\n/**\r\n * Вызывает (1) и возвращает его результат если не было брошено исключения внутри (1), иначе возвращает null\r\n * @param fn (1) --\r\n */\r\nexport function bnuwFactory<T extends RsuvBnuwNT>(fn: () => T): T | null {\r\n  try {\r\n    return fn()\r\n  } catch (err) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Выполняет [bnuw]-проверку сущности (1) и если результат неуспешен то брасает исключение с результатом этой проверки\r\n * @param obj\r\n */\r\nexport function bnuwUtilsThrowIf(obj: RsuvBnuwNT) {\r\n  const validRes = obj.bnuwIsValid()\r\n  if (!validRes.success) {\r\n    throw validRes\r\n  }\r\n}\r\n\r\n/**\r\n * Проверяет значение (1)\r\n * @param value (1) --\r\n */\r\nexport const bnuwUtilsVerify = (value: RsuvBnuwNT | any): RsuvResultBoolPknz => {\r\n  if (!value) {\r\n    return new RsuvResultBoolPknz(false, '[[210711215605]]', 'value is falsy')\r\n  }\r\n  const res = (value as RsuvBnuwNT).bnuwIsValid();\r\n  if (!res) {\r\n    return new RsuvResultBoolPknz(false, '[[210711215805]]', 'invalid value')\r\n  }\r\n  return res;\r\n}\r\n\r\n/**\r\n * Если возвращает пустой массив, значит все элементы (1) валидные, иначе в массиве результы неудачных проверок\r\n * @param values (1) -- элементы для проверки; пустой массив не валиден\r\n */\r\nexport const bnuwUtilsVerifyMulti = (values: any[]): RsuvResultBoolPknz[] => {\r\n  if (Array.isArray(values) && values.length > 0) {\r\n    const ret: RsuvResultBoolPknz[] = [];\r\n    values.forEach((el) => {\r\n      const verif = bnuwUtilsVerify(el)\r\n      if (!verif.success) {\r\n        ret.push(verif)\r\n      }\r\n    })\r\n    return ret;\r\n  }\r\n  return [new RsuvResultBoolPknz(false, '[[210711221552]]')]\r\n}\r\n","import { RsuvBnuwNT } from './RsuvBnuwNT';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport _ from 'lodash';\r\nimport { bnuwUtilsThrowIf } from './RsuvBnuwUtils';\r\n\r\n/**\r\n * Представляет строку не нулевой длины\r\n *\r\n * ID [[1636807341]]\r\n *\r\n * @implements RsuvBnuwNT\r\n */\r\nexport class RsuvTxString implements RsuvBnuwNT {\r\n  constructor(public val: string) {\r\n    bnuwUtilsThrowIf(this)\r\n  }\r\n\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    try {\r\n      if (!this.val) {\r\n        return new RsuvResultBoolPknz(false, '[[210705185504]]', 'is falsy');\r\n      }\r\n      if (!_.isString(this.val)) {\r\n        return new RsuvResultBoolPknz(\r\n          false,\r\n          '[[210706090804]]',\r\n          'is not string'\r\n        );\r\n      }\r\n      if (this.val.length < 1) {\r\n        return new RsuvResultBoolPknz(false, '[[210705185559]]', 'length < 1');\r\n      }\r\n    } catch (err) {\r\n      return new RsuvResultBoolPknz(\r\n        false,\r\n        '[[210705185560]]',\r\n        (err as Error).message\r\n      );\r\n    }\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n}\r\n","/*\r\nутилиты для String\r\n */\r\n\r\nimport { RsuvTxString } from './RsuvTxString';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { RsuvResultTibo } from './RsuvResultTibo';\r\nimport _ from 'lodash';\r\n\r\n/**\r\n * Возвращает TRUE если строка str это falsy, строка нулевой длины, или строка из одних пробелов\r\n *\r\n * source [210217114100]\r\n */\r\nexport function isEmptyOrWhitespaces(str: any): Boolean {\r\n  return (!str || str.length === 0 || /^\\s*$/.test(str))\r\n}\r\n\r\n/**\r\n * ID [[210713104651]] rev 1 1.0 2021-07-13\r\n * source ID [210518234642] rev 1 1.0 2021-05-18\r\n *\r\n * Возвращает сколько раз строка (2) встречается в строке (1).\r\n * Чувствительна к регистру.\r\n * Если не находит вхождений, и в невалидных случаях, возвращает 0.\r\n * @param target string (1) -- например 'aba'\r\n * @param substr string (2) -- например 'a'\r\n * @return number например 2\r\n */\r\nexport function substrCount(target: string, substr: string): number {\r\n  if (target && substr) {\r\n    const ret = target.split(substr).length - 1\r\n    return ret >= 0 ? ret : 0;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/**\r\n * ID [[210713104605]] rev 1 1.0.0 2021-07-13\r\n * source ID [210518234643] rev 1 1.0 2021-05-19\r\n *\r\n * {тоже что и А только не чувствительна к регистру}\r\n *\r\n * Возвращает сколько раз строка (2) встречается в строке (1).\r\n * Не чувствительна к регистру.\r\n * Если не находит вхождений, и в невалидных случаях, возвращает 0.\r\n * @param target string (1) -- например 'aba'\r\n * @param substr string (2) -- например 'A'\r\n * @return number например 2\r\n */\r\nexport function substrCountB(target: string, substr: string): number {\r\n  if (target && substr) {\r\n    const ret = target.toLowerCase().split(substr.toLowerCase()).length - 1\r\n    return ret >= 0 ? ret : 0;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Возвращает информацию о том в каких местах строки (1) встречается строка (2).\r\n * Допускает содержание в (2) символов считающихся специальными для регулярных выражений - экранирует их.\r\n * ID [[210801094836]] rev 1 1.0.0 2021-08-01\r\n * @param target (1) --\r\n * @param substr (2) --\r\n * @param ignoreCase (3) -- TRUE если нужно игнорировать регистр символов\r\n * @return RsuvT7[] - пустой массив если вхождений не найдено и при нештатах\r\n */\r\nexport function substrIndexes(target: string, substr: string, ignoreCase: boolean): RsuvT7[] {\r\n  const ret: RsuvT7[] = []\r\n  if (!target || !substr\r\n    || !_.isString(target) || !_.isString(substr)\r\n    || target.length < 1 || substr.length < 1\r\n    || target.length < substr.length) {\r\n    return ret\r\n  }\r\n  const substrEscape = _.escapeRegExp(substr);\r\n  const rg = new RegExp(substrEscape, 'g' + (ignoreCase ? 'i' : ''))\r\n  let res: any = true;\r\n  while (res) {\r\n    res = rg.exec(target)\r\n    if (res) {\r\n      ret.push(new RsuvT7(res.index, res.index + substr.length))\r\n    }\r\n  }\r\n  return ret\r\n}\r\n\r\n/**\r\n * Предоставляет полную информацию о том как строка (2) соотносится со строкой (1), например содержит ли (1) подстроку\r\n * (2), начинается ли с неё, заканчивается ли ей, имеет ли с ней полное соответствие. Вся эта информация проверяется для\r\n * двух вариантов - с учетом регистра и без учета регистра символов (этим отличается от версии А текущей функции)\r\n *\r\n * @param strTarget (1) --\r\n * @param strSub (2) --\r\n * @return RsuvResultTibo<RsuvT5>\r\n */\r\nexport function stringsTwoInfoB(strTarget: RsuvTxString, strSub: RsuvTxString): RsuvResultTibo<RsuvT5> {\r\n  // --- verify\r\n  const verif: RsuvResultBoolPknz = RsuvResultBoolPknz.successAllIsSugar([strTarget.bnuwIsValid(), strSub.bnuwIsValid()])\r\n  if (!verif.success) {\r\n    return RsuvResultTibo.fromPknz(verif)\r\n  }\r\n  // ---\r\n  const strTargetRaw = strTarget.val\r\n  const strSubRaw = strSub.val\r\n  // ---\r\n  const t5 = new RsuvT5()\r\n  // ---\r\n  if (strSubRaw.length > strTargetRaw.length) {\r\n    return new RsuvResultTibo({success: true, value: t5}); // <=== RETURN\r\n  }\r\n  // --- --- без учета регистра\r\n  const t4NoSens = new RsuvT4()\r\n  // --- full match\r\n  if (strTargetRaw.length === strSubRaw.length && strTargetRaw.toLowerCase() === strSubRaw.toLowerCase()) {\r\n    t4NoSens.rsuvT3.push(RSUV_T3.COMPLETE_MATCH)\r\n    t4NoSens.rsuvT3.push(RSUV_T3.STARTED)\r\n    t4NoSens.rsuvT3.push(RSUV_T3.ENDED)\r\n    t4NoSens.rsuvT3.push(RSUV_T3.CONTAINS)\r\n    t4NoSens.containsCount = 1\r\n    // ---\r\n    t4NoSens.containsIndexes.push(new RsuvT7(0, strSubRaw.length))\r\n  } else {\r\n    const indexes = substrIndexes(strTargetRaw, strSubRaw, true)\r\n    t4NoSens.containsIndexes = indexes\r\n    // -- contains\r\n    t4NoSens.containsCount = indexes.length\r\n    if (t4NoSens.containsCount > 0) {\r\n      t4NoSens.rsuvT3.push(RSUV_T3.CONTAINS)\r\n    }\r\n    // -- started\r\n    if (strTargetRaw.substring(0, strSubRaw.length).toLowerCase() === strSubRaw.toLowerCase()) {\r\n      t4NoSens.rsuvT3.push(RSUV_T3.STARTED)\r\n    }\r\n    // -- ended\r\n    if (strTargetRaw.substring(strTargetRaw.length - strSubRaw.length, strTargetRaw.length).toLowerCase() === strSubRaw.toLowerCase()) {\r\n      t4NoSens.rsuvT3.push(RSUV_T3.ENDED)\r\n    }\r\n  }\r\n  // --- --- с учетом регистра\r\n  const t4Sens = new RsuvT4()\r\n  if (strTargetRaw.length === strSubRaw.length && strTargetRaw === strSubRaw) {\r\n    t4Sens.rsuvT3.push(RSUV_T3.COMPLETE_MATCH)\r\n    t4Sens.rsuvT3.push(RSUV_T3.STARTED)\r\n    t4Sens.rsuvT3.push(RSUV_T3.ENDED)\r\n    t4Sens.rsuvT3.push(RSUV_T3.CONTAINS)\r\n    t4Sens.containsCount = 1\r\n    t4Sens.containsIndexes.push(new RsuvT7(0, strSubRaw.length))\r\n  } else {\r\n    const indexes2 = substrIndexes(strTargetRaw, strSubRaw, false)\r\n    t4Sens.containsIndexes = indexes2\r\n    t4Sens.containsCount = indexes2.length\r\n    if (t4Sens.containsCount > 0) {\r\n      t4Sens.rsuvT3.push(RSUV_T3.CONTAINS)\r\n    }\r\n    // -- started\r\n    if (strTargetRaw.substring(0, strSubRaw.length) === strSubRaw) {\r\n      t4Sens.rsuvT3.push(RSUV_T3.STARTED)\r\n    }\r\n    // -- ended\r\n    if (strTargetRaw.substring(strTargetRaw.length - strSubRaw.length, strTargetRaw.length) === strSubRaw) {\r\n      t4Sens.rsuvT3.push(RSUV_T3.ENDED)\r\n    }\r\n  }\r\n  // --- ---\r\n  t5.sensitive = t4Sens\r\n  t5.notSensitive = t4NoSens\r\n  // ---\r\n  return new RsuvResultTibo({success: true, value: t5})\r\n}\r\n\r\n/**\r\n * Предоставляет полную информацию о том как строка (2) соотносится со строкой (1), например содержит ли (1) подстроку\r\n * (2), начинается ли с неё, заканчивается ли ей, имеет ли с ней полное соответствие, на каких индексах начинается и\r\n * заканчивается подстрока (2) в строке (1). Вся эта информация проверяется для\r\n * двух варинатов - с учетом регистра и без учета регистра символов (3)\r\n * ID [[210801103621]] rev 1 1.0.0 2021-08-01\r\n * @param strTarget (1) --\r\n * @param strSub (2) --\r\n * @param ignoreCase (3) -- TRUE если нужно игнорировать регистр символов\r\n * @return RsuvResultTibo<RsuvT4>\r\n */\r\nexport function stringsTwoInfo(strTarget: RsuvTxString, strSub: RsuvTxString, ignoreCase: boolean = true): RsuvResultTibo<RsuvT4> {\r\n  // --- verify\r\n  const verif: RsuvResultBoolPknz = RsuvResultBoolPknz.successAllIsSugar([strTarget.bnuwIsValid(), strSub.bnuwIsValid()])\r\n  if (!verif.success) {\r\n    return RsuvResultTibo.fromPknz(verif)\r\n  }\r\n  // ---\r\n  const strTargetRaw = strTarget.val\r\n  const strSubRaw = strSub.val\r\n  // ---\r\n  let t4 = new RsuvT4();\r\n  if (strSubRaw.length > strTargetRaw.length) {\r\n    return new RsuvResultTibo({success: true, value: t4}); // <=== RETURN\r\n  }\r\n  // --- --- без учета регистра\r\n  if (ignoreCase) {\r\n    // --- full match\r\n    if (strTargetRaw.length === strSubRaw.length && strTargetRaw.toLowerCase() === strSubRaw.toLowerCase()) {\r\n      t4.rsuvT3.push(RSUV_T3.COMPLETE_MATCH)\r\n      t4.rsuvT3.push(RSUV_T3.STARTED)\r\n      t4.rsuvT3.push(RSUV_T3.ENDED)\r\n      t4.rsuvT3.push(RSUV_T3.CONTAINS)\r\n      t4.containsCount = 1\r\n      // ---\r\n      t4.containsIndexes.push(new RsuvT7(0, strSubRaw.length))\r\n    } else {\r\n      const indexes = substrIndexes(strTargetRaw, strSubRaw, true)\r\n      t4.containsIndexes = indexes\r\n      // -- contains\r\n      t4.containsCount = indexes.length\r\n      if (t4.containsCount > 0) {\r\n        t4.rsuvT3.push(RSUV_T3.CONTAINS)\r\n      }\r\n      // -- started\r\n      if (strTargetRaw.substring(0, strSubRaw.length).toLowerCase() === strSubRaw.toLowerCase()) {\r\n        t4.rsuvT3.push(RSUV_T3.STARTED)\r\n      }\r\n      // -- ended\r\n      if (strTargetRaw.substring(strTargetRaw.length - strSubRaw.length, strTargetRaw.length).toLowerCase() === strSubRaw.toLowerCase()) {\r\n        t4.rsuvT3.push(RSUV_T3.ENDED)\r\n      }\r\n    }\r\n  } else {\r\n    // --- --- с учетом регистра\r\n    if (strTargetRaw.length === strSubRaw.length && strTargetRaw === strSubRaw) {\r\n      t4.rsuvT3.push(RSUV_T3.COMPLETE_MATCH)\r\n      t4.rsuvT3.push(RSUV_T3.STARTED)\r\n      t4.rsuvT3.push(RSUV_T3.ENDED)\r\n      t4.rsuvT3.push(RSUV_T3.CONTAINS)\r\n      t4.containsCount = 1\r\n      t4.containsIndexes.push(new RsuvT7(0, strSubRaw.length))\r\n    } else {\r\n      const indexes2 = substrIndexes(strTargetRaw, strSubRaw, false)\r\n      t4.containsIndexes = indexes2\r\n      t4.containsCount = indexes2.length\r\n      if (t4.containsCount > 0) {\r\n        t4.rsuvT3.push(RSUV_T3.CONTAINS)\r\n      }\r\n      // -- started\r\n      if (strTargetRaw.substring(0, strSubRaw.length) === strSubRaw) {\r\n        t4.rsuvT3.push(RSUV_T3.STARTED)\r\n      }\r\n      // -- ended\r\n      if (strTargetRaw.substring(strTargetRaw.length - strSubRaw.length, strTargetRaw.length) === strSubRaw) {\r\n        t4.rsuvT3.push(RSUV_T3.ENDED)\r\n      }\r\n    }\r\n  }\r\n  // ---\r\n  return new RsuvResultTibo({success: true, value: t4})\r\n}\r\n\r\n/**\r\n * [[asau24]]\r\n * СМ. ТАКЖЕ: [asau22]\r\n */\r\nexport enum RSUV_T3 {\r\n  // target начинается с sub\r\n  STARTED = 'rsuv_t3_started',\r\n  // target заканчивается на sub\r\n  ENDED = 'rsuv_t3_ended',\r\n  // target содержит sub\r\n  CONTAINS = 'rsuv_t3_contains',\r\n  // target полностью совпадает с sub\r\n  COMPLETE_MATCH = 'rsuv_t3_complete_match'\r\n}\r\n\r\n/**\r\n * Учёт регистра символов\r\n */\r\nexport enum RSUV_T6_CASE {\r\n  SENSITIVE = 'rsuv_t6_case_sensitive',\r\n  NOT_SENSITIVE = 'rsuv_t6_not_case_sensitive'\r\n}\r\n\r\nexport class RsuvT4 {\r\n  // сколько раз sub встречается в target\r\n  containsCount: number = 0\r\n  containsIndexes: RsuvT7[] = []\r\n  rsuvT3: RSUV_T3[] = []\r\n}\r\n\r\nexport class RsuvT5 {\r\n  // информация для варианта \"чувствительно к регистру\"\r\n  sensitive: RsuvT4 = new RsuvT4()\r\n  // информация для варианта \"НЕ чувствительно к регистру\"\r\n  notSensitive: RsuvT4 = new RsuvT4()\r\n}\r\n\r\nexport class RsuvT7 {\r\n  constructor(public startIndex: number = 0, public endIndex: number = 0) {\r\n  }\r\n}\r\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { RsuvTxString } from './RsuvTxString';\r\n\r\n/**\r\n * Представляет строку которая: (не нулевой длины) И (не содержит пробелов/переносов)\r\n */\r\nexport class RsuvTxStringAB extends RsuvTxString {\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    try {\r\n      const res = super.bnuwIsValid();\r\n      if (!res.success) {\r\n        return res;\r\n      }\r\n      // ---\r\n      if (/\\s/.test(this.val)) {\r\n        return new RsuvResultBoolPknz(\r\n          false,\r\n          '[[210706092510]]',\r\n          'includes whitespace(s)'\r\n        );\r\n      }\r\n    } catch (err) {\r\n      return new RsuvResultBoolPknz(\r\n        false,\r\n        '[[210706092135]]',\r\n        (err as Error).message\r\n      );\r\n    }\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n}\r\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { RsuvTxString } from './RsuvTxString';\r\n\r\n/**\r\n * Представляет строку которая: (не нулевой длины) И (состоит только из символов [a-zA-Z0-9_])\r\n *\r\n * ID [[1636807311]]\r\n * @implements RsuvBnuwNT\r\n */\r\nexport class RsuvTxStringAC extends RsuvTxString {\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    try {\r\n      const res = super.bnuwIsValid();\r\n      if (!res.success) {\r\n        return res;\r\n      }\r\n      // ---\r\n      if (!/^[a-zA-Z0-9_]+$/.test(this.val)) {\r\n        return new RsuvResultBoolPknz(\r\n          false,\r\n          '[[1636300398]]',\r\n          'allowable only [a-zA-Z0-9_] symbols'\r\n        );\r\n      }\r\n    } catch (err) {\r\n      return new RsuvResultBoolPknz(\r\n        false,\r\n        '[[1636300404]]',\r\n        (err as Error).message\r\n      );\r\n    }\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n}\r\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { RsuvTxStringAC } from './RsuvTxStringAC';\r\n\r\n/**\r\n * Представляет строку которая: (не нулевой длины) И (состоит только из символов [a-zA-Z0-9_])\r\n * И (начинается не с цифры)\r\n *\r\n * ID [[1636807220]]\r\n * @implements RsuvBnuwNT\r\n */\r\nexport class RsuvTxStringACB extends RsuvTxStringAC {\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    try {\r\n      const res = super.bnuwIsValid();\r\n      if (!res.success) {\r\n        return res;\r\n      }\r\n      // ---\r\n      if (/^[0-9]$/.test(this.val[0])) {\r\n        return new RsuvResultBoolPknz(\r\n          false,\r\n          '[[1636301354]]',\r\n          'first number is not allowable'\r\n        );\r\n      }\r\n    } catch (err) {\r\n      return new RsuvResultBoolPknz(\r\n        false,\r\n        '[[1636301361]]',\r\n        (err as Error).message\r\n      );\r\n    }\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n}\r\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { RsuvTxStringAC } from './RsuvTxStringAC';\r\n\r\n/**\r\n * Представляет строку которая: (не нулевой длины) И (состоит только из символов [0-9] т.е. только из цифр)\r\n *\r\n * ID [[211210125644]]\r\n * @implements RsuvBnuwNT\r\n */\r\nexport class RsuvTxStringACC extends RsuvTxStringAC {\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    try {\r\n      const res = super.bnuwIsValid();\r\n      if (!res.success) {\r\n        return res;\r\n      }\r\n      // ---\r\n      if (!/^[0-9]+$/.test(this.val)) {\r\n        return new RsuvResultBoolPknz(\r\n          false,\r\n          '[[211210125801]]',\r\n          'only numbers allowable'\r\n        );\r\n      }\r\n    } catch (err) {\r\n      return new RsuvResultBoolPknz(\r\n        false,\r\n        '[[211210125818]]',\r\n        (err as Error).message\r\n      );\r\n    }\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n}\r\n","import dayjs from 'dayjs';\r\nimport _ from 'lodash';\r\n\r\n/*\r\nПОНЯТИЯ:\r\n-- [yata] - {number} милисекунды с 01.01.1970\r\n-- [eavv] - {number} секунды с 01.01.1970\r\n-- [necz] - {string} [yata] в виде строки\r\n-- [tafb] - {string} [eavv] в виде строки\r\n-- [rvuo] - {string} формат YYYY-MM-DDTHH:mm, например '2021-12-12T12:04'\r\n */\r\n\r\nexport enum DATETIME {\r\n  YATA = 'yata',\r\n  NECZ = 'necz',\r\n  RVUO = 'rvuo'\r\n}\r\n\r\nexport class ResultAsau36<T> {\r\n  constructor(public success: boolean, public value: T, public code: number) {\r\n  }\r\n}\r\n\r\n// export function convert(from: DATETIME, to: DATETIME, fromVal: any): ResultAsau36<any> {\r\n//   if (!from) {\r\n//     return new ResultAsau36(false, null, 1)\r\n//   }\r\n//   if (!to) {\r\n//     return new ResultAsau36(false, null, 2)\r\n//   }\r\n//   if (!fromVal) {\r\n//     return new ResultAsau36(false, null, 3)\r\n//   }\r\n//\r\n// }\r\n\r\n/**\r\n * Преобразование формата [yata] (1) в формат [rvuo].\r\n * @param yata {number} (1) -- [yata], например 1637347161129\r\n * @return null если (1) не finite-число\r\n */\r\nexport function rvuoFromYata(yata: number | any): string | null {\r\n  if (!yataIs(yata)) {\r\n    return null\r\n  }\r\n  return dayjs(yata).format('YYYY-MM-DDTHH:mm');\r\n}\r\n\r\nexport function yataFromRvuo(rvuo: string | any): ResultAsau36<number> {\r\n  if (!_.isString(rvuo)) {\r\n    return new ResultAsau36<number>(false, 0, 2)\r\n  }\r\n  const necz = rvuoIs(rvuo)\r\n  if (necz) {\r\n    const yata = _.toInteger(necz)\r\n    return new ResultAsau36<number>(true, yata, 0)\r\n  }\r\n  return new ResultAsau36<number>(false, 0, 1)\r\n}\r\n\r\nexport function yataIs(yata: number | any): boolean {\r\n  if (!_.isFinite(yata)) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function yataFromEavv(eavv: number | any): ResultAsau36<number> {\r\n  if (!eavvIs(eavv)) {\r\n    return new ResultAsau36<number>(false, 0, 1)\r\n  }\r\n  const yata = eavv * 1000;\r\n  return new ResultAsau36<number>(true, yata, 0)\r\n}\r\n\r\n/**\r\n * Возвращает {success: true, value: true, ...} если дата (1) не достигла даты (2) (т.е. меньше даты (2))\r\n * @param yata (1) -- [yata]\r\n * @param yataExpire (2) -- [yata]\r\n */\r\nexport function yataIsActual(yata: number | any, yataExpire: number | any): ResultAsau36<boolean> {\r\n  if (!yataIs(yata)) {\r\n    return new ResultAsau36<boolean>(false, false, 1)\r\n  }\r\n  if (!yataIs(yataExpire)) {\r\n    return new ResultAsau36<boolean>(false, false, 2)\r\n  }\r\n  if (yata > yataExpire) {\r\n    return new ResultAsau36<boolean>(true, false, 0)\r\n  }\r\n  return new ResultAsau36<boolean>(true, true, 0)\r\n}\r\n\r\nexport function eavvIs(eavv: number | any): boolean {\r\n  if (!_.isFinite(eavv)) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Возвращает [necz] ([yata] как строка) от (1) если (1) это валидный [rvuo], иначе возвращает null\r\n * @param rvuo (1) -- [rvuo], например '2021-12-10T12:04'\r\n */\r\nexport function rvuoIs(rvuo: string | any): string | null {\r\n  if (!_.isString(rvuo)) {\r\n    return null\r\n  }\r\n  const ex = /^(\\d\\d\\d\\d+)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d)$/.exec(rvuo)\r\n  if (ex) {\r\n    const month = Number(ex[2])\r\n    const day = Number(ex[3])\r\n    const hour = Number(ex[4])\r\n    const minute = Number(ex[5])\r\n    if (month < 1 || month > 12) {\r\n      return null\r\n    }\r\n    if (day < 1 || day > 31) {\r\n      return null\r\n    }\r\n    if (hour < 0 && hour > 24) {\r\n      return null\r\n    }\r\n    if (minute < 0 && minute > 59) {\r\n      return null\r\n    }\r\n  }\r\n  // ---\r\n  const day = dayjs(rvuo)\r\n  const yata = day.toDate().getTime()\r\n  if (!_.isFinite(yata)) {\r\n    return null;\r\n  }\r\n  return yata + '';\r\n}\r\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { RsuvTxString } from './RsuvTxString';\r\nimport { isEmptyOrWhitespaces } from './RsuvTuString';\r\n\r\n/**\r\n * Представляет строку которая: (не нулевой длины) И (не состоит из одних пробелов/переносов)\r\n */\r\nexport class RsuvTxStringAD extends RsuvTxString {\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    try {\r\n      const res = super.bnuwIsValid();\r\n      if (!res.success) {\r\n        return res;\r\n      }\r\n      // ---\r\n      if (isEmptyOrWhitespaces(this.val)) {\r\n        return new RsuvResultBoolPknz(\r\n          false,\r\n          '[[210705191242]]',\r\n          'contains only whitespaces'\r\n        );\r\n      }\r\n    } catch (err) {\r\n      return new RsuvResultBoolPknz(\r\n        false,\r\n        '[[210705190613]]',\r\n        (err as Error).message\r\n      );\r\n    }\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n}\r\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { RsuvTxStringAD } from './RsuvTxStringAD';\r\n\r\n/**\r\n * Представляет строку которая: (не нулевой длины) И (не состоит из одних пробелов/переносов) И (не начинается с пробела/переноса)\r\n * И (не заканчивается пробелом/переносом)\r\n */\r\nexport class RsuvTxStringADB extends RsuvTxStringAD {\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    try {\r\n      const res = super.bnuwIsValid();\r\n      if (!res.success) {\r\n        return res;\r\n      }\r\n      // ---\r\n      if (/^\\s/.test(this.val)) {\r\n        return new RsuvResultBoolPknz(\r\n          false,\r\n          '[[210705191717]]',\r\n          'started with whitespace'\r\n        );\r\n      }\r\n      if (/\\s$/.test(this.val)) {\r\n        return new RsuvResultBoolPknz(\r\n          false,\r\n          '[[210705191826]]',\r\n          'ended with whitespace'\r\n        );\r\n      }\r\n    } catch (err) {\r\n      return new RsuvResultBoolPknz(\r\n        false,\r\n        '[[210705191508]]',\r\n        (err as Error)?.message\r\n      );\r\n    }\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n}\r\n","/**\r\n работа с \"деревом\" которое образуют поля объектов\r\n */\r\nimport { RsuvResultTibo } from './RsuvResultTibo';\r\nimport _ from 'lodash';\r\nimport { RsuvTxFieldNameLodashB } from './RsuvTxFieldNameLodashB';\r\n\r\n/**\r\n * Представление *рез-объекта (см. RsuvTuTree.accum() )\r\n */\r\nexport interface RsuvAsau89 {\r\n  value: string,\r\n  ids: string[]\r\n}\r\n\r\n/**\r\n * Используется в RsuvTuTree.accum()\r\n */\r\nexport enum RsuvAsau90 {\r\n  SUCCESS_CODE_1 = '1',\r\n  SUCCESS_CODE_2 = '2'\r\n}\r\n\r\n/**\r\n * Используется в RsuvTuTree.accum().\r\n * Префикс используемый если не найден валидный ID *элемента.\r\n */\r\nexport const RSUV_SPC_ID_PLUG_PREFIX = 'rsuv-spc-id-plug-';\r\n\r\n/**\r\n * Используется в RsuvTuTree.uniqValuesIs()\r\n */\r\nexport interface RsuvAsau91 {\r\n  /**\r\n   * Значение которое повторяется\r\n   */\r\n  value: any\r\n  /**\r\n   * Сколько раз оно повторяется\r\n   */\r\n  count: number\r\n  /**\r\n   * На каких индексах располагаются эти значения в исходном массиве\r\n   */\r\n  indexes: number[]\r\n}\r\n\r\nexport enum RsuvAsau92 {\r\n  SUCCESS_CODE_1 = '1',\r\n  SUCCESS_CODE_2 = '2',\r\n  ERR_CODE_1 = '100'\r\n}\r\n\r\nexport interface RsuvAdau97 {\r\n  key: any,\r\n  value: any,\r\n  parent: any\r\n}\r\n\r\nexport class RsuvTuTree {\r\n  /**\r\n   * Собирает из *объектов значения поля (2). *Объекты ищет как в (1), если (1) это массив, так и во всех полях (3),\r\n   * если они массивы, рекурсивно.\r\n   *\r\n   * ПОНЯТИЯ\r\n   * -- *объект - объект из (1) если (1) это массив, или объект из (3) если это массив. В *объекте ищется значение\r\n   * поля (2)\r\n   *\r\n   * Моё видео-объяснение - https://www.notion.so/surr/video-220515-1250-dfeab95377e74c238c1eb066b51f730c\r\n   *\r\n   * @param obj (1) -- например [{id: 1, childs: [{id: 3}]}, {id: 2}]\r\n   * @param fieldValueName (2) -- например 'id'\r\n   * @param fieldChildsName (3) -- например 'childs'; если значение falsy то искать в этом поле не будет\r\n   * @return например [1, 3, 2]\r\n   */\r\n  static values(obj: any, fieldValueName: string, fieldChildsName: string) {\r\n\r\n    function recurs(arrBack: Array<any>, elems: Array<any>) {\r\n      elems.forEach(obj => {\r\n        if (obj.hasOwnProperty(fieldValueName)) {\r\n          arrBack.push(obj[fieldValueName])\r\n        }\r\n        const childs = obj[fieldChildsName]\r\n        if (childs && Array.isArray(childs) && childs.length > 0) {\r\n          recurs(arrBack, childs)\r\n        }\r\n      })\r\n    }\r\n\r\n    const result: Array<any> = []\r\n    if (Array.isArray(obj)) {\r\n      recurs(result, obj)\r\n    } else {\r\n      if (obj.hasOwnProperty(fieldValueName)) {\r\n        result.push(obj[fieldValueName])\r\n      }\r\n      const childs = obj[fieldChildsName]\r\n      if (childs && Array.isArray(childs) && childs.length > 0) {\r\n        recurs(result, childs)\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Подсчитывает (аккумулирует) *строки. Для каждой *строки создаёт *рез-объект.\r\n   * Числовые значения из (2) и (3) преобразуются к строке.\r\n   * Если *ид-значение это не строка и не целое число, либо поля (3) в *элементе нет, то генерирует специальную\r\n   * ID-заглушку с префиксом \"{@link RSUV_SPC_ID_PLUG_PREFIX} + число-соответствующее-индексу-*элемента\".\r\n   * Регистр символов *строк учитывается.\r\n   * Если *строка повторяется в *массиве-тегов несколько раз, то и *ид-значение будет встречаться несколько раз\r\n   * в *рез-объекте если (4) is FALSE, иначе только один раз\r\n   *\r\n   * Моё видео-объяснение: https://www.notion.so/surr/video-220514-2257-6195c03c8fe3412b846401d181f6f6c0\r\n   *\r\n   * ПОНЯТИЯ\r\n   * -- *массив - массив объектов (1)\r\n   * -- *элемент - отдельный элемент *массива\r\n   * -- *массив-тегов - массив из поля (2) *элемента\r\n   * -- *ид-значение - содержимое поля (3) *элемента\r\n   * -- *строка - элемент *массива-тегов\r\n   * -- *рез-объект, тип {@link RsuvAsau89}  - объект описывающий результат по отдельной *строке; имеет вид\r\n   * {value: X, ids: Y[]},\r\n   * где X - это *строка, а Y - это массив *ид-значений *элементов где эта *строка встречается\r\n   *\r\n   * @param arr (1) -- массив объектов, например [\r\n   *         {name: 'name1', tags: ['tag1', 'tag2']},\r\n   *         {name: 'name2', tags: ['tag2', 'tag3']},\r\n   *       ]\r\n   * @param fieldNameValues (2) -- поле содежащее массив string | number, например 'tags'\r\n   * @param fieldNameId (3) -- поле содержащее идентификатор типа string | number, например 'name'\r\n   * @param isUniqueIds (4) --\r\n   * @return например { success: true, value: [{value: 'tag1', ids: ['name1'], ...}], ...}\r\n   */\r\n  static accum(\r\n    arr: Array<object>,\r\n    fieldNameValues: RsuvTxFieldNameLodashB,\r\n    fieldNameId: RsuvTxFieldNameLodashB,\r\n    isUniqueIds: boolean\r\n  ): RsuvResultTibo<RsuvAsau89[]> {\r\n\r\n    /**\r\n     * Добавляет (или не добавляет) в аккумулятор (1) запись\r\n     * @param acc\r\n     * @param key\r\n     * @param id\r\n     */\r\n    function fnToAcc(acc: Map<string, string[]>, key: string, id: string) {\r\n      if (!acc.has(key)) {\r\n        acc.set(key, [id])\r\n      } else {\r\n        const arr0 = acc.get(key);\r\n        if (isUniqueIds) {\r\n          arr0!.includes(id) || arr0!.push(id)\r\n        } else {\r\n          arr0!.push(id);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (arr.length > 0) {\r\n      // --- acc\r\n      const acc = new Map<string, string[]>()\r\n      arr.map((elObj, ix) => {\r\n        const values = _.get(elObj, fieldNameValues, [])\r\n        if (_.isArray(values) && values.length > 0) {\r\n          values.map(elVal => {\r\n            if (_.isString(elVal) || _.isFinite(elVal)) {\r\n              const elVal0 = elVal + '';\r\n              const id = _.get(elObj, fieldNameId);\r\n              let id0 = _.isString(id) ? id : _.isFinite(id) ? String(id) : null\r\n              if (id0 === null) {\r\n                id0 = RSUV_SPC_ID_PLUG_PREFIX + String(ix);\r\n              }\r\n              fnToAcc(acc, elVal0, id0)\r\n            }\r\n          })\r\n        }\r\n      })\r\n      // --- преобразуем acc к RsuvAsau89[]\r\n      const ret: RsuvAsau89[] = []\r\n      acc.forEach((val: string[], key: string) => {\r\n        ret.push({value: key, ids: val})\r\n      })\r\n      // ---\r\n      return new RsuvResultTibo<RsuvAsau89[]>({success: true, value: ret, successCode: RsuvAsau90.SUCCESS_CODE_1})\r\n    }\r\n\r\n    return new RsuvResultTibo({success: true, value: [], successCode: RsuvAsau90.SUCCESS_CODE_2})\r\n  }\r\n\r\n  /**\r\n   * Проверяет на уникальность поле (2) объектов из (1). Если они все уникальны, то возвращает пустой массив, иначе\r\n   * возвращает массив тех значений из (2) которые повторяются и то сколько раз они повторяются, и на каких индексах\r\n   * эти повторы располагаются\r\n   * @param arr (1) --\r\n   * @param fieldName (2) -- например 'profile.name'\r\n   * @param errInit (3) -- если TRUE то, если хоть в одном объекте из (1) не будет поля (2), то будет возвращён неуспех\r\n   */\r\n  static uniqValuesIs(arr: object[], fieldName: RsuvTxFieldNameLodashB, errInit: boolean): RsuvResultTibo<RsuvAsau91[]> {\r\n    type Type1334 = { count: number, indexes: number[] }\r\n\r\n    if (arr.length < 1) {\r\n      return new RsuvResultTibo<RsuvAsau91[]>({success: true, value: [], successCode: RsuvAsau92.SUCCESS_CODE_2})\r\n    }\r\n    // --- mp\r\n    const mp = new Map<any, Type1334>()\r\n    let isSomeFieldNotExist = false;\r\n    arr.map((el, ix: number) => {\r\n      const isHasField = _.has(el, fieldName)\r\n      if (isHasField) {\r\n        const value = _.get(el, fieldName)\r\n        if (mp.has(value)) {\r\n          const rr = mp.get(value)\r\n          rr!.count++\r\n          rr!.indexes.push(ix)\r\n        } else {\r\n          mp.set(value, {count: 1, indexes: [ix]})\r\n        }\r\n      } else if (errInit) {\r\n        isSomeFieldNotExist = true;\r\n      }\r\n    })\r\n    // ---\r\n    if (isSomeFieldNotExist) {\r\n      return new RsuvResultTibo<RsuvAsau91[]>({success: false, errCode: RsuvAsau92.ERR_CODE_1})\r\n    }\r\n    // ---\r\n    const ret: RsuvAsau91[] = []\r\n    mp.forEach((val: Type1334, key: any) => {\r\n      if (val.count > 1) {\r\n        ret.push({value: key, count: val.count, indexes: val.indexes} as RsuvAsau91)\r\n      }\r\n    })\r\n    // ---\r\n    return new RsuvResultTibo<RsuvAsau91[]>({success: true, value: ret, successCode: RsuvAsau92.SUCCESS_CODE_1})\r\n  }\r\n\r\n  /**\r\n   * Проходит по всем(*A*) сущностям (1), рекурсивно, и возвращает те их них (в виде массива объектов), для которых (2) даёт TRUE.\r\n   *\r\n   * (*A*) если (3) is FALSY по прекращает поиск после первой же находки.\r\n   *\r\n   * @param entry (1) -- массив или объект, например {aa: 1, bb: { cc: 3 }}\r\n   * @param predicate (2) -- 1-параметр это ключ сущности, 2-й это значение сущности; например (key) => key === 'cc'\r\n   * @param isEvery (3) -- например true\r\n   * @return например [{ cc: 3 }]\r\n   */\r\n  static findDeepBy(\r\n    entry: object | any[],\r\n    predicate: (key: string | number, value: any) => boolean,\r\n    isEvery: boolean\r\n  ): any[] {\r\n    if (!entry) return [];\r\n    const acc: any[] = []\r\n    let isFinded = false;\r\n    let isFirst = true;\r\n    JSON.stringify(entry, (key0, value0) => {\r\n      if (!isFirst && (isEvery || (!isEvery && !isFinded))) {\r\n        if (predicate(key0, value0)) {\r\n          acc.push({[key0]: value0})\r\n          isFinded = true;\r\n        }\r\n      }\r\n      if (!isFirst && !isEvery && isFinded) {\r\n        return undefined;\r\n      }\r\n      isFirst = false;\r\n      return value0;\r\n    })\r\n    return acc;\r\n  }\r\n\r\n  /**\r\n   * Отличается от А тем что даёт информацию также о родителе (хосте) найденных сущностей, и соответственно возвращает\r\n   * результат в другом формате - в виде массива объектов { key: , value: , parent: }, где parent - это родитель (хост)\r\n   * @param entry (1) --\r\n   * @param predicate (2) -- отличается от А тем что также третьим параметром получает ссылку на родителя (хоста)\r\n   * @param isEvery (3) --\r\n   */\r\n  static findDeepByB(\r\n    entry: object | any[],\r\n    predicate: (key: string | number, value: any, parent: any) => boolean,\r\n    isEvery: boolean\r\n  ): RsuvAdau97[] {\r\n    if (!entry) return [];\r\n    const ret: RsuvAdau97[] = []\r\n    let isFinded = false;\r\n    let isFirst = true;\r\n    JSON.stringify(entry, function (key0, value0) {\r\n      if (!isFirst && (isEvery || (!isEvery && !isFinded))) {\r\n        if (predicate(key0, value0, this)) {\r\n          ret.push({key: key0, value: value0, parent: this})\r\n          isFinded = true;\r\n        }\r\n      }\r\n      if (!isFirst && !isEvery && isFinded) {\r\n        return undefined;\r\n      }\r\n      isFirst = false;\r\n      return value0;\r\n    })\r\n    return ret;\r\n  }\r\n\r\n}\r\n","import { RsuvTxStringAB } from './RsuvTxStringAB';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport EmailValidator from 'email-validator';\r\n\r\nexport class RsuvTxEmail extends RsuvTxStringAB {\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    const resV = EmailValidator.validate(this.val)\r\n    if(!resV) {\r\n      return new RsuvResultBoolPknz(false, '[[210706113857]]', 'EmailValidator')\r\n    }\r\n\r\n    // const resValid = super.bnuwIsValid();\r\n    // if (!resValid.success) {\r\n    //   return resValid;\r\n    // }\r\n    // // ---\r\n    // const b1 = new RegExp(\r\n    //   /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g,\r\n    // ).test(this.val)\r\n    // if (!b1) {\r\n    //   return new RsuvResultBoolPknz(false, '[[210706105956]]', 'is not email');\r\n    // }\r\n    // const splited = this.val.split('@');\r\n    // if (splited.length > 2) {\r\n    //   return new RsuvResultBoolPknz(false, '[[210706112944]]', 'only one @ allowed');\r\n    // }\r\n    // if(splited[0].length > 64) {\r\n    //   return new RsuvResultBoolPknz(false, '[[210706113459]]', 'local-part is > 64 length');\r\n    // }\r\n    return new RsuvResultBoolPknz(true)\r\n  }\r\n}\r\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/*\r\n[[zrnx]]\r\n */\r\n\r\n/**\r\n * [[rkyr]]\r\n */\r\nimport { RsuvDataSourceAecrNT } from './RsuvDataSourceAecrNT';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { RsuvPaginationGyth } from './RsuvPaginationGyth';\r\n\r\n/**\r\n * @class\r\n */\r\nexport class RsuvZrnxSubData<T> {\r\n\r\n  /** @constructor */\r\n  constructor(\r\n    /**\r\n     * номер страницы\r\n     */\r\n    public page: number = 0,\r\n    /**\r\n     * общее количество страниц\r\n     */\r\n    public pageCount: number = 1,\r\n    /**\r\n     * общее количество элементов\r\n     */\r\n    public elemsAllCount: number = 0,\r\n    /**\r\n     * коллекция элементов страницы\r\n     */\r\n    public elemsOfPage: T[] = []\r\n  ) {\r\n  }\r\n}\r\n\r\n/**\r\n * [[zrnx]]\r\n *\r\n * Сущность для использования в качестве посредника между абстрактным источником-данных (интерефейс\r\n * {@link RsuvDataSourceAecrNT}) и UI-списком-с-пагинацией.\r\n *\r\n * При вызове {@link make} делаются обращения к {@link dataSource} и на базе полученных данных вычисляются поля {@link page}\r\n * {@link elemsAllCount}, {@link elemsOfPage}, {@link pageCount}. Эти поля можно получить с помощью метода {@link dataGet}\r\n * в виде типа {@link RsuvZrnxSubData} для последующего использования в качестве входных данных для UI-списка-с-пагинацией\r\n * \r\n * @class\r\n */\r\nexport class RsuvAdapterZrnx<T> {\r\n  private page: number = 0\r\n  private elemsAllCount: number = 0\r\n  private elemsOfPage: T[] = []\r\n  private pageCount: number = 0\r\n\r\n  /**\r\n   * @constructor\r\n   * @param perPage (1) -- число-записей-на-странице, 1+\r\n   * @param dataSource (2) -- источник-данных\r\n   */\r\n  constructor(readonly perPage: number, readonly dataSource: RsuvDataSourceAecrNT<T>) {\r\n  }\r\n\r\n  /**\r\n   * Запрос данных и вычисление полей текущего объекта\r\n   *\r\n   * @async\r\n   * @param pageNum (1) -- номер страницы\r\n   * @param last (2) -- если TRUE, то (1) игнирируется и вычисление выполняется для последней страницы\r\n   */\r\n  async make(pageNum: number, last: boolean = false): Promise<RsuvResultBoolPknz> {\r\n    const elemsCount = await this.dataSource.elemsAllCountGet();\r\n    // ---\r\n    const rmPagination = new RsuvPaginationGyth(elemsCount, this.perPage);\r\n    const pageCount = rmPagination.pageCount\r\n    if (last) {\r\n      this.page = pageCount\r\n    } else {\r\n      this.page = pageCount < pageNum ? pageCount : pageNum;\r\n    }\r\n    this.elemsAllCount = elemsCount\r\n    this.pageCount = pageCount\r\n    // ---\r\n    const {indexStart, indexLast} = rmPagination.indexesByPageNum(this.page)\r\n    this.elemsOfPage = await this.dataSource.elemsGet(indexStart, indexLast - indexStart + 1)\r\n    // ---\r\n    return new RsuvResultBoolPknz() // TODO нужно продумать по части ошибок\r\n  }\r\n\r\n  /**\r\n   * Получение результатов вычислений\r\n   */\r\n  dataGet(): RsuvZrnxSubData<T> {\r\n    return new RsuvZrnxSubData<T>(this.page, this.pageCount, this.elemsAllCount, this.elemsOfPage)\r\n  }\r\n\r\n}\r\n\r\n\r\n","/*\r\n * Представляет boolean\r\n */\r\n\r\nimport { RsuvBnuwNT } from './RsuvBnuwNT';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport _ from 'lodash';\r\nimport { bnuwUtilsThrowIf } from './RsuvBnuwUtils';\r\n\r\n\r\nexport class RsuvTxBoolean implements RsuvBnuwNT {\r\n  constructor(public val: boolean) {\r\n    bnuwUtilsThrowIf(this);\r\n  }\r\n\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    try {\r\n      if (!_.isBoolean(this.val)) {\r\n        return new RsuvResultBoolPknz(false, '[[210711220826]]', 'is not boolean')\r\n      }\r\n    } catch (err) {\r\n      return new RsuvResultBoolPknz(false, '[[210705185560]]', (err as Error).message)\r\n    }\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n}\r\n","/*\r\nСущности для работы с checked-списками (списки хранящие информацию о том какой элемент чекнут, какой нет)\r\n\r\n[[ecxm]] - массив из [gnpw]-объектов или пустой массив\r\n[[gnpw]] - объект вида {id: string, checked: boolean}\r\n */\r\n\r\nimport { RsuvBnuwNT } from './RsuvBnuwNT';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { bnuwUtilsVerifyMulti } from './RsuvBnuwUtils';\r\nimport { RsuvTxBoolean } from './RsuvTxBoolean';\r\nimport { RsuvTxStringAB } from './RsuvTxStringAB';\r\n\r\n/**\r\n * Вместо этого типа нужно передавать тип UnwrapRef<RsuvCheckModelGnpw[]>, т.е. value из ref сделанного на RsuvCheckModelGnpw[]\r\n * <code lang=\"js\">\r\n *   ref([new RsuvCheckModelGnpw('1', false)]).value\r\n * </code>\r\n */\r\nexport type RsuvT1 = any[]\r\n\r\nexport class RsuvEcxm {\r\n  static find(models: RsuvT1, id: string) {\r\n    return models.find((model: RsuvCheckModelGnpw) => model.id === id);\r\n  }\r\n\r\n  /**\r\n   * Добавляет новый элемент (2) в конец (1)\r\n   * @param modelsBack (1) --\r\n   * @param model\r\n   */\r\n  static append(modelsBack: RsuvT1, model: RsuvCheckModelGnpw): RsuvResultBoolPknz {\r\n    const fModel = RsuvEcxm.find(modelsBack, model.id);\r\n    if (fModel) {\r\n      return new RsuvResultBoolPknz(false, '[[210712155908]]', 'already exist');\r\n    }\r\n    modelsBack.push(model);\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n\r\n  static appendMulti(modelsBack: RsuvT1, models: RsuvCheckModelGnpw[]): RsuvResultBoolPknz[] {\r\n    const ret: RsuvResultBoolPknz[] = [];\r\n    models.forEach(model => {\r\n      const res = RsuvEcxm.append(modelsBack, model);\r\n      if (!res.success) {\r\n        ret.push(res);\r\n      }\r\n    });\r\n    return ret;\r\n  }\r\n\r\n  static update(modelsBack: RsuvT1, model: RsuvCheckModelGnpw): RsuvResultBoolPknz {\r\n    const elem = RsuvEcxm.find(modelsBack, model.id);\r\n    if (elem) {\r\n      elem.checked = model.checked;\r\n      return new RsuvResultBoolPknz(true);\r\n    }\r\n    return new RsuvResultBoolPknz(false, '[[210712160222]]', 'not finded');\r\n  }\r\n\r\n  static updateMulti(modelsBack: RsuvT1, models: RsuvCheckModelGnpw[]): RsuvResultBoolPknz[] {\r\n    const ret: RsuvResultBoolPknz[] = [];\r\n    models.forEach(model => {\r\n      const res = RsuvEcxm.update(modelsBack, model);\r\n      if (!res.success) {\r\n        ret.push(res);\r\n      }\r\n    });\r\n    return ret;\r\n  }\r\n\r\n  static delete(modelsBack: RsuvT1, model: RsuvCheckModelGnpw): RsuvResultBoolPknz {\r\n    const index = modelsBack.findIndex((elModel: RsuvCheckModelGnpw) => elModel.id === model.id);\r\n    if (index !== -1) {\r\n      modelsBack.splice(index, 1);\r\n      return new RsuvResultBoolPknz(true);\r\n    }\r\n    return new RsuvResultBoolPknz(false, '[[210712160441]]', 'not finded');\r\n  }\r\n\r\n  static deleteMulti(modelsBack: RsuvT1, models: RsuvCheckModelGnpw[]): RsuvResultBoolPknz[] {\r\n    const ret: RsuvResultBoolPknz[] = [];\r\n    models.forEach(model => {\r\n      const res = RsuvEcxm.delete(modelsBack, model);\r\n      if (!res.success) {\r\n        ret.push(res);\r\n      }\r\n    });\r\n    return ret;\r\n  }\r\n\r\n  static filter(models: RsuvT1, checked: boolean) {\r\n    return models.filter((elModel: RsuvCheckModelGnpw) => elModel.checked === checked);\r\n  }\r\n\r\n  static inverse(modelsBack: RsuvT1) {\r\n    modelsBack.forEach((elModel: RsuvCheckModelGnpw) => elModel.checked = !elModel.checked);\r\n  }\r\n\r\n  static selectAll(modelsBack: RsuvT1) {\r\n    modelsBack.forEach((elModel: RsuvCheckModelGnpw) => {\r\n      if (!elModel.checked) {\r\n        elModel.checked = true;\r\n      }\r\n    })\r\n  }\r\n\r\n  static deselectAll(modelsBack: RsuvT1) {\r\n    modelsBack.forEach((elModel: RsuvCheckModelGnpw) => {\r\n      if (elModel.checked) {\r\n        elModel.checked = false;\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Представление [gnpw]\r\n */\r\nexport class RsuvCheckModelGnpw implements RsuvBnuwNT {\r\n\r\n  constructor(public id: string = '', public checked: boolean = false) {\r\n  }\r\n\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    const res = bnuwUtilsVerifyMulti([new RsuvTxStringAB(this.id), new RsuvTxBoolean(this.checked)])\r\n    if (res.length > 0) {\r\n      return res[0]\r\n    }\r\n    return new RsuvResultBoolPknz(true)\r\n  }\r\n}\r\n","/**\r\n * -- success - TRUE означает успешный результат\r\n * -- codeNum - любое положительное число означает ошибку, -1 означает неопределённый результат, значение\r\n * меньшее -1 означает код успешного результата\r\n */\r\nexport class RsuvResultAsau11 {\r\n  success: boolean = false\r\n  codeNum: number = 0\r\n\r\n  constructor(codeNum = -1, success: boolean = false) {\r\n    this.success = success\r\n    this.codeNum = codeNum\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport { RsuvResultAsau11 } from './RsuvResultAsau11';\r\nimport { RsuvResultTibo } from './RsuvResultTibo';\r\n\r\n/**\r\n * Утилитные статические методы для работы с массивами\r\n */\r\nexport class RsuvTuArray {\r\n\r\n  /**\r\n   * Извлекает из массива (1) элементы с индекса (2) по индекс (3) (включая эти индексы), и возвращает их в виде нового\r\n   * массива.\r\n   * В случае проблем возвращает тип {@link RsuvResultAsau11}\r\n   * @param arr (1) -- например ['aa', 'ab', 'ac', 'ad']\r\n   * @param indexStart (2) -- например 1\r\n   * @param indexEnd (3) -- например 2\r\n   * @return например ['ab', 'ac']\r\n   */\r\n  static elemsDiap(arr: Array<any>, indexStart: number, indexEnd: number): RsuvResultTibo<any> {\r\n    if (!RsuvTuArray.fnArrValidIs(arr)) return new RsuvResultTibo<any>({success: false, errCode: '1'})\r\n    if (!RsuvTuArray.fnIndexValidIs(arr, indexStart)) return new RsuvResultTibo<any>({success: false, errCode: '2'})\r\n    if (!RsuvTuArray.fnIndexValidIs(arr, indexEnd)) return new RsuvResultTibo<any>({success: false, errCode: '3'})\r\n    if (indexEnd < indexStart) {\r\n      return new RsuvResultTibo<any>({success: false, errCode: '4'})\r\n    }\r\n    if (indexEnd === indexStart) {\r\n      return new RsuvResultTibo<any>({success: true, value: [arr[indexStart]], successCode: '100'})\r\n    }\r\n    return new RsuvResultTibo<any>({success: true, value: arr.slice(indexStart, indexEnd + 1), successCode: '101'})\r\n  }\r\n\r\n  /**\r\n   * Удаляет элемент по индексу (2)\r\n   * @param arrBack\r\n   * @param index\r\n   * @return RsuvResultAsau11\r\n   */\r\n  static elemDelete(arrBack: Array<any>, index: number): RsuvResultAsau11 {\r\n    if (!RsuvTuArray.fnArrValidIs(arrBack)) return new RsuvResultAsau11(1)\r\n    if (!RsuvTuArray.fnIndexValidIs(arrBack, index)) return new RsuvResultAsau11(2)\r\n    arrBack.splice(index, 1)\r\n    return new RsuvResultAsau11(0, true)\r\n  }\r\n\r\n  /**\r\n   * Добавляет элемент (3) по индексу (2), существующие элементы сдвигаются. Если нужно добавить в самый конец,\r\n   * указать индекс (2) равный длине массива (1)\r\n   * @param arrBack (1) -- массив, мутируется, например [1, 2, 3]\r\n   * @param index (2) -- например 1\r\n   * @param elem (3) -- например 's'\r\n   * @return RsuvResultAsau11 ..., (1) например [1, 's',  2, 3]\r\n   */\r\n  static elemAdd(arrBack: Array<any>, index: number, elem: any): RsuvResultAsau11 {\r\n    if (!RsuvTuArray.fnArrValidIs(arrBack)) return new RsuvResultAsau11(1)\r\n    if (!RsuvTuArray.fnIndexValidIsB(arrBack, index)) return new RsuvResultAsau11(2)\r\n    arrBack.splice(index, 0, elem)\r\n    return new RsuvResultAsau11(0, true)\r\n  }\r\n\r\n  /**\r\n   * В массиве (1) перемещает элемент с индекса (2) на индекс (3)\r\n   * @param arrBack {any[]} (1) -- массив, мутируется\r\n   * @param indexFrom {number} (2) --\r\n   * @param indexTo {number} (3) --\r\n   * @return RsuvResultAsau11\r\n   */\r\n  static elemMove(arrBack: Array<any>, indexFrom: number, indexTo: number): RsuvResultAsau11 {\r\n    if (!RsuvTuArray.fnArrValidIs(arrBack)) return new RsuvResultAsau11(1)\r\n    if (!RsuvTuArray.fnIndexValidIs(arrBack, indexFrom)) return new RsuvResultAsau11(2)\r\n    if (!RsuvTuArray.fnIndexValidIs(arrBack, indexTo)) return new RsuvResultAsau11(3)\r\n    if (indexFrom === indexTo) {\r\n      return new RsuvResultAsau11(0, true)\r\n    }\r\n    // ---\r\n    const el = arrBack.splice(indexFrom, 1)\r\n    arrBack.splice(indexTo, 0, el[0])\r\n    return new RsuvResultAsau11(0, true)\r\n  }\r\n\r\n  /**\r\n   * Меняет местами элементы (2) и (3)\r\n   * @param arrBack (1) -- массив, мутируется\r\n   * @param index1 (2) --\r\n   * @param index2 (3) --\r\n   * @return RsuvResultAsau11\r\n   */\r\n  static elemsSwap(arrBack: Array<any>, index1: number, index2: number): RsuvResultAsau11 {\r\n    if (!RsuvTuArray.fnArrValidIs(arrBack)) return new RsuvResultAsau11(1)\r\n    if (!RsuvTuArray.fnIndexValidIs(arrBack, index1)) return new RsuvResultAsau11(2)\r\n    if (!RsuvTuArray.fnIndexValidIs(arrBack, index2)) return new RsuvResultAsau11(3)\r\n    if (index1 === index2) {\r\n      return new RsuvResultAsau11(0, true)\r\n    }\r\n    // ---\r\n    const a = arrBack[index1]\r\n    arrBack[index1] = arrBack[index2]\r\n    arrBack[index2] = a\r\n    return new RsuvResultAsau11(0, true)\r\n  }\r\n\r\n  /**\r\n   * Заменяет значением (2), первый элемент (1) удовлетворяющий предикату (3).\r\n   * Неудачей считаются (среди прочего): пустой массив (1), если предикат (3) не функция\r\n   * @param arrBack (1) -- массив, мутируется\r\n   * @param value (2) -- новое значение\r\n   * @param predicate (3) -- вызывается для каждого элемента (1); аргументы - первый это сам элемент, второй это\r\n   * индекс этого элемента\r\n   */\r\n  static elemUpdate(arrBack: Array<any>, value: any, predicate: (elem: any, index: number) => boolean) {\r\n    if (!RsuvTuArray.fnArrValidIs(arrBack)) return new RsuvResultAsau11(1)\r\n    if (!_.isFunction(predicate)) {\r\n      return new RsuvResultAsau11(2)\r\n    }\r\n    if (arrBack.length < 1) {\r\n      return new RsuvResultAsau11(3)\r\n    }\r\n    const ix = arrBack.findIndex((el, index) => predicate(el, index))\r\n    if (ix === -1) {\r\n      return new RsuvResultAsau11(4)\r\n    }\r\n    arrBack[ix] = value;\r\n    return new RsuvResultAsau11(0, true)\r\n  }\r\n\r\n  /**\r\n   * Возвращает TRUE если массив (1) содержит ВСЕ элементы присутствующие в массиве (2), при условии выбрасывания\r\n   * из (2) всех повторяющихся элементов.\r\n   * Если (1) или (2) это пустые массивы, то возвращает FALSE.\r\n   * @param arr1\r\n   * @param arr2\r\n   */\r\n  static containsAll(arr1: any[], arr2: any[]): boolean {\r\n    if (arr1.length < 1 || arr2.length < 1) return false;\r\n    const arr3 = _.uniq(arr2)\r\n    return _.intersection(arr1, arr3).length === arr3.length\r\n  }\r\n\r\n  static fnIndexValidIs(arr: Array<any>, index: number) {\r\n    if (index < 0) {\r\n      return false\r\n    }\r\n    return index <= (arr.length - 1);\r\n  }\r\n\r\n  static fnIndexValidIsB(arr: Array<any>, index: number) {\r\n    if (index < 0) {\r\n      return false\r\n    }\r\n    return index <= (arr.length);\r\n  }\r\n\r\n  static fnArrValidIs(arr: Array<any>) {\r\n    return !!_.isArray(arr);\r\n  }\r\n}\r\n","/*\r\nПОНЯТИЯ:\r\n-- [[asau55]], pResults - массив представляющий результат работы Promise.allSettled()\r\n-- [[asau66]], pElem - отдельный элемент массива pResults\r\n */\r\n\r\n/**\r\n * [[asau56]]\r\n * Статусы Promise.allSettled()\r\n */\r\nexport enum EnStatusAsau56 {\r\n  REJECTED = 'rejected',\r\n  FULFILLED = 'fulfilled'\r\n}\r\n\r\nexport class RsuvAsau57 {\r\n  ix: number = -1\r\n  reason: any\r\n}\r\nexport class RsuvAsau67 {\r\n  ix: number = -1\r\n  value: any\r\n}\r\n\r\nexport class RsuvPElemAsau66 {\r\n  status: EnStatusAsau56 = EnStatusAsau56.REJECTED\r\n  reason?: string\r\n  value?: any\r\n}\r\n\r\n/**\r\n * Утилиты для работы с Promise.allSettled()\r\n */\r\nexport class RsuvTuPromiseAllSettled {\r\n\r\n  /**\r\n   * Извлекает reason-ы \"реджектнутых\" промисов\r\n   * @param pResults\r\n   */\r\n  static rejected(pResults: Array<RsuvPElemAsau66>): Array<RsuvAsau57> {\r\n    const ret: RsuvAsau57[] = []\r\n    pResults.forEach((el, ix) => {\r\n      if (el.status === EnStatusAsau56.REJECTED) {\r\n        ret.push({ix, reason: el.reason})\r\n      }\r\n    })\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * Извлекает value-ы успешных промисов\r\n   * @param pResults\r\n   */\r\n  static fulfilled(pResults: Array<RsuvPElemAsau66>): Array<RsuvAsau67> {\r\n    const ret: RsuvAsau67[] = []\r\n    pResults.forEach((el, ix) => {\r\n      if (el.status === EnStatusAsau56.FULFILLED) {\r\n        ret.push({ix, value: el.value})\r\n      }\r\n    })\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * Возвращает TRUE если все результаты в (1) являются успешными\r\n   * @param pResults\r\n   */\r\n  static isAllSuccess(pResults: Array<RsuvPElemAsau66>): boolean {\r\n    return pResults.every(el => el.status === EnStatusAsau56.FULFILLED)\r\n  }\r\n\r\n  /**\r\n   * Возвращает TRUE если *pElem (1) обладает статусом (2)\r\n   * @param pElem\r\n   * @param status\r\n   */\r\n  static pElemIs(pElem: RsuvPElemAsau66, status: EnStatusAsau56): boolean {\r\n    return pElem.status === status\r\n  }\r\n\r\n  /**\r\n   * Для каждого *pElem из (1) вызвает (2) если *pElem is fulfilled или (3) если *pElem is rejected, и результат (2)(3)\r\n   * добавляет в итоговый массив\r\n   * @param pResults (1) --\r\n   * @param cbFulfilled (2) --\r\n   * @param cbRejected (3) --\r\n   */\r\n  static handle<T, S>(\r\n    pResults: Array<RsuvPElemAsau66>, cbFulfilled: (value: any) => T, cbRejected: (reason?: string) => S\r\n  ): Array<T | S> {\r\n    return pResults.map(elPElem => {\r\n      if (this.pElemIs(elPElem, EnStatusAsau56.FULFILLED)) {\r\n        return cbFulfilled(elPElem.value)\r\n      } else {\r\n        return cbRejected(elPElem.reason)\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","/**\r\n * [[asau22]]\r\n * КЛЮЧЕВЫЕ СЛОВА: поиск, строка\r\n * СМ ТАКЖЕ: [asau24]\r\n */\r\nexport enum RsuvSearchMode {\r\n  /** строгое равенство */\r\n  EQUAL_STRICT = 'equal_strict_asau22',\r\n  /** содержит */\r\n  CONTAINS = 'contains_asau22',\r\n  /** начинается с */\r\n  START_WITH = 'start_with_asau22',\r\n  /** заканчивается на */\r\n  END_WITH = 'end_with_asau22',\r\n}\r\n","import toInteger from 'lodash/toInteger';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { substrCountB } from './RsuvTuString';\r\nimport { RsuvResultCountAndData } from './RsuvResultCountAndData';\r\nimport { RsuvResultTibo } from './RsuvResultTibo';\r\n\r\n/*\r\n-- [[ntxe]] - фильтр, например 'id=1&id=2' или 'json-server&author=typicode'.\r\n          Тут & работает как ИЛИ, т.е. для 'id=1&id=2' вернутся две записи (если они существуют с такими id)\r\n\r\n */\r\n\r\n/**\r\n * [[ktvg]]\r\n *\r\n * Утилита для запросав к json-server (https://github.com/typicode/json-server)\r\n */\r\nexport class RsuvTxJsonServer {\r\n\r\n  private readonly path: string;\r\n\r\n  /**\r\n   *\r\n   * @param basePath (1) -- expample 'http://localhost:21884/'\r\n   * @param collectionName (2) -- example 'products'\r\n   */\r\n  constructor(readonly basePath: string, readonly collectionName: string) {\r\n    this.path = `${this.basePath}${this.collectionName}`;\r\n  }\r\n\r\n  async elemsCountGetAll(): Promise<number> {\r\n    const resp = await fetch(`${this.path}?_limit=1`);\r\n    const countSt = resp.headers.get('x-total-count');\r\n    return toInteger(countSt);\r\n  }\r\n\r\n  async elemsGetAll() {\r\n    const resp = await fetch(this.path);\r\n    return resp.json();\r\n  }\r\n\r\n  /**\r\n   * см. также функцию elemsGetPage()\r\n   * @param offset (1) -- сколько элементов пропустить, с начала\r\n   * @param limit (2) -- сколько элементов взять после пропуска\r\n   */\r\n  async elemsGet(offset: number, limit: number) {\r\n    const resp = await fetch(`${this.path}?_start=${offset}&_limit=${limit}`);\r\n    return resp.json();\r\n  }\r\n\r\n  /**\r\n   * Другой вариант функции elemsGet()\r\n   * @param pageNum (1) -- номер страницы, 1+\r\n   * @param limit (2) -- количество элементов на странице\r\n   */\r\n  async elemsGetPage(pageNum: number, limit: number) {\r\n    const resp = await fetch(`${this.path}?_page=${pageNum}&_limit=${limit}`);\r\n    return resp.json();\r\n  }\r\n\r\n  /**\r\n   * Возвращает все записи удовлетворяющие [ntxe]-фильтру (1)\r\n   * @param filter (1) -- см. [ntxe]\r\n   */\r\n  async elemsGetByFilter(filter: string) {\r\n    const resp = await fetch(`${this.path}?${filter}`);\r\n    return resp.json();\r\n  }\r\n\r\n  /**\r\n   * Отбор записей у которых в поле (1) значение содержит подстроку (2) (без учета регистра символов).\r\n   * Из всех возможных результатов, отбрасываются первые (3) и из оставшихся берутся первые (4)\r\n   *\r\n   * @param fieldName (1) --\r\n   * @param substring (2) --\r\n   * @param offset (3) --\r\n   * @param limit (4) --\r\n   */\r\n  async elemsGetByFilterB(fieldName: string, substring: string, offset: number, limit: number) {\r\n    const elems = await this.elemsGetAll()\r\n    const elemsFiltered = elems.filter((elem: any) => {\r\n      return substrCountB(elem[fieldName], substring) > 0\r\n    })\r\n    return elemsFiltered.slice(offset, offset + limit)\r\n  }\r\n\r\n  /**\r\n   * Отличается от BA только тем что (3) это не offset а pageNumber\r\n   *\r\n   * Отбор записей у которых в поле (1) значение содержит подстроку (2) (без учета регистра символов).\r\n   * Из всех возможных результатов, берётся страница (3), (4) определяет число элементов на странице\r\n   *\r\n   * @param fieldName (1) --\r\n   * @param substring (2) --\r\n   * @param pageNumber (3) -- 1+\r\n   * @param limit (4) --\r\n   */\r\n  async elemsGetByFilterBB(fieldName: string, substring: string, pageNumber: number, limit: number) {\r\n    return await this.elemsGetByFilterB(fieldName, substring, (pageNumber - 1) * limit, limit)\r\n  }\r\n\r\n  /**\r\n   * Отличается от B тем что возвращает более развёрнутый ответ\r\n   *\r\n   * @param fieldName (1) --\r\n   * @param substring (2) --\r\n   * @param offset (3) --\r\n   * @param limit (4) --\r\n   * @return RsuvResultCountAndData где\r\n   * countAll - количество элементов удовлетворяющих фильтру (1)(2) без учета (3)(4),\r\n   * data - сами элементы удовлетворяющие (1)-(4),\r\n   * hasNext - TRUE если возвращены НЕ все данные удовлетворяющие фильтру (1)(2)\r\n   */\r\n  async elemsGetByFilterC<T>(fieldName: string, substring: string, offset: number, limit: number): Promise<RsuvResultCountAndData<T>> {\r\n    const elems = await this.elemsGetAll();\r\n    const elemsFiltered = elems.filter((elem: any) => {\r\n      return substrCountB(elem[fieldName], substring) > 0;\r\n    })\r\n    const elemsFilteredSliced = elemsFiltered.slice(offset, offset + limit);\r\n    return {\r\n      countAll: elemsFiltered.length,\r\n      data: elemsFilteredSliced,\r\n      hasNext: offset + limit < elemsFiltered.length\r\n    } as RsuvResultCountAndData<T>\r\n  }\r\n\r\n  /**\r\n   * Отличается от CA только параметром (3)\r\n   *\r\n   * @param fieldName (1) --\r\n   * @param substring (2) --\r\n   * @param pageNumber (3) -- 1+\r\n   * @param limit (4) --\r\n   */\r\n  async elemsGetByFilterCB<T>(fieldName: string, substring: string, pageNumber: number, limit: number): Promise<RsuvResultCountAndData<T>> {\r\n    return this.elemsGetByFilterC(fieldName, substring, (pageNumber - 1) * limit, limit);\r\n  }\r\n\r\n  /**\r\n   * Удаляет элемент с id {@param id}. Возвращает информацию о том было ли удаление успешным\r\n   */\r\n  async elemDelete(id: string | number): Promise<RsuvResultBoolPknz> {\r\n    const ret = await fetch(`${this.path}/${id}`, {\r\n      method: 'DELETE'\r\n    })\r\n    if (ret.status !== 200) {\r\n      return new RsuvResultBoolPknz(false, '210315153800', `err*: id not found; id [${id}]; ret.status [${ret.status}]`)\r\n    }\r\n    return new RsuvResultBoolPknz();\r\n  }\r\n\r\n  async elemsDelete(ids: string[] | number []): Promise<RsuvResultBoolPknz[]> {\r\n    const ret = [];\r\n    for (const id of ids) {\r\n      const res = await this.elemDelete(id);\r\n      ret.push(res);\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * Отличается от А тем что даёт больше информации об итогах удаления элементов\r\n   * @param ids\r\n   */\r\n  async elemsDeleteB(ids: Array<string | number>): Promise<RsuvRemoveResultAsau100> {\r\n    const idsSuccess0: Array<string | number> = []\r\n    const idsNotSuccess0: Array<string | number> = []\r\n    for (const id of ids) {\r\n      const res: RsuvResultBoolPknz = await this.elemDelete(id);\r\n      if (res.success) {\r\n        idsSuccess0.push(id)\r\n      } else {\r\n        idsNotSuccess0.push(id)\r\n      }\r\n    }\r\n    return {\r\n      /** TRUE если все элементы были удалены успешно */\r\n      isAllSuccess: idsSuccess0.length === ids.length,\r\n      /** ids успешно удалённых элементов */\r\n      idsSuccess: idsSuccess0,\r\n      /** ids неудалённых элементов */\r\n      idsNotSuccess: idsNotSuccess0\r\n    } as RsuvRemoveResultAsau100\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param filter (1) -- см. [ntxe]\r\n   */\r\n  async elemsDeleteByFilter(filter: string): Promise<RsuvResultBoolPknz[]> {\r\n    const elems = await this.elemsGetByFilter(filter)\r\n    return await this.elemsDelete(elems.map((el: any) => el.id))\r\n  }\r\n\r\n  async elemCreate(data: object): Promise<RsuvResultBoolPknz> {\r\n    const res = await fetch(`${this.path}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n    // ---\r\n    if (res.status === 201) {\r\n      return new RsuvResultBoolPknz()\r\n    }\r\n    return new RsuvResultBoolPknz(false, '210316120200', `err*: not created; status [${res.status}] url [${res.url}]`)\r\n  }\r\n\r\n  /**\r\n   * Отличается от А тем что возвращает также информацию об ID созданного элемента (в поле 'value' в виде строки)\r\n   * @param data (1) -- объект без поля 'id'\r\n   * @return\r\n   */\r\n  async elemCreateB(data: object): Promise<RsuvResultTibo<string>> {\r\n    const res = await fetch(`${this.path}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n    // ---\r\n    if (res.status === 201) {\r\n      const createdElem = await res.json()\r\n      return new RsuvResultTibo({success: true, value: createdElem.id + ''})\r\n    }\r\n    return new RsuvResultTibo({success: false, errCode: res.status + '', errMessage: res.url})\r\n  }\r\n\r\n  async elemUpdate(data: any): Promise<RsuvResultBoolPknz> {\r\n    const res = await fetch(`${this.path}/${data.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n    if (res.status === 200) {\r\n      return new RsuvResultBoolPknz()\r\n    }\r\n    return new RsuvResultBoolPknz(false, '210318111500', `err*: not updated; status [${res.status}] url [${res.url}]`)\r\n  }\r\n}\r\n\r\n/**\r\n * Представляет результат удаления элементов\r\n */\r\nexport type RsuvRemoveResultAsau100 = {\r\n  /** TRUE если все элементы были успешно удалены */\r\n  isAllSuccess: boolean,\r\n  /** id элементов которые были успешно удалены */\r\n  idsSuccess: Array<string | number>,\r\n  /** id элементов которые НЕ были успешно удалены */\r\n  idsNotSuccess: Array<string | number>\r\n}\r\n","import _ from 'lodash';\r\nimport { RsuvBnuwNT } from '.';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { bnuwUtilsThrowIf } from './RsuvBnuwUtils';\r\n\r\n/**\r\n * Представляет целое число, положительное, отрицательное, ноль, но не дробное, NaN, Infinity и т.п.\r\n */\r\nexport class RsuvTxNumInt implements RsuvBnuwNT {\r\n  constructor(public val: number) {\r\n    bnuwUtilsThrowIf(this)\r\n  }\r\n\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    try {\r\n      if (!this.val && this.val !== 0) {\r\n        return new RsuvResultBoolPknz(false, '[[1636272243]]', 'is falsy');\r\n      }\r\n      if (!_.isFinite(this.val)) {\r\n        return new RsuvResultBoolPknz(false, '[[1636272327]]', 'is not number');\r\n      }\r\n      if (!_.isSafeInteger(this.val)) {\r\n        return new RsuvResultBoolPknz(\r\n          false,\r\n          '[[1636272328]]',\r\n          'is not integer'\r\n        );\r\n      }\r\n    } catch (error) {\r\n      return new RsuvResultBoolPknz(\r\n        false,\r\n        '[[1636279573]]',\r\n        (error as Error).message\r\n      );\r\n    }\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { RsuvTxNumInt } from './RsuvTxNumInt';\r\n\r\n/**\r\n * Представляет целое число большее нуля или равное нулю\r\n */\r\nexport class RsuvTxNumIntAB extends RsuvTxNumInt {\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    try {\r\n      const res = super.bnuwIsValid();\r\n      if (!res.success) {\r\n        return res;\r\n      }\r\n      // ---\r\n      if (this.val < 0) {\r\n        return new RsuvResultBoolPknz(false, '[[1636279844]]', 'number is < 0');\r\n      }\r\n    } catch (err) {\r\n      return new RsuvResultBoolPknz(\r\n        false,\r\n        '[[1636279706]]',\r\n        (err as Error).message\r\n      );\r\n    }\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { RsuvTxNumIntAB } from './RsuvTxNumIntAB';\r\n\r\n/**\r\n * Представляет целое число большее нуля\r\n */\r\nexport class RsuvTxNumIntABB extends RsuvTxNumIntAB {\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    try {\r\n      const res = super.bnuwIsValid();\r\n      if (!res.success) {\r\n        return res;\r\n      }\r\n      // ---\r\n      if (this.val === 0) {\r\n        return new RsuvResultBoolPknz(\r\n          false,\r\n          '[[1636280020]]',\r\n          'number is === 0'\r\n        );\r\n      }\r\n    } catch (err) {\r\n      return new RsuvResultBoolPknz(\r\n        false,\r\n        '[[1636280025]]',\r\n        (err as Error).message\r\n      );\r\n    }\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { RsuvTxNumInt } from './RsuvTxNumInt';\r\n\r\n/**\r\n * Представляет целое число большее нуля, или равное нулю или равное -1\r\n */\r\nexport class RsuvTxNumIntAC extends RsuvTxNumInt {\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    try {\r\n      const res = super.bnuwIsValid();\r\n      if (!res.success) {\r\n        return res;\r\n      }\r\n      // ---\r\n      if (this.val < -1) {\r\n        return new RsuvResultBoolPknz(\r\n          false,\r\n          '[[1636280874]]',\r\n          'number is < -1'\r\n        );\r\n      }\r\n    } catch (err) {\r\n      return new RsuvResultBoolPknz(\r\n        false,\r\n        '[[1636280879]]',\r\n        (err as Error).message\r\n      );\r\n    }\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n}\r\n","import { RsuvBnuwNT } from './RsuvBnuwNT';\r\nimport { RsuvTxNumIntAB } from './RsuvTxNumIntAB';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { bnuwUtilsThrowIf } from './RsuvBnuwUtils';\r\n\r\n/**\r\n Представление диапазона целых положительных чисел (>= 0), второе число >= первого\r\n */\r\nexport class RsuvTxNumIntDiap implements RsuvBnuwNT {\r\n  constructor(public indexStart: RsuvTxNumIntAB, public indexEnd: RsuvTxNumIntAB) {\r\n    bnuwUtilsThrowIf(this)\r\n  }\r\n\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    const ixStart = this.indexStart.val\r\n    const ixEnd = this.indexEnd.val\r\n    // ---\r\n    if (ixStart <= ixEnd) {\r\n      return new RsuvResultBoolPknz()\r\n    }\r\n    return new RsuvResultBoolPknz(false, '[[220107123149]]', `end index must be greater than start index; ixStart ${ixStart}, ixEnd ${ixEnd}`)\r\n  }\r\n}\r\n","import { RsuvTxStringACB } from \"./RsuvTxStringACB\";\r\n\r\n/**\r\n * Представляет типовой \"ключ\", \"имя поля\", \"имя столбца таблицы БД\" и т.п.,\r\n * т.е. это строка состоящая только из символов [a-zA-Z0-9_] и начинающаяся\r\n * не с цифры\r\n *\r\n * ID [[1636807194]]\r\n *\r\n * @implements RsuvBnuwNT\r\n * @extends RsuvTxStringACB\r\n * @extends RsuvTxStringAB\r\n * @extends RsuvTxString\r\n */\r\nexport class RsuvTxFieldName extends RsuvTxStringACB {\r\n}\r\n","import { RsuvBnuwNT } from './RsuvBnuwNT';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { bnuwUtilsThrowIf } from './RsuvBnuwUtils';\r\n\r\n/**\r\n * Представление для имени поля объекта, как единичного, так и составного через точку '.' (в lodash стиле).\r\n * Примеры: 'name', 'user.profile', 'users.0.name'\r\n */\r\nexport class RsuvTxFieldNameLodash implements RsuvBnuwNT {\r\n  constructor(public val: string) {\r\n    bnuwUtilsThrowIf(this)\r\n  }\r\n\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    if (this.val) {\r\n      return new RsuvResultBoolPknz()\r\n    }\r\n    return new RsuvResultBoolPknz(false, '[[220509121136]]')\r\n  }\r\n\r\n}\r\n","import { RsuvBnuwNT } from '.';\r\nimport { RsuvEnCaseSensitive } from './RsuvEnCaseSensitive';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\nimport { RsuvSearchMode } from './RsuvSearchMode';\r\n\r\n/**\r\n * ID: [[asau23]]\r\n * Сущность для указания как искать.\r\n * КЛЮЧЕВЫЕ СЛОВА: поиск\r\n */\r\nexport class RsuvSearchHow implements RsuvBnuwNT {\r\n  constructor(\r\n    public searchMode: RsuvSearchMode = RsuvSearchMode.CONTAINS,\r\n    /** учитывать ли регистр символов при поиске */\r\n    public isCaseSensitive: RsuvEnCaseSensitive\r\n  ) {}\r\n\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    return new RsuvResultBoolPknz(true);\r\n  }\r\n}\r\n","/**\r\n* ID [[asau26]]\r\n*/\r\nexport enum RsuvEnCaseSensitive {\r\n  CASE_SENSITIVE_TRUE = 'case_sensitive_true_asau26',\r\n  CASE_SENSITIVE_FALSE = 'case_sensitive_false_asau26',\r\n}","/**\r\n * ID [[asau27]]\r\n * Обозначения основных типов данных, например использующихся в базах данных\r\n */\r\nexport enum RsuvEnDataTypes {\r\n  /**\r\n   * строка\r\n   */\r\n  TEXT = 'text_asau27',\r\n  /**\r\n   * целое число, положительное или отрицательное, в том числе ноль\r\n   */\r\n  INT = 'int_asau27',\r\n  /**\r\n   * число дробное, с плавающей запятой\r\n   */\r\n  FLOAT = 'real_asau27'\r\n}\r\n","/**\r\n * Представление направления сортировки\r\n */\r\nexport enum RsuvEnSort {\r\n  /** по возрастанию */\r\n  ASC = 'asc',\r\n  /** по убыванию */\r\n  DESC = 'desc',\r\n  /** не определено */\r\n  UNDEF = 'undef'\r\n}\r\n","/**\r\n * Представление результата set operation ([asau45]) или upsert opertaion ([asau46])\r\n *\r\n * ID [[220108131133]] rev 1 1.0.0 2022-01-08\r\n */\r\nexport enum RsuvEnResultCrudSet {\r\n  /**\r\n   * Была создана новая запись\r\n   */\r\n  CREATED = 'created',\r\n  /**\r\n   * Была обновлена существующая запись\r\n   */\r\n  UPDATED = 'updated',\r\n  /**\r\n   * Возникли проблемы. Новая запись создана не была, текущая обновлена не была\r\n   */\r\n  ERROR = 'error'\r\n}\r\n","/*\r\nУтилиты для получения информации об объектах.\r\n\r\nСтатус: в разработке\r\n */\r\n\r\n\r\nexport enum TypeAsau42 {\r\n  KFRX = 'kfrx'\r\n}\r\n\r\nexport function info(entry: any) {\r\n  const is = []\r\n  if (entry) {\r\n    const con = entry.constructor\r\n    if (con) {\r\n      if (con.name === 'Function') {\r\n        is.push(TypeAsau42.KFRX)\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {\r\n  RsuvBnuwNT,\r\n  RsuvEnDataTypes,\r\n  RsuvSearchHow,\r\n  RsuvTxFieldName,\r\n  RsuvTxString,\r\n} from '.';\r\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\r\n\r\n/**\r\n * ID [[1636803407]]\r\n *\r\n * Представление единичного элемента поиска \"ключ/значение\"\r\n *\r\n * @param fieldName (1) -- имя поля (ключ) в котором нужно искать значение (3)\r\n * @param searchHow (2) -- указания как искать совпадение\r\n * @param value: (3) -- значение. Вне зависимости какой это тип значения (4), тут должна быть строка\r\n * @param valueType (4) -- тип значения (3)\r\n */\r\nexport class RsuvSearchElem implements RsuvBnuwNT {\r\n  constructor(\r\n    public fieldName: RsuvTxFieldName,\r\n    public searchHow: RsuvSearchHow,\r\n    public value: RsuvTxString,\r\n    public valueType: RsuvEnDataTypes = RsuvEnDataTypes.TEXT\r\n  ) {}\r\n\r\n  bnuwIsValid(): RsuvResultBoolPknz {\r\n    // TODO\r\n    return new RsuvResultBoolPknz()\r\n  }\r\n}\r\n","/*\r\nконстанты разные\r\n */\r\n\r\n/**\r\n * Когда что-то уже существует\r\n */\r\nexport const RSUV_AL_ALREADY_EXIST = 'RSUV_AL_ALREADY_EXIST';\r\n","import { RsuvSearchElem } from \"./RsuvSearchElem\";\r\n\r\n/**\r\n * Представление нескольких RsuvSearchElem-ID[1636803407] (пар ключ/значение).\r\n * \r\n * Значения интерпретируются по правилу \"И\". Например, если элемента два, то поиск считается\r\n * успешным если успешен поиск [(для элемента 1) \"И\" (для элемента 2)]\r\n * \r\n * ID [[1636805160]]\r\n */\r\nexport class RsuvSearchElems {\r\n\r\n  /**\r\n   * @param elems (1) --элементы\r\n   */\r\n  constructor(public elems: RsuvSearchElem[]) {}\r\n}\r\n","export const testData = [\r\n  {id: 1, val: '', desc: 'пустая строка', res: true},\r\n  {\r\n    id: 2, val: ' ',\r\n    desc: 'строка только из пробелов',\r\n    res: true\r\n  },\r\n  {id: 3, val: 'text', desc: 'строка без пробелов', res: true},\r\n  {id: 4, val: 'text text', desc: 'строка с пробелами только внутри', res: true},\r\n  {id: 5, val: ' text', desc: 'строка с пробелом в начале', res: true},\r\n  {id: 6, val: 'text ', desc: 'строка с пробелом в конце', res: true},\r\n  {id: 7, val: ' text ', desc: 'строка с пробелом в начале и конце', res: true},\r\n  {\r\n    id: 8, val: `text1\r\n  text2`, desc: 'строка переносом внутри', res: true\r\n  },\r\n  {id: 9, val: '100', desc: 'строка целое число', res: true},\r\n  {id: 10, val: null, desc: 'null', res: true},\r\n  {id: 11, val: undefined, desc: 'undefined', res: true},\r\n  {id: 12, val: NaN, desc: 'NaN', res: true},\r\n  {id: 13, val: Infinity, desc: 'Infinity', res: true},\r\n  {id: 14, val: 0, desc: 'ноль', res: true},\r\n  {id: 15, val: +0, desc: '+0', res: true},\r\n  {id: 16, val: -0, desc: '-0', res: true},\r\n  {id: 17, val: 100, desc: 'число 100', res: true},\r\n  {id: 18, val: 100.06, desc: 'число 100.06', res: true},\r\n  {id: 19, val: [], desc: 'пустой массив', res: true},\r\n  {id: 20, val: [{a: 1}], desc: 'непустой массив', res: true},\r\n  {id: 21, val: {}, desc: 'пустой объект', res: true},\r\n  {id: 22, val: {a: 1}, desc: 'непустой объект', res: true},\r\n  {\r\n    id: 23, val: () => {\r\n    }, desc: 'стрелочная функция', res: true\r\n  },\r\n  {\r\n    id: 24, val: `\r\n  text`, desc: 'строка с переносом в начале', res: true\r\n  },\r\n  {\r\n    id: 25, val: `text\r\n  `, desc: 'строка с переносом в конце', res: true\r\n  },\r\n  {\r\n    id: 26, val: `\r\n    text\r\n  `, desc: 'строка с переносом в начале, середине и конце', res: true\r\n  },\r\n  {\r\n    id: 27, val: `\r\n    `, desc: 'строка из одних переносов', res: true\r\n  },\r\n]\r\n\r\nexport const RSUV_NO_TAGS_SPC_VALUE = '<no tags>'\r\n","/**\r\n * Представляет элемент который может быть чекнут (например элемент выпадающего списка)\r\n */\r\nexport class RsuvTxChecked {\r\n  constructor(\r\n    public id: string,\r\n    public visibleText: string,\r\n    public checked: boolean = false,\r\n    public disabled: boolean = false,\r\n    public payload?: any\r\n  ) {\r\n\r\n  }\r\n}\r\n","import { RsuvTxStringAC } from './RsuvTxStringAC';\r\nimport { RsuvEnSort } from './RsuvEnSort';\r\n\r\n\r\n/**\r\n * Представление сортировки чего-либо абстрактного, обозначенного идентификатором\r\n */\r\nexport class RsuvTxSort {\r\n\r\n  /**\r\n   *\r\n   * @param id (1) -- условный идентификатор\r\n   * @param sortDirect (2) -- направление сортировки\r\n   * @throws Error если идентификатор (1) невалиден\r\n   */\r\n  constructor(public id: RsuvTxStringAC, public sortDirect: RsuvEnSort) {\r\n    // --- id verify\r\n    const validRes = id.bnuwIsValid();\r\n    if (!validRes.success) {\r\n      throw new Error(validRes.errCode + ' : ' + validRes.errMessage)\r\n    }\r\n    // ---\r\n  }\r\n\r\n}\r\n","export class RsuvValueAnd {\r\n  /**\r\n   * МОТИВАЦИЯ: допустим мы хотим получить значение ячейки столбца, но такого столбца не существует; в этом случае\r\n   * возврат просто falsy значения (undefined и т.п.) не позволяет понять, это значение ячейки undefined или же это\r\n   * означает что ячейки не существует.\r\n   *\r\n   * @param value\r\n   * @param isValueExist (2) -- если здесь FALSE то это означает что значение поля {@link value} не следует брать во\r\n   * внимание т.к. на самом деле значения получить не удалось (например сущности из которой предполагается взять\r\n   * значение просто не существует)\r\n   */\r\n  constructor(readonly value: string, readonly isValueExist: boolean = true) {\r\n  }\r\n}\r\n"],"names":["RsuvErr","code","message","asString","this","asStringB","oj","RsuvPaginationGyth","elemsCount","elemsPerPageCount","pagesFloat","pages","Math","trunc","dev","pageCount","indexesByPageNum","pageNum","indexLast","indexStart","elemsByPageNum","elems","slice","RsuvResultBoolPknz","success","errCode","errMessage","infoMulti","ret","notSuccess","forEach","el","push","successAllIsSugar","info","length","RsuvResultTibo","tibo","successCode","value","fromPknz","pknz","bnuwUtilsThrowIf","obj","validRes","bnuwIsValid","RsuvTxString","val","_","isString","err","RSUV_T3","RSUV_T6_CASE","RsuvTxStringAB","res","test","RsuvTxStringAC","RsuvTxStringACB","RsuvTxStringACC","isEmptyOrWhitespaces","str","substrCountB","target","substr","toLowerCase","split","substrIndexes","ignoreCase","substrEscape","escapeRegExp","rg","RegExp","exec","RsuvT7","index","DATETIME","RsuvT4","RsuvT5","startIndex","endIndex","strTarget","strSub","verif","strTargetRaw","strSubRaw","t5","t4NoSens","rsuvT3","COMPLETE_MATCH","STARTED","ENDED","CONTAINS","containsCount","containsIndexes","indexes","substring","t4Sens","indexes2","sensitive","notSensitive","t4","RsuvTxStringAD","RsuvTxStringADB","ResultAsau36","yataIs","yata","isFinite","eavvIs","eavv","rvuoIs","rvuo","ex","month","Number","day","hour","minute","dayjs","toDate","getTime","RsuvAsau90","RsuvAsau92","format","necz","toInteger","yataExpire","RsuvTxEmail","EmailValidator","validate","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","key","defineProperty","enumerable","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","doneResult","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","RsuvZrnxSubData","page","elemsAllCount","elemsOfPage","RsuvAdapterZrnx","perPage","dataSource","make","last","elemsAllCountGet","rmPagination","elemsGet","dataGet","RsuvTxBoolean","isBoolean","RsuvEcxm","find","models","id","model","append","modelsBack","appendMulti","update","elem","checked","updateMulti","findIndex","elModel","splice","deleteMulti","filter","inverse","selectAll","deselectAll","RsuvCheckModelGnpw","Array","isArray","bnuwUtilsVerifyMulti","RsuvResultAsau11","codeNum","RsuvTuArray","elemsDiap","arr","indexEnd","fnArrValidIs","fnIndexValidIs","elemDelete","arrBack","elemAdd","fnIndexValidIsB","elemMove","indexFrom","indexTo","elemsSwap","index1","index2","a","elemUpdate","predicate","isFunction","ix","containsAll","arr1","arr2","arr3","uniq","intersection","EnStatusAsau56","RsuvTuTree","fieldValueName","fieldChildsName","recurs","childs","accum","fieldNameValues","fieldNameId","isUniqueIds","acc","Map","map","elObj","get","elVal","elVal0","id0","String","has","arr0","includes","set","fnToAcc","ids","SUCCESS_CODE_1","SUCCESS_CODE_2","uniqValuesIs","fieldName","errInit","mp","isSomeFieldNotExist","rr","count","ERR_CODE_1","findDeepBy","isEvery","isFinded","isFirst","JSON","stringify","key0","value0","findDeepByB","parent","RsuvSearchMode","RsuvTuPromiseAllSettled","rejected","pResults","status","REJECTED","reason","fulfilled","FULFILLED","isAllSuccess","every","pElemIs","pElem","cbFulfilled","cbRejected","elPElem","_this","RsuvTxJsonServer","basePath","collectionName","path","elemsCountGetAll","fetch","countSt","headers","elemsGetAll","json","offset","limit","elemsGetPage","elemsGetByFilter","elemsGetByFilterB","elemsFiltered","elemsGetByFilterBB","pageNumber","elemsGetByFilterC","elemsFilteredSliced","countAll","data","hasNext","elemsGetByFilterCB","elemsDelete","elemsDeleteB","idsSuccess0","idsNotSuccess0","idsSuccess","idsNotSuccess","elemsDeleteByFilter","elemCreate","body","url","elemCreateB","RsuvTxNumInt","isSafeInteger","RsuvTxNumIntAB","RsuvTxNumIntABB","RsuvTxNumIntAC","RsuvTxNumIntDiap","ixStart","ixEnd","RsuvTxFieldName","RsuvTxFieldNameLodash","RsuvEnCaseSensitive","RsuvEnDataTypes","RsuvEnSort","RsuvEnResultCrudSet","TypeAsau42","RsuvSearchHow","searchMode","isCaseSensitive","RsuvSearchElem","searchHow","valueType","TEXT","desc","NaN","Infinity","visibleText","disabled","payload","sortDirect","isValueExist"],"mappings":"4PAGaA,wBACUC,EAA4BC,YAA5BD,IAAAA,EAAe,aAAaC,IAAAA,EAAkB,cAA9CD,eAA4BC,qBAGjDC,SAAA,0BACkBC,KAAKH,mBAAkBG,KAAKF,eAGvCG,UAAP,SAAiBC,kBACCA,EAAGL,mBAAkBK,EAAGJ,kBCP/BK,wBAaUC,EAAkCC,eAAlCD,IAAAA,EAAqB,aAAaC,IAAAA,EAA4B,oBAA9DD,yBAAkCC,iBARnB,EAU9BD,GAAcC,EAAmB,KAC7BC,EAAaF,EAAaC,EAC1BE,EAAQC,KAAKC,MAAMH,GACnBI,EAAMJ,EAAaC,EACb,IAARG,OACGC,UAAYJ,EACRG,EAAM,SACVC,UAAYJ,EAAQ,+BAU/BK,iBAAA,SAAiBC,OAGTC,GAFWD,EAAUb,KAAKW,UAAYX,KAAKW,UAAYE,GAEhCb,KAAKK,kBAAoB,QAE/C,CAACU,WADWD,EAAYd,KAAKK,kBAAoB,EACpCS,UAAAA,MAGtBE,eAAA,SAAeC,EAAcJ,SACKb,KAAKY,iBAAiBC,UAC/CI,EAAMC,QADNH,aAAYD,UACwB,SCvClCK,wBAEUC,EAAkCC,EAA+BC,YAAjEF,IAAAA,GAAmB,YAAeC,IAAAA,EAAkB,aAAaC,IAAAA,EAAqB,iBAAtFF,eAAkCC,kBAA+BC,WAO/EC,UAAP,SAAiBN,OACTO,EAAM,CAACJ,QAAS,GAAIK,WAAY,WACtCR,EAAMS,SAAQ,SAACC,GACTA,EAAGP,QACLI,EAAIJ,QAAQQ,KAAKD,GAEjBH,EAAIC,WAAWG,KAAKD,MAGjBH,KAQFK,kBAAP,SAAyBZ,OACjBa,EAAeX,EAAmBI,UAAUN,UACZ,IAA3Ba,EAAKL,WAAWM,QAAgBD,EAAKV,QAAQW,OAAS,EAExD,IAAIZ,GAAmB,GAE5BW,EAAKL,WAAWM,OAAS,EACpBD,EAAKL,WAAW,GAElB,IAAIN,GAAmB,EAAO,mBAAoB,UCpChDa,wBAOCC,iBANO,EAObA,SACGb,QAAUa,EAAKb,aACfc,YAAcD,EAAKC,iBACnBC,MAAQF,EAAKE,WACbd,QAAUY,EAAKZ,aACfC,WAAaW,EAAKX,qBAQpBc,SAAP,SAAgBC,UAEL,IAAIL,EADTK,EACwB,CACxBjB,QAASiB,EAAKjB,QACdC,QAASgB,EAAKhB,QACdC,WAAYe,EAAKf,YAGK,CACxBF,SAAS,EACTC,QAAS,mBACTC,WAAY,oBCpBFgB,EAAiBC,OACzBC,EAAWD,EAAIE,kBAChBD,EAASpB,cACNoB,EAQH,IClBME,wBACQC,YAAAA,EACjBL,EAAiBtC,yBAGnByC,YAAA,mBAESzC,KAAK2C,WACD,IAAIxB,GAAmB,EAAO,mBAAoB,gBAEtDyB,EAAEC,SAAS7C,KAAK2C,YACZ,IAAIxB,GACT,EACA,mBACA,oBAGAnB,KAAK2C,IAAIZ,OAAS,SACb,IAAIZ,GAAmB,EAAO,mBAAoB,cAE3D,MAAO2B,UACA,IAAI3B,GACT,EACA,mBACC2B,EAAchD,gBAGZ,IAAIqB,GAAmB,6xCC2NtB4B,EAcAC,EC1QCC,0FACXR,YAAA,mBAEUS,cAAYT,2BACbS,EAAI9B,eACA8B,KAGL,KAAKC,KAAKnD,KAAK2C,YACV,IAAIxB,GACT,EACA,mBACA,0BAGJ,MAAO2B,UACA,IAAI3B,GACT,EACA,mBACC2B,EAAchD,gBAGZ,IAAIqB,GAAmB,OAtBEuB,GCGvBU,0FACXX,YAAA,mBAEUS,cAAYT,2BACbS,EAAI9B,eACA8B,MAGJ,kBAAkBC,KAAKnD,KAAK2C,YACxB,IAAIxB,GACT,EACA,iBACA,uCAGJ,MAAO2B,UACA,IAAI3B,GACT,EACA,iBACC2B,EAAchD,gBAGZ,IAAIqB,GAAmB,OAtBEuB,GCCvBW,0FACXZ,YAAA,mBAEUS,cAAYT,2BACbS,EAAI9B,eACA8B,KAGL,UAAUC,KAAKnD,KAAK2C,IAAI,WACnB,IAAIxB,GACT,EACA,iBACA,iCAGJ,MAAO2B,UACA,IAAI3B,GACT,EACA,iBACC2B,EAAchD,gBAGZ,IAAIqB,GAAmB,OAtBGiC,GCDxBE,0FACXb,YAAA,mBAEUS,cAAYT,2BACbS,EAAI9B,eACA8B,MAGJ,WAAWC,KAAKnD,KAAK2C,YACjB,IAAIxB,GACT,EACA,mBACA,0BAGJ,MAAO2B,UACA,IAAI3B,GACT,EACA,mBACC2B,EAAchD,gBAGZ,IAAIqB,GAAmB,OAtBGiC,YJKrBG,EAAqBC,UAC1BA,GAAsB,IAAfA,EAAIzB,QAAgB,QAAQoB,KAAKK,YAmCnCC,EAAaC,EAAgBC,MACvCD,GAAUC,EAAQ,KACdnC,EAAMkC,EAAOE,cAAcC,MAAMF,EAAOC,eAAe7B,OAAS,SAC/DP,GAAO,EAAIA,EAAM,SAEnB,EAYT,SAAgBsC,EAAcJ,EAAgBC,EAAgBI,OACtDvC,EAAgB,OACjBkC,IAAWC,IACVf,EAAEC,SAASa,KAAYd,EAAEC,SAASc,IACnCD,EAAO3B,OAAS,GAAK4B,EAAO5B,OAAS,GACrC2B,EAAO3B,OAAS4B,EAAO5B,cACnBP,UAEHwC,EAAepB,EAAEqB,aAAaN,GAC9BO,EAAK,IAAIC,OAAOH,EAAc,KAAOD,EAAa,IAAM,KAC1Db,GAAW,EACRA,IACLA,EAAMgB,EAAGE,KAAKV,KAEZlC,EAAII,KAAK,IAAIyC,EAAOnB,EAAIoB,MAAOpB,EAAIoB,MAAQX,EAAO5B,gBAG/CP,GA8KT,SAAYuB,GAEVA,4BAEAA,wBAEAA,8BAEAA,0CARF,CAAYA,IAAAA,OAcZ,SAAYC,GACVA,qCACAA,6CAFF,CAAYA,IAAAA,WKpQAuB,ELyQCC,EAAb,8BAE0B,uBACI,eACR,IAGTC,EAAb,0BAEsB,IAAID,oBAED,IAAIA,GAGhBH,EACX,SAAmBK,EAA+BC,YAA/BD,IAAAA,EAAqB,YAAUC,IAAAA,EAAmB,mBAAlDD,gBAA+BC,iEAvQxBjB,EAAgBC,MACtCD,GAAUC,EAAQ,KACdnC,EAAMkC,EAAOG,MAAMF,GAAQ5B,OAAS,SACnCP,GAAO,EAAIA,EAAM,SAEnB,2DA8DuBoD,EAAyBC,OAEjDC,EAA4B3D,EAAmBU,kBAAkB,CAAC+C,EAAUnC,cAAeoC,EAAOpC,oBACnGqC,EAAM1D,eACFY,EAAeI,SAAS0C,OAG3BC,EAAeH,EAAUjC,IACzBqC,EAAYH,EAAOlC,IAEnBsC,EAAK,IAAIR,KAEXO,EAAUjD,OAASgD,EAAahD,cAC3B,IAAIC,EAAe,CAACZ,SAAS,EAAMe,MAAO8C,QAG7CC,EAAW,IAAIV,KAEjBO,EAAahD,SAAWiD,EAAUjD,QAAUgD,EAAanB,gBAAkBoB,EAAUpB,cACvFsB,EAASC,OAAOvD,KAAKmB,EAAQqC,gBAC7BF,EAASC,OAAOvD,KAAKmB,EAAQsC,SAC7BH,EAASC,OAAOvD,KAAKmB,EAAQuC,OAC7BJ,EAASC,OAAOvD,KAAKmB,EAAQwC,UAC7BL,EAASM,cAAgB,EAEzBN,EAASO,gBAAgB7D,KAAK,IAAIyC,EAAO,EAAGW,EAAUjD,aACjD,KACC2D,EAAU5B,EAAciB,EAAcC,GAAW,GACvDE,EAASO,gBAAkBC,EAE3BR,EAASM,cAAgBE,EAAQ3D,OAC7BmD,EAASM,cAAgB,GAC3BN,EAASC,OAAOvD,KAAKmB,EAAQwC,UAG3BR,EAAaY,UAAU,EAAGX,EAAUjD,QAAQ6B,gBAAkBoB,EAAUpB,eAC1EsB,EAASC,OAAOvD,KAAKmB,EAAQsC,SAG3BN,EAAaY,UAAUZ,EAAahD,OAASiD,EAAUjD,OAAQgD,EAAahD,QAAQ6B,gBAAkBoB,EAAUpB,eAClHsB,EAASC,OAAOvD,KAAKmB,EAAQuC,WAI3BM,EAAS,IAAIpB,KACfO,EAAahD,SAAWiD,EAAUjD,QAAUgD,IAAiBC,EAC/DY,EAAOT,OAAOvD,KAAKmB,EAAQqC,gBAC3BQ,EAAOT,OAAOvD,KAAKmB,EAAQsC,SAC3BO,EAAOT,OAAOvD,KAAKmB,EAAQuC,OAC3BM,EAAOT,OAAOvD,KAAKmB,EAAQwC,UAC3BK,EAAOJ,cAAgB,EACvBI,EAAOH,gBAAgB7D,KAAK,IAAIyC,EAAO,EAAGW,EAAUjD,aAC/C,KACC8D,EAAW/B,EAAciB,EAAcC,GAAW,GACxDY,EAAOH,gBAAkBI,EACzBD,EAAOJ,cAAgBK,EAAS9D,OAC5B6D,EAAOJ,cAAgB,GACzBI,EAAOT,OAAOvD,KAAKmB,EAAQwC,UAGzBR,EAAaY,UAAU,EAAGX,EAAUjD,UAAYiD,GAClDY,EAAOT,OAAOvD,KAAKmB,EAAQsC,SAGzBN,EAAaY,UAAUZ,EAAahD,OAASiD,EAAUjD,OAAQgD,EAAahD,UAAYiD,GAC1FY,EAAOT,OAAOvD,KAAKmB,EAAQuC,cAI/BL,EAAGa,UAAYF,EACfX,EAAGc,aAAeb,EAEX,IAAIlD,EAAe,CAACZ,SAAS,EAAMe,MAAO8C,oBAcnD,SAA+BL,EAAyBC,EAAsBd,YAAAA,IAAAA,GAAsB,OAE5Fe,EAA4B3D,EAAmBU,kBAAkB,CAAC+C,EAAUnC,cAAeoC,EAAOpC,oBACnGqC,EAAM1D,eACFY,EAAeI,SAAS0C,OAG3BC,EAAeH,EAAUjC,IACzBqC,EAAYH,EAAOlC,IAErBqD,EAAK,IAAIxB,KACTQ,EAAUjD,OAASgD,EAAahD,cAC3B,IAAIC,EAAe,CAACZ,SAAS,EAAMe,MAAO6D,OAG/CjC,KAEEgB,EAAahD,SAAWiD,EAAUjD,QAAUgD,EAAanB,gBAAkBoB,EAAUpB,cACvFoC,EAAGb,OAAOvD,KAAKmB,EAAQqC,gBACvBY,EAAGb,OAAOvD,KAAKmB,EAAQsC,SACvBW,EAAGb,OAAOvD,KAAKmB,EAAQuC,OACvBU,EAAGb,OAAOvD,KAAKmB,EAAQwC,UACvBS,EAAGR,cAAgB,EAEnBQ,EAAGP,gBAAgB7D,KAAK,IAAIyC,EAAO,EAAGW,EAAUjD,aAC3C,KACC2D,EAAU5B,EAAciB,EAAcC,GAAW,GACvDgB,EAAGP,gBAAkBC,EAErBM,EAAGR,cAAgBE,EAAQ3D,OACvBiE,EAAGR,cAAgB,GACrBQ,EAAGb,OAAOvD,KAAKmB,EAAQwC,UAGrBR,EAAaY,UAAU,EAAGX,EAAUjD,QAAQ6B,gBAAkBoB,EAAUpB,eAC1EoC,EAAGb,OAAOvD,KAAKmB,EAAQsC,SAGrBN,EAAaY,UAAUZ,EAAahD,OAASiD,EAAUjD,OAAQgD,EAAahD,QAAQ6B,gBAAkBoB,EAAUpB,eAClHoC,EAAGb,OAAOvD,KAAKmB,EAAQuC,eAKvBP,EAAahD,SAAWiD,EAAUjD,QAAUgD,IAAiBC,EAC/DgB,EAAGb,OAAOvD,KAAKmB,EAAQqC,gBACvBY,EAAGb,OAAOvD,KAAKmB,EAAQsC,SACvBW,EAAGb,OAAOvD,KAAKmB,EAAQuC,OACvBU,EAAGb,OAAOvD,KAAKmB,EAAQwC,UACvBS,EAAGR,cAAgB,EACnBQ,EAAGP,gBAAgB7D,KAAK,IAAIyC,EAAO,EAAGW,EAAUjD,aAC3C,KACC8D,EAAW/B,EAAciB,EAAcC,GAAW,GACxDgB,EAAGP,gBAAkBI,EACrBG,EAAGR,cAAgBK,EAAS9D,OACxBiE,EAAGR,cAAgB,GACrBQ,EAAGb,OAAOvD,KAAKmB,EAAQwC,UAGrBR,EAAaY,UAAU,EAAGX,EAAUjD,UAAYiD,GAClDgB,EAAGb,OAAOvD,KAAKmB,EAAQsC,SAGrBN,EAAaY,UAAUZ,EAAahD,OAASiD,EAAUjD,OAAQgD,EAAahD,UAAYiD,GAC1FgB,EAAGb,OAAOvD,KAAKmB,EAAQuC,cAKtB,IAAItD,EAAe,CAACZ,SAAS,EAAMe,MAAO6D,sFMpPtCC,0FACXxD,YAAA,mBAEUS,cAAYT,2BACbS,EAAI9B,eACA8B,KAGLK,EAAqBvD,KAAK2C,YACrB,IAAIxB,GACT,EACA,mBACA,6BAGJ,MAAO2B,UACA,IAAI3B,GACT,EACA,mBACC2B,EAAchD,gBAGZ,IAAIqB,GAAmB,OAtBEuB,GCAvBwD,0FACXzD,YAAA,mBAEUS,cAAYT,2BACbS,EAAI9B,eACA8B,KAGL,MAAMC,KAAKnD,KAAK2C,YACX,IAAIxB,GACT,EACA,mBACA,8BAGA,MAAMgC,KAAKnD,KAAK2C,YACX,IAAIxB,GACT,EACA,mBACA,yBAGJ,MAAO2B,UACA,IAAI3B,GACT,EACA,yBACC2B,SAAAA,EAAehD,gBAGb,IAAIqB,GAAmB,OA7BG8E,IFKrC,SAAY1B,GACVA,cACAA,cACAA,cAHF,CAAYA,IAAAA,OAMZ,IAAa4B,EACX,SAAmB/E,EAAyBe,EAAiBtC,gBAA1CuB,aAAyBe,YAAiBtC,YAyC/CuG,EAAOC,WAChBzD,EAAE0D,SAASD,YAgCFE,EAAOC,WAChB5D,EAAE0D,SAASE,YAUFC,EAAOC,OAChB9D,EAAEC,SAAS6D,UACP,SAEHC,EAAK,4CAA4CvC,KAAKsC,MACxDC,EAAI,KACAC,EAAQC,OAAOF,EAAG,IAClBG,EAAMD,OAAOF,EAAG,IAChBI,EAAOF,OAAOF,EAAG,IACjBK,EAASH,OAAOF,EAAG,OACrBC,EAAQ,GAAKA,EAAQ,UAChB,QAELE,EAAM,GAAKA,EAAM,UACZ,QAELC,EAAO,GAAKA,EAAO,UACd,QAELC,EAAS,GAAKA,EAAS,UAClB,SAKLX,EADMY,EAAMP,GACDQ,SAASC,iBACrBvE,EAAE0D,SAASD,GAGTA,EAAO,GAFL,SGjHCe,IA6BAC,kFHNiBhB,UACtBD,EAAOC,GAGLY,EAAMZ,GAAMiB,OAAO,oBAFjB,4BAKkBZ,OACtB9D,EAAEC,SAAS6D,UACP,IAAIP,GAAqB,EAAO,EAAG,OAEtCoB,EAAOd,EAAOC,MAChBa,EAAM,KACFlB,EAAOzD,EAAE4E,UAAUD,UAClB,IAAIpB,GAAqB,EAAME,EAAM,UAEvC,IAAIF,GAAqB,EAAO,EAAG,mCAUfK,UACtBD,EAAOC,GAIL,IAAIL,GAAqB,EADZ,IAAPK,EAC+B,GAHnC,IAAIL,GAAqB,EAAO,EAAG,0BAWjBE,EAAoBoB,UAC1CrB,EAAOC,GAGPD,EAAOqB,GAIH,IAAItB,GAAsB,IAD/BE,EAAOoB,GACqC,GAHvC,IAAItB,GAAsB,GAAO,EAAO,GAHxC,IAAIA,GAAsB,GAAO,EAAO,uBI9EtCuB,0FACXjF,YAAA,kBACekF,EAAeC,SAAS5H,KAAK2C,KAuBnC,IAAIxB,GAAmB,GArBrB,IAAIA,GAAmB,EAAO,mBAAoB,sBAJ9B8B,kBCGjC,IAAI4E,EAAW,SAAUC,GAGvB,IAAIC,EAAKC,OAAOC,UACZC,EAASH,EAAGI,eAEZC,EAA4B,mBAAXC,OAAwBA,OAAS,GAClDC,EAAiBF,EAAQG,UAAY,aACrCC,EAAsBJ,EAAQK,eAAiB,kBAC/CC,EAAoBN,EAAQO,aAAe,gBAE/C,SAASC,EAAOrG,EAAKsG,EAAK1G,GAOxB,OANA6F,OAAOc,eAAevG,EAAKsG,EAAK,CAC9B1G,MAAOA,EACP4G,YAAY,EACZC,cAAc,EACdC,UAAU,IAEL1G,EAAIsG,GAEb,IAEED,EAAO,GAAI,IACX,MAAO9F,GACP8F,EAAS,SAASrG,EAAKsG,EAAK1G,GAC1B,OAAOI,EAAIsG,GAAO1G,GAItB,SAAS+G,EAAKC,EAASC,EAASC,EAAMC,GAEpC,IACIC,EAAYvB,OAAOwB,QADFJ,GAAWA,EAAQnB,qBAAqBwB,EAAYL,EAAUK,GACtCxB,WACzCyB,EAAU,IAAIC,EAAQL,GAAe,IAMzC,OAFAC,EAAUK,QAsMZ,SAA0BT,EAASE,EAAMK,GACvC,IAAIG,EA/KuB,iBAiL3B,OAAO,SAAgBC,EAAQC,GAC7B,GAhLoB,cAgLhBF,EACF,MAAM,IAAIG,MAAM,gCAGlB,GAnLoB,cAmLhBH,EAA6B,CAC/B,GAAe,UAAXC,EACF,MAAMC,EAKR,MAoQG,CAAE5H,WAzfP8H,EAyfyBC,MAAM,GA9P/B,IAHAR,EAAQI,OAASA,EACjBJ,EAAQK,IAAMA,IAED,CACX,IAAII,EAAWT,EAAQS,SACvB,GAAIA,EAAU,CACZ,IAAIC,EAAiBC,EAAoBF,EAAUT,GACnD,GAAIU,EAAgB,CAClB,GAAIA,IAAmBE,EAAkB,SACzC,OAAOF,GAIX,GAAuB,SAAnBV,EAAQI,OAGVJ,EAAQa,KAAOb,EAAQc,MAAQd,EAAQK,SAElC,GAAuB,UAAnBL,EAAQI,OAAoB,CACrC,GAnNqB,mBAmNjBD,EAEF,MADAA,EAjNc,YAkNRH,EAAQK,IAGhBL,EAAQe,kBAAkBf,EAAQK,SAEN,WAAnBL,EAAQI,QACjBJ,EAAQgB,OAAO,SAAUhB,EAAQK,KAGnCF,EA5NkB,YA8NlB,IAAIc,EAASC,EAASzB,EAASE,EAAMK,GACrC,GAAoB,WAAhBiB,EAAOE,KAAmB,CAO5B,GAJAhB,EAAQH,EAAQQ,KAjOA,YAFK,iBAuOjBS,EAAOZ,MAAQO,EACjB,SAGF,MAAO,CACLnI,MAAOwI,EAAOZ,IACdG,KAAMR,EAAQQ,MAGS,UAAhBS,EAAOE,OAChBhB,EA/OgB,YAkPhBH,EAAQI,OAAS,QACjBJ,EAAQK,IAAMY,EAAOZ,OA9QPe,CAAiB3B,EAASE,EAAMK,GAE7CH,EAcT,SAASqB,EAASG,EAAIxI,EAAKwH,GACzB,IACE,MAAO,CAAEc,KAAM,SAAUd,IAAKgB,EAAGC,KAAKzI,EAAKwH,IAC3C,MAAOjH,GACP,MAAO,CAAE+H,KAAM,QAASd,IAAKjH,IAhBjCgF,EAAQoB,KAAOA,EAoBf,IAOIoB,EAAmB,GAMvB,SAASb,KACT,SAASwB,KACT,SAASC,KAIT,IAAIC,EAAoB,GACxBA,EAAkB7C,GAAkB,WAClC,OAAOtI,MAGT,IAAIoL,EAAWpD,OAAOqD,eAClBC,EAA0BF,GAAYA,EAASA,EAASG,EAAO,MAC/DD,GACAA,IAA4BvD,GAC5BG,EAAO8C,KAAKM,EAAyBhD,KAGvC6C,EAAoBG,GAGtB,IAAIE,EAAKN,EAA2BjD,UAClCwB,EAAUxB,UAAYD,OAAOwB,OAAO2B,GAWtC,SAASM,EAAsBxD,GAC7B,CAAC,OAAQ,QAAS,UAAUvG,SAAQ,SAASoI,GAC3ClB,EAAOX,EAAW6B,GAAQ,SAASC,GACjC,OAAO/J,KAAK4J,QAAQE,EAAQC,SAkClC,SAAS2B,EAAcnC,EAAWoC,GAgChC,IAAIC,EAgCJ5L,KAAK4J,QA9BL,SAAiBE,EAAQC,GACvB,SAAS8B,IACP,OAAO,IAAIF,GAAY,SAASG,EAASC,IAnC7C,SAASC,EAAOlC,EAAQC,EAAK+B,EAASC,GACpC,IAAIpB,EAASC,EAASrB,EAAUO,GAASP,EAAWQ,GACpD,GAAoB,UAAhBY,EAAOE,KAEJ,CACL,IAAIoB,EAAStB,EAAOZ,IAChB5H,EAAQ8J,EAAO9J,MACnB,OAAIA,GACiB,iBAAVA,GACP+F,EAAO8C,KAAK7I,EAAO,WACdwJ,EAAYG,QAAQ3J,EAAM+J,SAASC,MAAK,SAAShK,GACtD6J,EAAO,OAAQ7J,EAAO2J,EAASC,MAC9B,SAASjJ,GACVkJ,EAAO,QAASlJ,EAAKgJ,EAASC,MAI3BJ,EAAYG,QAAQ3J,GAAOgK,MAAK,SAASC,GAI9CH,EAAO9J,MAAQiK,EACfN,EAAQG,MACP,SAASI,GAGV,OAAOL,EAAO,QAASK,EAAOP,EAASC,MAvBzCA,EAAOpB,EAAOZ,KAiCZiC,CAAOlC,EAAQC,EAAK+B,EAASC,MAIjC,OAAOH,EAaLA,EAAkBA,EAAgBO,KAChCN,EAGAA,GACEA,KAkHV,SAASxB,EAAoBF,EAAUT,GACrC,IAAII,EAASK,EAAS5B,SAASmB,EAAQI,QACvC,QA1TEG,IA0TEH,EAAsB,CAKxB,GAFAJ,EAAQS,SAAW,KAEI,UAAnBT,EAAQI,OAAoB,CAE9B,GAAIK,EAAS5B,SAAiB,SAG5BmB,EAAQI,OAAS,SACjBJ,EAAQK,SArUZE,EAsUII,EAAoBF,EAAUT,GAEP,UAAnBA,EAAQI,QAGV,OAAOQ,EAIXZ,EAAQI,OAAS,QACjBJ,EAAQK,IAAM,IAAIuC,UAChB,kDAGJ,OAAOhC,EAGT,IAAIK,EAASC,EAASd,EAAQK,EAAS5B,SAAUmB,EAAQK,KAEzD,GAAoB,UAAhBY,EAAOE,KAIT,OAHAnB,EAAQI,OAAS,QACjBJ,EAAQK,IAAMY,EAAOZ,IACrBL,EAAQS,SAAW,KACZG,EAGT,IAAIxI,EAAO6I,EAAOZ,IAElB,OAAMjI,EAOFA,EAAKoI,MAGPR,EAAQS,EAASoC,YAAczK,EAAKK,MAGpCuH,EAAQ8C,KAAOrC,EAASsC,QAQD,WAAnB/C,EAAQI,SACVJ,EAAQI,OAAS,OACjBJ,EAAQK,SAzXVE,GAmYFP,EAAQS,SAAW,KACZG,GANExI,GA3BP4H,EAAQI,OAAS,QACjBJ,EAAQK,IAAM,IAAIuC,UAAU,oCAC5B5C,EAAQS,SAAW,KACZG,GAoDX,SAASoC,EAAaC,GACpB,IAAIC,EAAQ,CAAEC,OAAQF,EAAK,IAEvB,KAAKA,IACPC,EAAME,SAAWH,EAAK,IAGpB,KAAKA,IACPC,EAAMG,WAAaJ,EAAK,GACxBC,EAAMI,SAAWL,EAAK,IAGxB3M,KAAKiN,WAAWrL,KAAKgL,GAGvB,SAASM,EAAcN,GACrB,IAAIjC,EAASiC,EAAMO,YAAc,GACjCxC,EAAOE,KAAO,gBACPF,EAAOZ,IACd6C,EAAMO,WAAaxC,EAGrB,SAAShB,EAAQL,GAIftJ,KAAKiN,WAAa,CAAC,CAAEJ,OAAQ,SAC7BvD,EAAY5H,QAAQgL,EAAc1M,MAClCA,KAAKoN,OAAM,GA8Bb,SAAS7B,EAAO8B,GACd,GAAIA,EAAU,CACZ,IAAIC,EAAiBD,EAAS/E,GAC9B,GAAIgF,EACF,OAAOA,EAAetC,KAAKqC,GAG7B,GAA6B,mBAAlBA,EAASb,KAClB,OAAOa,EAGT,IAAKE,MAAMF,EAAStL,QAAS,CAC3B,IAAIyL,GAAK,EAAGhB,EAAO,SAASA,IAC1B,OAASgB,EAAIH,EAAStL,QACpB,GAAImG,EAAO8C,KAAKqC,EAAUG,GAGxB,OAFAhB,EAAKrK,MAAQkL,EAASG,GACtBhB,EAAKtC,MAAO,EACLsC,EAOX,OAHAA,EAAKrK,WAzeT8H,EA0eIuC,EAAKtC,MAAO,EAELsC,GAGT,OAAOA,EAAKA,KAAOA,GAKvB,MAAO,CAAEA,KAAMiB,GAIjB,SAASA,IACP,MAAO,CAAEtL,WAzfP8H,EAyfyBC,MAAM,GA+MnC,OA5mBAe,EAAkBhD,UAAYuD,EAAGkC,YAAcxC,EAC/CA,EAA2BwC,YAAczC,EACzCA,EAAkB0C,YAAc/E,EAC9BsC,EACAxC,EACA,qBAaFZ,EAAQ8F,oBAAsB,SAASC,GACrC,IAAIC,EAAyB,mBAAXD,GAAyBA,EAAOH,YAClD,QAAOI,IACHA,IAAS7C,GAG2B,uBAAnC6C,EAAKH,aAAeG,EAAKC,QAIhCjG,EAAQkG,KAAO,SAASH,GAQtB,OAPI7F,OAAOiG,eACTjG,OAAOiG,eAAeJ,EAAQ3C,IAE9B2C,EAAOK,UAAYhD,EACnBtC,EAAOiF,EAAQnF,EAAmB,sBAEpCmF,EAAO5F,UAAYD,OAAOwB,OAAOgC,GAC1BqC,GAOT/F,EAAQqG,MAAQ,SAASpE,GACvB,MAAO,CAAEmC,QAASnC,IAsEpB0B,EAAsBC,EAAczD,WACpCyD,EAAczD,UAAUO,GAAuB,WAC7C,OAAOxI,MAET8H,EAAQ4D,cAAgBA,EAKxB5D,EAAQsG,MAAQ,SAASjF,EAASC,EAASC,EAAMC,EAAaqC,QACxC,IAAhBA,IAAwBA,EAAc0C,SAE1C,IAAIC,EAAO,IAAI5C,EACbxC,EAAKC,EAASC,EAASC,EAAMC,GAC7BqC,GAGF,OAAO7D,EAAQ8F,oBAAoBxE,GAC/BkF,EACAA,EAAK9B,OAAOL,MAAK,SAASF,GACxB,OAAOA,EAAO/B,KAAO+B,EAAO9J,MAAQmM,EAAK9B,WAuKjDf,EAAsBD,GAEtB5C,EAAO4C,EAAI9C,EAAmB,aAO9B8C,EAAGlD,GAAkB,WACnB,OAAOtI,MAGTwL,EAAG+C,SAAW,WACZ,MAAO,sBAkCTzG,EAAQ0G,KAAO,SAASC,GACtB,IAAID,EAAO,GACX,IAAK,IAAI3F,KAAO4F,EACdD,EAAK5M,KAAKiH,GAMZ,OAJA2F,EAAKE,UAIE,SAASlC,IACd,KAAOgC,EAAKzM,QAAQ,CAClB,IAAI8G,EAAM2F,EAAKG,MACf,GAAI9F,KAAO4F,EAGT,OAFAjC,EAAKrK,MAAQ0G,EACb2D,EAAKtC,MAAO,EACLsC,EAQX,OADAA,EAAKtC,MAAO,EACLsC,IAsCX1E,EAAQyD,OAASA,EAMjB5B,EAAQ1B,UAAY,CAClByF,YAAa/D,EAEbyD,MAAO,SAASwB,GAcd,GAbA5O,KAAK6O,KAAO,EACZ7O,KAAKwM,KAAO,EAGZxM,KAAKuK,KAAOvK,KAAKwK,WApgBjBP,EAqgBAjK,KAAKkK,MAAO,EACZlK,KAAKmK,SAAW,KAEhBnK,KAAK8J,OAAS,OACd9J,KAAK+J,SAzgBLE,EA2gBAjK,KAAKiN,WAAWvL,QAAQwL,IAEnB0B,EACH,IAAK,IAAIb,KAAQ/N,KAEQ,MAAnB+N,EAAKe,OAAO,IACZ5G,EAAO8C,KAAKhL,KAAM+N,KACjBR,OAAOQ,EAAK7M,MAAM,MACrBlB,KAAK+N,QAnhBX9D,IAyhBF8E,KAAM,WACJ/O,KAAKkK,MAAO,EAEZ,IACI8E,EADYhP,KAAKiN,WAAW,GACLE,WAC3B,GAAwB,UAApB6B,EAAWnE,KACb,MAAMmE,EAAWjF,IAGnB,OAAO/J,KAAKiP,MAGdxE,kBAAmB,SAASyE,GAC1B,GAAIlP,KAAKkK,KACP,MAAMgF,EAGR,IAAIxF,EAAU1J,KACd,SAASmP,EAAOC,EAAKC,GAYnB,OAXA1E,EAAOE,KAAO,QACdF,EAAOZ,IAAMmF,EACbxF,EAAQ8C,KAAO4C,EAEXC,IAGF3F,EAAQI,OAAS,OACjBJ,EAAQK,SApjBZE,KAujBYoF,EAGZ,IAAK,IAAI7B,EAAIxN,KAAKiN,WAAWlL,OAAS,EAAGyL,GAAK,IAAKA,EAAG,CACpD,IAAIZ,EAAQ5M,KAAKiN,WAAWO,GACxB7C,EAASiC,EAAMO,WAEnB,GAAqB,SAAjBP,EAAMC,OAIR,OAAOsC,EAAO,OAGhB,GAAIvC,EAAMC,QAAU7M,KAAK6O,KAAM,CAC7B,IAAIS,EAAWpH,EAAO8C,KAAK4B,EAAO,YAC9B2C,EAAarH,EAAO8C,KAAK4B,EAAO,cAEpC,GAAI0C,GAAYC,EAAY,CAC1B,GAAIvP,KAAK6O,KAAOjC,EAAME,SACpB,OAAOqC,EAAOvC,EAAME,UAAU,GACzB,GAAI9M,KAAK6O,KAAOjC,EAAMG,WAC3B,OAAOoC,EAAOvC,EAAMG,iBAGjB,GAAIuC,GACT,GAAItP,KAAK6O,KAAOjC,EAAME,SACpB,OAAOqC,EAAOvC,EAAME,UAAU,OAG3B,CAAA,IAAIyC,EAMT,MAAM,IAAIvF,MAAM,0CALhB,GAAIhK,KAAK6O,KAAOjC,EAAMG,WACpB,OAAOoC,EAAOvC,EAAMG,gBAU9BrC,OAAQ,SAASG,EAAMd,GACrB,IAAK,IAAIyD,EAAIxN,KAAKiN,WAAWlL,OAAS,EAAGyL,GAAK,IAAKA,EAAG,CACpD,IAAIZ,EAAQ5M,KAAKiN,WAAWO,GAC5B,GAAIZ,EAAMC,QAAU7M,KAAK6O,MACrB3G,EAAO8C,KAAK4B,EAAO,eACnB5M,KAAK6O,KAAOjC,EAAMG,WAAY,CAChC,IAAIyC,EAAe5C,EACnB,OAIA4C,IACU,UAAT3E,GACS,aAATA,IACD2E,EAAa3C,QAAU9C,GACvBA,GAAOyF,EAAazC,aAGtByC,EAAe,MAGjB,IAAI7E,EAAS6E,EAAeA,EAAarC,WAAa,GAItD,OAHAxC,EAAOE,KAAOA,EACdF,EAAOZ,IAAMA,EAETyF,GACFxP,KAAK8J,OAAS,OACd9J,KAAKwM,KAAOgD,EAAazC,WAClBzC,GAGFtK,KAAKyP,SAAS9E,IAGvB8E,SAAU,SAAS9E,EAAQqC,GACzB,GAAoB,UAAhBrC,EAAOE,KACT,MAAMF,EAAOZ,IAcf,MAXoB,UAAhBY,EAAOE,MACS,aAAhBF,EAAOE,KACT7K,KAAKwM,KAAO7B,EAAOZ,IACM,WAAhBY,EAAOE,MAChB7K,KAAKiP,KAAOjP,KAAK+J,IAAMY,EAAOZ,IAC9B/J,KAAK8J,OAAS,SACd9J,KAAKwM,KAAO,OACa,WAAhB7B,EAAOE,MAAqBmC,IACrChN,KAAKwM,KAAOQ,GAGP1C,GAGToF,OAAQ,SAAS3C,GACf,IAAK,IAAIS,EAAIxN,KAAKiN,WAAWlL,OAAS,EAAGyL,GAAK,IAAKA,EAAG,CACpD,IAAIZ,EAAQ5M,KAAKiN,WAAWO,GAC5B,GAAIZ,EAAMG,aAAeA,EAGvB,OAFA/M,KAAKyP,SAAS7C,EAAMO,WAAYP,EAAMI,UACtCE,EAAcN,GACPtC,IAKbqF,MAAS,SAAS9C,GAChB,IAAK,IAAIW,EAAIxN,KAAKiN,WAAWlL,OAAS,EAAGyL,GAAK,IAAKA,EAAG,CACpD,IAAIZ,EAAQ5M,KAAKiN,WAAWO,GAC5B,GAAIZ,EAAMC,SAAWA,EAAQ,CAC3B,IAAIlC,EAASiC,EAAMO,WACnB,GAAoB,UAAhBxC,EAAOE,KAAkB,CAC3B,IAAI+E,EAASjF,EAAOZ,IACpBmD,EAAcN,GAEhB,OAAOgD,GAMX,MAAM,IAAI5F,MAAM,0BAGlB6F,cAAe,SAASxC,EAAUd,EAAYE,GAa5C,OAZAzM,KAAKmK,SAAW,CACd5B,SAAUgD,EAAO8B,GACjBd,WAAYA,EACZE,QAASA,GAGS,SAAhBzM,KAAK8J,SAGP9J,KAAK+J,SA7rBPE,GAgsBOK,IAQJxC,GAOsBgI,EAAOhI,SAGtC,IACEiI,mBAAqBlI,EACrB,MAAOmI,GAUPC,SAAS,IAAK,yBAAdA,CAAwCpI,gCC5tB7BqI,EAGX,SAISC,EAIAxP,EAIAyP,EAIAC,YAZAF,IAAAA,EAAe,YAIfxP,IAAAA,EAAoB,YAIpByP,IAAAA,EAAwB,YAIxBC,IAAAA,EAAmB,cAZnBF,iBAIAxP,qBAIAyP,mBAIAC,GAiBEC,wBAWUC,EAA0BC,gBAA1BD,kBAA0BC,YAVxB,qBACS,mBACL,kBACC,6BAiBtBC,gCAAN,WAAW5P,EAAiB6P,kGAAAA,IAAAA,GAAgB,YACjB1Q,KAAKwQ,WAAWG,iCAEnCC,EAAe,IAAIzQ,EAFnBC,SAEkDJ,KAAKuQ,SACvD5P,EAAYiQ,EAAajQ,eAExBwP,KADHO,GAGU/P,EAAYE,EAFZF,EAEkCE,OAE3CuP,cAAgBhQ,OAChBO,UAAYA,IAEeiQ,EAAahQ,iBAAiBZ,KAAKmQ,MAA5DpP,IAAAA,WAAYD,IAAAA,oBACMd,KAAKwQ,WAAWK,SAAS9P,EAAYD,EAAYC,EAAa,uBAAlFsP,qCAEE,IAAIlP,8GAMb2P,QAAA,kBACS,IAAIZ,EAAmBlQ,KAAKmQ,KAAMnQ,KAAKW,UAAWX,KAAKoQ,cAAepQ,KAAKqQ,mBCpFzEU,wBACQpO,YAAAA,EACjBL,EAAiBtC,yBAGnByC,YAAA,mBAESG,EAAEoO,UAAUhR,KAAK2C,YACb,IAAIxB,GAAmB,EAAO,mBAAoB,kBAE3D,MAAO2B,UACA,IAAI3B,GAAmB,EAAO,mBAAqB2B,EAAchD,gBAEnE,IAAIqB,GAAmB,SCFrB8P,oCACJC,KAAP,SAAYC,EAAgBC,UACnBD,EAAOD,MAAK,SAACG,UAA8BA,EAAMD,KAAOA,QAQ1DE,OAAP,SAAcC,EAAoBF,UACjBJ,EAASC,KAAKK,EAAYF,EAAMD,IAEtC,IAAIjQ,GAAmB,EAAO,mBAAoB,kBAE3DoQ,EAAW3P,KAAKyP,GACT,IAAIlQ,GAAmB,OAGzBqQ,YAAP,SAAmBD,EAAoBJ,OAC/B3P,EAA4B,UAClC2P,EAAOzP,SAAQ,SAAA2P,OACPnO,EAAM+N,EAASK,OAAOC,EAAYF,GACnCnO,EAAI9B,SACPI,EAAII,KAAKsB,MAGN1B,KAGFiQ,OAAP,SAAcF,EAAoBF,OAC1BK,EAAOT,EAASC,KAAKK,EAAYF,EAAMD,WACzCM,GACFA,EAAKC,QAAUN,EAAMM,QACd,IAAIxQ,GAAmB,IAEzB,IAAIA,GAAmB,EAAO,mBAAoB,iBAGpDyQ,YAAP,SAAmBL,EAAoBJ,OAC/B3P,EAA4B,UAClC2P,EAAOzP,SAAQ,SAAA2P,OACPnO,EAAM+N,EAASQ,OAAOF,EAAYF,GACnCnO,EAAI9B,SACPI,EAAII,KAAKsB,MAGN1B,YAGT,SAAc+P,EAAoBF,OAC1B/M,EAAQiN,EAAWM,WAAU,SAACC,UAAgCA,EAAQV,KAAOC,EAAMD,aAC1E,IAAX9M,GACFiN,EAAWQ,OAAOzN,EAAO,GAClB,IAAInD,GAAmB,IAEzB,IAAIA,GAAmB,EAAO,mBAAoB,iBAGpD6Q,YAAP,SAAmBT,EAAoBJ,OAC/B3P,EAA4B,UAClC2P,EAAOzP,SAAQ,SAAA2P,OACPnO,EAAM+N,SAAgBM,EAAYF,GACnCnO,EAAI9B,SACPI,EAAII,KAAKsB,MAGN1B,KAGFyQ,OAAP,SAAcd,EAAgBQ,UACrBR,EAAOc,QAAO,SAACH,UAAgCA,EAAQH,UAAYA,QAGrEO,QAAP,SAAeX,GACbA,EAAW7P,SAAQ,SAACoQ,UAAgCA,EAAQH,SAAWG,EAAQH,cAG1EQ,UAAP,SAAiBZ,GACfA,EAAW7P,SAAQ,SAACoQ,GACbA,EAAQH,UACXG,EAAQH,SAAU,SAKjBS,YAAP,SAAmBb,GACjBA,EAAW7P,SAAQ,SAACoQ,GACdA,EAAQH,UACVG,EAAQH,SAAU,YAUbU,wBAEQjB,EAAwBO,YAAxBP,IAAAA,EAAa,aAAWO,IAAAA,GAAmB,WAA3CP,eAAwBO,qBAG3ClP,YAAA,eACQS,EfjF0B,SAACqI,MAC/B+G,MAAMC,QAAQhH,IAAWA,EAAOxJ,OAAS,EAAG,KACxCP,EAA4B,UAClC+J,EAAO7J,SAAQ,SAACC,OAlBYQ,EAmBpB2C,GAnBoB3C,EAmBIR,GAfrBQ,EAAqBM,eAEzB,IAAItB,GAAmB,EAAO,mBAAoB,iBAJlD,IAAIA,GAAmB,EAAO,mBAAoB,kBAkBlD2D,EAAM1D,SACTI,EAAII,KAAKkD,MAGNtD,QAEF,CAAC,IAAIL,GAAmB,EAAO,qBesExBqR,CAAqB,CAAC,IAAIvP,EAAejD,KAAKoR,IAAK,IAAIL,EAAc/Q,KAAK2R,kBAClFzO,EAAInB,OAAS,EACRmB,EAAI,GAEN,IAAI/B,GAAmB,SC7HrBsR,EAIX,SAAYC,EAActR,YAAdsR,IAAAA,GAAW,YAAGtR,IAAAA,GAAmB,iBAH1B,eACD,OAGXA,QAAUA,OACVsR,QAAUA,GCJNC,oCAWJC,UAAP,SAAiBC,EAAiB9R,EAAoB+R,UAC/CH,EAAYI,aAAaF,GACzBF,EAAYK,eAAeH,EAAK9R,GAChC4R,EAAYK,eAAeH,EAAKC,GAE5B,IAAI9Q,EADT8Q,EAAW/R,EACkB,CAACK,SAAS,EAAOC,QAAS,KAEvDyR,IAAa/R,EACgB,CAACK,SAAS,EAAMe,MAAO,CAAC0Q,EAAI9R,IAAcmB,YAAa,OAEzD,CAACd,SAAS,EAAMe,MAAO0Q,EAAI3R,MAAMH,EAAY+R,EAAW,GAAI5Q,YAAa,QAPjD,IAAIF,EAAoB,CAACZ,SAAS,EAAOC,QAAS,MADhD,IAAIW,EAAoB,CAACZ,SAAS,EAAOC,QAAS,MADhE,IAAIW,EAAoB,CAACZ,SAAS,EAAOC,QAAS,SAkBxF4R,WAAP,SAAkBC,EAAqB5O,UAChCqO,EAAYI,aAAaG,GACzBP,EAAYK,eAAeE,EAAS5O,IACzC4O,EAAQnB,OAAOzN,EAAO,GACf,IAAImO,EAAiB,GAAG,IAFyB,IAAIA,EAAiB,GAD9B,IAAIA,EAAiB,MAc/DU,QAAP,SAAeD,EAAqB5O,EAAeoN,UAC5CiB,EAAYI,aAAaG,GACzBP,EAAYS,gBAAgBF,EAAS5O,IAC1C4O,EAAQnB,OAAOzN,EAAO,EAAGoN,GAClB,IAAIe,EAAiB,GAAG,IAF0B,IAAIA,EAAiB,GAD/B,IAAIA,EAAiB,MAa/DY,SAAP,SAAgBH,EAAqBI,EAAmBC,OACjDZ,EAAYI,aAAaG,GAAU,OAAO,IAAIT,EAAiB,OAC/DE,EAAYK,eAAeE,EAASI,GAAY,OAAO,IAAIb,EAAiB,OAC5EE,EAAYK,eAAeE,EAASK,GAAU,OAAO,IAAId,EAAiB,MAC3Ea,IAAcC,SACT,IAAId,EAAiB,GAAG,OAG3B9Q,EAAKuR,EAAQnB,OAAOuB,EAAW,UACrCJ,EAAQnB,OAAOwB,EAAS,EAAG5R,EAAG,IACvB,IAAI8Q,EAAiB,GAAG,MAU1Be,UAAP,SAAiBN,EAAqBO,EAAgBC,OAC/Cf,EAAYI,aAAaG,GAAU,OAAO,IAAIT,EAAiB,OAC/DE,EAAYK,eAAeE,EAASO,GAAS,OAAO,IAAIhB,EAAiB,OACzEE,EAAYK,eAAeE,EAASQ,GAAS,OAAO,IAAIjB,EAAiB,MAC1EgB,IAAWC,SACN,IAAIjB,EAAiB,GAAG,OAG3BkB,EAAIT,EAAQO,UAClBP,EAAQO,GAAUP,EAAQQ,GAC1BR,EAAQQ,GAAUC,EACX,IAAIlB,EAAiB,GAAG,MAW1BmB,WAAP,SAAkBV,EAAqB/Q,EAAY0R,OAC5ClB,EAAYI,aAAaG,GAAU,OAAO,IAAIT,EAAiB,OAC/D7P,EAAEkR,WAAWD,UACT,IAAIpB,EAAiB,MAE1BS,EAAQnR,OAAS,SACZ,IAAI0Q,EAAiB,OAExBsB,EAAKb,EAAQrB,WAAU,SAAClQ,EAAI2C,UAAUuP,EAAUlS,EAAI2C,aAC9C,IAARyP,EACK,IAAItB,EAAiB,IAE9BS,EAAQa,GAAM5R,EACP,IAAIsQ,EAAiB,GAAG,OAU1BuB,YAAP,SAAmBC,EAAaC,MAC1BD,EAAKlS,OAAS,GAAKmS,EAAKnS,OAAS,EAAG,OAAO,MACzCoS,EAAOvR,EAAEwR,KAAKF,UACbtR,EAAEyR,aAAaJ,EAAME,GAAMpS,SAAWoS,EAAKpS,UAG7CiR,eAAP,SAAsBH,EAAiBvO,WACjCA,EAAQ,IAGLA,GAAUuO,EAAI9Q,OAAS,KAGzBqR,gBAAP,SAAuBP,EAAiBvO,WAClCA,EAAQ,IAGLA,GAAUuO,EAAI9Q,UAGhBgR,aAAP,SAAoBF,WACTjQ,EAAE2P,QAAQM,UPtIXzL,EAAAA,qBAAAA,2CAEVA,sBA2BUC,EAAAA,qBAAAA,2CAEVA,qBACAA,mBASF,IQjDYiN,ERiDCC,oCAgBJhJ,OAAP,SAAchJ,EAAUiS,EAAwBC,YAErCC,EAAOxB,EAAqBjS,GACnCA,EAAMS,SAAQ,SAAAa,GACRA,EAAI4F,eAAeqM,IACrBtB,EAAQtR,KAAKW,EAAIiS,QAEbG,EAASpS,EAAIkS,GACfE,GAAUrC,MAAMC,QAAQoC,IAAWA,EAAO5S,OAAS,GACrD2S,EAAOxB,EAASyB,UAKhB1I,EAAqB,MACvBqG,MAAMC,QAAQhQ,GAChBmS,EAAOzI,EAAQ1J,OACV,CACDA,EAAI4F,eAAeqM,IACrBvI,EAAOrK,KAAKW,EAAIiS,QAEZG,EAASpS,EAAIkS,GACfE,GAAUrC,MAAMC,QAAQoC,IAAWA,EAAO5S,OAAS,GACrD2S,EAAOzI,EAAQ0I,UAGZ1I,KAiCF2I,MAAP,SACE/B,EACAgC,EACAC,EACAC,MAsBIlC,EAAI9Q,OAAS,EAAG,KAEZiT,EAAM,IAAIC,IAChBpC,EAAIqC,KAAI,SAACC,EAAOpB,OACRxI,EAAS3I,EAAEwS,IAAID,EAAON,EAAiB,IACzCjS,EAAE2P,QAAQhH,IAAWA,EAAOxJ,OAAS,GACvCwJ,EAAO2J,KAAI,SAAAG,MACLzS,EAAEC,SAASwS,IAAUzS,EAAE0D,SAAS+O,GAAQ,KACpCC,EAASD,EAAQ,GACjBjE,EAAKxO,EAAEwS,IAAID,EAAOL,GACpBS,EAAM3S,EAAEC,SAASuO,GAAMA,EAAKxO,EAAE0D,SAAS8K,GAAMoE,OAAOpE,GAAM,KAClD,OAARmE,IACFA,EAjJuB,oBAiJSC,OAAOzB,aAzBlCiB,EAA4BnM,EAAauI,MACnD4D,EAAIS,IAAI5M,GAEN,KACC6M,EAAOV,EAAII,IAAIvM,GACjBkM,GACFW,EAAMC,SAASvE,IAEfsE,EAAM9T,KAAKwP,QANb4D,EAAIY,IAAI/M,EAAK,CAACuI,IAyBRyE,CAAQb,EAAKM,EAAQC,cAMvB/T,EAAoB,UAC1BwT,EAAItT,SAAQ,SAACiB,EAAekG,GAC1BrH,EAAII,KAAK,CAACO,MAAO0G,EAAKiN,IAAKnT,OAGtB,IAAIX,EAA6B,CAACZ,SAAS,EAAMe,MAAOX,EAAKU,YAAakF,mBAAW2O,wBAGvF,IAAI/T,EAAe,CAACZ,SAAS,EAAMe,MAAO,GAAID,YAAakF,mBAAW4O,oBAWxEC,aAAP,SAAoBpD,EAAeqD,EAAmCC,MAGhEtD,EAAI9Q,OAAS,SACR,IAAIC,EAA6B,CAACZ,SAAS,EAAMe,MAAO,GAAID,YAAamF,mBAAW2O,qBAGvFI,EAAK,IAAInB,IACXoB,GAAsB,KAC1BxD,EAAIqC,KAAI,SAACvT,EAAIoS,MACQnR,EAAE6S,IAAI9T,EAAIuU,GACb,KACR/T,EAAQS,EAAEwS,IAAIzT,EAAIuU,MACpBE,EAAGX,IAAItT,GAAQ,KACXmU,EAAKF,EAAGhB,IAAIjT,GAClBmU,EAAIC,QACJD,EAAI5Q,QAAQ9D,KAAKmS,QAEjBqC,EAAGR,IAAIzT,EAAO,CAACoU,MAAO,EAAG7Q,QAAS,CAACqO,UAE5BoC,IACTE,GAAsB,MAItBA,SACK,IAAIrU,EAA6B,CAACZ,SAAS,EAAOC,QAASgG,mBAAWmP,iBAGzEhV,EAAoB,UAC1B4U,EAAG1U,SAAQ,SAACiB,EAAekG,GACrBlG,EAAI4T,MAAQ,GACd/U,EAAII,KAAK,CAACO,MAAO0G,EAAK0N,MAAO5T,EAAI4T,MAAO7Q,QAAS/C,EAAI+C,aAIlD,IAAI1D,EAA6B,CAACZ,SAAS,EAAMe,MAAOX,EAAKU,YAAamF,mBAAW0O,oBAavFU,WAAP,SACE7J,EACAiH,EACA6C,OAEK9J,EAAO,MAAO,OACboI,EAAa,GACf2B,GAAW,EACXC,GAAU,SACdC,KAAKC,UAAUlK,GAAO,SAACmK,EAAMC,YACtBJ,IAAYF,IAAaA,GAAYC,IACpC9C,EAAUkD,EAAMC,KAClBhC,EAAIpT,aAAOmV,GAAOC,MAClBL,GAAW,GAGVC,GAAYF,IAAWC,SAG5BC,GAAU,EACHI,KAEFhC,KAUFiC,YAAP,SACErK,EACAiH,EACA6C,OAEK9J,EAAO,MAAO,OACbpL,EAAoB,GACtBmV,GAAW,EACXC,GAAU,SACdC,KAAKC,UAAUlK,GAAO,SAAUmK,EAAMC,MAC/BJ,IAAYF,IAAaA,GAAYC,IACpC9C,EAAUkD,EAAMC,EAAQhX,QAC1BwB,EAAII,KAAK,CAACiH,IAAKkO,EAAM5U,MAAO6U,EAAQE,OAAQlX,OAC5C2W,GAAW,GAGVC,GAAYF,IAAWC,SAG5BC,GAAU,EACHI,KAEFxV,SQpSC8S,EAAAA,yBAAAA,gDAEVA,4BCPU6C,ED4BCC,oCAMJC,SAAP,SAAgBC,OACR9V,EAAoB,UAC1B8V,EAAS5V,SAAQ,SAACC,EAAIoS,GAChBpS,EAAG4V,SAAWjD,uBAAekD,UAC/BhW,EAAII,KAAK,CAACmS,GAAAA,EAAI0D,OAAQ9V,EAAG8V,YAGtBjW,KAOFkW,UAAP,SAAiBJ,OACT9V,EAAoB,UAC1B8V,EAAS5V,SAAQ,SAACC,EAAIoS,GAChBpS,EAAG4V,SAAWjD,uBAAeqD,WAC/BnW,EAAII,KAAK,CAACmS,GAAAA,EAAI5R,MAAOR,EAAGQ,WAGrBX,KAOFoW,aAAP,SAAoBN,UACXA,EAASO,OAAM,SAAAlW,UAAMA,EAAG4V,SAAWjD,uBAAeqD,gBAQpDG,QAAP,SAAeC,EAAwBR,UAC9BQ,EAAMR,SAAWA,KAUnBpI,OAAP,SACEmI,EAAkCU,EAAgCC,qBAE3DX,EAASpC,KAAI,SAAAgD,UACdC,EAAKL,QAAQI,EAAS5D,uBAAeqD,WAChCK,EAAYE,EAAQ/V,OAEpB8V,EAAWC,EAAQT,iBE7ErBW,wBASUC,EAA2BC,iBAA3BD,sBAA2BC,OACzCC,QAAUvY,KAAKqY,SAAWrY,KAAKsY,0CAGhCE,4CAAN,kGACqBC,MAASzY,KAAKuY,gCAC3BG,SAAeC,QAAQvD,IAAI,mCAC1B5N,EAAUkR,2GAGbE,uCAAN,4FACqBH,MAAMzY,KAAKuY,6CAClBM,+GAQRhI,oCAAN,WAAeiI,EAAgBC,kFACVN,MAASzY,KAAKuY,gBAAeO,aAAiBC,0CACrDF,kHAQRG,wCAAN,WAAmBnY,EAAiBkY,kFACfN,MAASzY,KAAKuY,eAAc1X,aAAkBkY,0CACrDF,kHAORI,4CAAN,WAAuBhH,kFACFwG,MAASzY,KAAKuY,SAAQtG,0CAC7B4G,gHAYRK,6CAAN,WAAwBhD,EAAmBvQ,EAAmBmT,EAAgBC,wFACxD/Y,KAAK4Y,4BACnBO,SAAsBlH,QAAO,SAACP,UAC3BjO,EAAaiO,EAAKwE,GAAYvQ,GAAa,uBAE7CwT,EAAcjY,MAAM4X,EAAQA,EAASC,kHAcxCK,8CAAN,WAAyBlD,EAAmBvQ,EAAmB0T,EAAoBN,kFACpE/Y,KAAKkZ,kBAAkBhD,EAAWvQ,GAAY0T,EAAa,GAAKN,EAAOA,yJAehFO,6CAAN,WAA2BpD,EAAmBvQ,EAAmBmT,EAAgBC,0FAC3D/Y,KAAK4Y,4BACnBO,SAAsBlH,QAAO,SAACP,UAC3BjO,EAAaiO,EAAKwE,GAAYvQ,GAAa,KAE9C4T,EAAsBJ,EAAcjY,MAAM4X,EAAQA,EAASC,qBAC1D,CACLS,SAAUL,EAAcpX,OACxB0X,KAAMF,EACNG,QAASZ,EAASC,EAAQI,EAAcpX,uHAYtC4X,8CAAN,WAA4BzD,EAAmBvQ,EAAmB0T,EAAoBN,2FAC7E/Y,KAAKsZ,kBAAkBpD,EAAWvQ,GAAY0T,EAAa,GAAKN,EAAOA,kHAM1E9F,sCAAN,WAAiB7B,wFACGqH,MAASzY,KAAKuY,SAAQnH,EAAM,CAC5CtH,OAAQ,qBAES,OAHbtI,UAGE+V,gDACC,IAAIpW,GAAmB,EAAO,0CAA2CiQ,oBAAoB5P,EAAI+V,6CAEnG,IAAIpW,2GAGPyY,uCAAN,WAAkB9D,8EACVtU,EAAM,OACKsU,kDAAN1E,mBACSpR,KAAKiT,WAAW7B,UAClC5P,EAAII,oEAECJ,4GAOHqY,wCAAN,WAAmB/D,gFACXgE,EAAsC,GACtCC,EAAyC,OAC9BjE,kDAAN1E,mBAC6BpR,KAAKiT,WAAW7B,iBAC9ChQ,QACN0Y,EAAYlY,KAAKwP,GAEjB2I,EAAenY,KAAKwP,0DAGjB,CAELwG,aAAckC,EAAY/X,SAAW+T,EAAI/T,OAEzCiY,WAAYF,EAEZG,cAAeF,6GAQbG,+CAAN,WAA0BjI,wFACJjS,KAAKiZ,iBAAiBhH,iBAApChR,kBACOjB,KAAK4Z,YAAY3Y,EAAMiU,KAAI,SAACvT,UAAYA,EAAGyP,uJAGpD+I,sCAAN,WAAiBV,wFACGhB,SAASzY,KAAKuY,KAAQ,CACtCzO,OAAQ,OACR6O,QAAS,gBACS,oBAElByB,KAAMvD,KAAKC,UAAU2C,eAGJ,OARbvW,UAQEqU,gDACC,IAAIpW,mCAEN,IAAIA,GAAmB,EAAO,6CAA8C+B,EAAIqU,iBAAgBrU,EAAImX,kHAQvGC,uCAAN,WAAkBb,wFACEhB,SAASzY,KAAKuY,KAAQ,CACtCzO,OAAQ,OACR6O,QAAS,gBACS,oBAElByB,KAAMvD,KAAKC,UAAU2C,eAGJ,OARbvW,UAQEqU,uCACoBrU,EAAI2V,uCACvB,IAAI7W,EAAe,CAACZ,SAAS,EAAMe,aAAmBiP,GAAK,sCAE7D,IAAIpP,EAAe,CAACZ,SAAS,EAAOC,QAAS6B,EAAIqU,OAAS,GAAIjW,WAAY4B,EAAImX,+GAGjFzG,sCAAN,WAAiB6F,wFACGhB,MAASzY,KAAKuY,SAAQkB,EAAKrI,GAAM,CACjDtH,OAAQ,MACR6O,QAAS,gBACS,oBAElByB,KAAMvD,KAAKC,UAAU2C,eAEJ,OAPbvW,UAOEqU,gDACC,IAAIpW,mCAEN,IAAIA,GAAmB,EAAO,6CAA8C+B,EAAIqU,iBAAgBrU,EAAImX,qHC1OlGE,yBACQ5X,YAAAA,EACjBL,EAAiBtC,yBAGnByC,YAAA,mBAESzC,KAAK2C,KAAoB,IAAb3C,KAAK2C,WACb,IAAIxB,GAAmB,EAAO,iBAAkB,gBAEpDyB,EAAE0D,SAAStG,KAAK2C,YACZ,IAAIxB,GAAmB,EAAO,iBAAkB,qBAEpDyB,EAAE4X,cAAcxa,KAAK2C,YACjB,IAAIxB,GACT,EACA,iBACA,kBAGJ,MAAOkL,UACA,IAAIlL,GACT,EACA,iBACCkL,EAAgBvM,gBAGd,IAAIqB,GAAmB,SC5BrBsZ,2FACXhY,YAAA,mBAEUS,cAAYT,2BACbS,EAAI9B,eACA8B,KAGLlD,KAAK2C,IAAM,SACN,IAAIxB,GAAmB,EAAO,iBAAkB,iBAEzD,MAAO2B,UACA,IAAI3B,GACT,EACA,iBACC2B,EAAchD,gBAGZ,IAAIqB,GAAmB,OAlBEoZ,ICAvBG,2FACXjY,YAAA,mBAEUS,cAAYT,2BACbS,EAAI9B,eACA8B,KAGQ,IAAblD,KAAK2C,WACA,IAAIxB,GACT,EACA,iBACA,mBAGJ,MAAO2B,UACA,IAAI3B,GACT,EACA,iBACC2B,EAAchD,gBAGZ,IAAIqB,GAAmB,OAtBGsZ,ICAxBE,2FACXlY,YAAA,mBAEUS,cAAYT,2BACbS,EAAI9B,eACA8B,KAGLlD,KAAK2C,KAAO,SACP,IAAIxB,GACT,EACA,iBACA,kBAGJ,MAAO2B,UACA,IAAI3B,GACT,EACA,iBACC2B,EAAchD,gBAGZ,IAAIqB,GAAmB,OAtBEoZ,ICCvBK,yBACQ7Z,EAAmC+R,mBAAnC/R,gBAAmC+R,EACpDxQ,EAAiBtC,yBAGnByC,YAAA,eACQoY,EAAU7a,KAAKe,WAAW4B,IAC1BmY,EAAQ9a,KAAK8S,SAASnQ,WAExBkY,GAAWC,EACN,IAAI3Z,EAEN,IAAIA,GAAmB,EAAO,0EAA2E0Z,aAAkBC,SCNzHC,kFAAwB1X,GCNxB2X,yBACQrY,YAAAA,EACjBL,EAAiBtC,yBAGnByC,YAAA,kBACMzC,KAAK2C,IACA,IAAIxB,EAEN,IAAIA,GAAmB,EAAO,2BRZ7BgW,EAAAA,yBAAAA,+DAIVA,6BAEAA,iCAEAA,6BSHF,ICPY8D,GCCAC,GCDAC,GCEAC,GCEAC,GLGCC,yBAEFC,EAEAC,YAFAD,IAAAA,EAA6BpE,uBAAe5R,0BAA5CgW,uBAEAC,qBAGT/Y,YAAA,kBACS,IAAItB,GAAmB,UCftB8Z,GAAAA,8BAAAA,kFAEVA,uDCDUC,GAAAA,0BAAAA,gDAQVA,oBAIAA,wBCbUC,GAAAA,qBAAAA,kCAIVA,eAEAA,kBCJUC,GAAAA,8BAAAA,mDAQVA,qBAIAA,iBCVF,SAAYC,GACVA,cADF,CAAYA,KAAAA,yEAISzO,MCQR6O,yBAEFvF,EACAwF,EACAvZ,EACAwZ,YAAAA,IAAAA,EAA6BT,wBAAgBU,qBAH7C1F,iBACAwF,aACAvZ,iBACAwZ,qBAGTlZ,YAAA,kBAES,IAAItB,sCCtBsB,wDzBoBE,iEQZvC,oBACgB,sBAGhB,oBACgB,6FAIhB,uBAC2BmT,uBAAekD,0KkBVxC,SAAmBvW,cAAAA,oECfG,CACtB,CAACmQ,GAAI,EAAGzO,IAAK,GAAIkZ,KAAM,gBAAiB3Y,KAAK,GAC7C,CACEkO,GAAI,EAAGzO,IAAK,IACZkZ,KAAM,4BACN3Y,KAAK,GAEP,CAACkO,GAAI,EAAGzO,IAAK,OAAQkZ,KAAM,sBAAuB3Y,KAAK,GACvD,CAACkO,GAAI,EAAGzO,IAAK,YAAakZ,KAAM,mCAAoC3Y,KAAK,GACzE,CAACkO,GAAI,EAAGzO,IAAK,QAASkZ,KAAM,6BAA8B3Y,KAAK,GAC/D,CAACkO,GAAI,EAAGzO,IAAK,QAASkZ,KAAM,4BAA6B3Y,KAAK,GAC9D,CAACkO,GAAI,EAAGzO,IAAK,SAAUkZ,KAAM,qCAAsC3Y,KAAK,GACxE,CACEkO,GAAI,EAAGzO,qBACDkZ,KAAM,0BAA2B3Y,KAAK,GAE9C,CAACkO,GAAI,EAAGzO,IAAK,MAAOkZ,KAAM,qBAAsB3Y,KAAK,GACrD,CAACkO,GAAI,GAAIzO,IAAK,KAAMkZ,KAAM,OAAQ3Y,KAAK,GACvC,CAACkO,GAAI,GAAIzO,SAAKsH,EAAW4R,KAAM,YAAa3Y,KAAK,GACjD,CAACkO,GAAI,GAAIzO,IAAKmZ,IAAKD,KAAM,MAAO3Y,KAAK,GACrC,CAACkO,GAAI,GAAIzO,IAAKoZ,SAAUF,KAAM,WAAY3Y,KAAK,GAC/C,CAACkO,GAAI,GAAIzO,IAAK,EAAGkZ,KAAM,OAAQ3Y,KAAK,GACpC,CAACkO,GAAI,GAAIzO,IAAK,EAAIkZ,KAAM,KAAM3Y,KAAK,GACnC,CAACkO,GAAI,GAAIzO,KAAM,EAAGkZ,KAAM,KAAM3Y,KAAK,GACnC,CAACkO,GAAI,GAAIzO,IAAK,IAAKkZ,KAAM,YAAa3Y,KAAK,GAC3C,CAACkO,GAAI,GAAIzO,IAAK,OAAQkZ,KAAM,eAAgB3Y,KAAK,GACjD,CAACkO,GAAI,GAAIzO,IAAK,GAAIkZ,KAAM,gBAAiB3Y,KAAK,GAC9C,CAACkO,GAAI,GAAIzO,IAAK,CAAC,CAACgR,EAAG,IAAKkI,KAAM,kBAAmB3Y,KAAK,GACtD,CAACkO,GAAI,GAAIzO,IAAK,GAAIkZ,KAAM,gBAAiB3Y,KAAK,GAC9C,CAACkO,GAAI,GAAIzO,IAAK,CAACgR,EAAG,GAAIkI,KAAM,kBAAmB3Y,KAAK,GACpD,CACEkO,GAAI,GAAIzO,IAAK,aACVkZ,KAAM,qBAAsB3Y,KAAK,GAEtC,CACEkO,GAAI,GAAIzO,eACHkZ,KAAM,8BAA+B3Y,KAAK,GAEjD,CACEkO,GAAI,GAAIzO,eACPkZ,KAAM,6BAA8B3Y,KAAK,GAE5C,CACEkO,GAAI,GAAIzO,qBAEPkZ,KAAM,gDAAiD3Y,KAAK,GAE/D,CACEkO,GAAI,GAAIzO,aACLkZ,KAAM,4BAA6B3Y,KAAK,2BAIT,sLCjDpC,SACSkO,EACA4K,EACArK,EACAsK,EACAC,YAFAvK,IAAAA,GAAmB,YACnBsK,IAAAA,GAAoB,WAHpB7K,mBACA4K,eACArK,gBACAsK,eACAC,sQCMT,SAAmB9K,EAA2B+K,WAA3B/K,kBAA2B+K,MAEtC3Z,EAAW4O,EAAG3O,kBACfD,EAASpB,cACN,IAAI4I,MAAMxH,EAASnB,QAAU,MAAQmB,EAASlB,kNCRxD,SAAqBa,EAAwBia,YAAAA,IAAAA,GAAwB,cAAhDja,oBAAwBia"}