{"version":3,"file":"rsuv-lib.cjs.production.min.js","sources":["../src/RsuvErr.ts","../src/RsuvPaginationGyth.ts","../src/RsuvResultBoolPknz.ts","../src/RsuvResultTibo.ts","../src/RsuvTxString.ts","../src/RsuvTuString.ts","../src/RsuvTxStringAA.ts","../src/RsuvTxStringAB.ts","../src/RsuvTxStringABB.ts","../src/RsuvTxStringABC.ts","../src/RsuvTuDateTime.ts","../src/RsuvTxStringB.ts","../src/RsuvTxStringC.ts","../src/RsuvSearchMode.ts","../src/RsuvTxEmail.ts","../node_modules/regenerator-runtime/runtime.js","../src/RsuvAdapterZrnx.tsx","../src/RsuvTxBoolean.ts","../src/RsuvCheckModels.ts","../src/RsuvBnuwUtils.ts","../src/RsuvResultAsau11.ts","../src/RsuvTuArray.ts","../src/RsuvTxJsonServer.ts","../src/RsuvTxNumInt.ts","../src/RsuvTxNumIntAB.ts","../src/RsuvTxNumIntABB.ts","../src/RsuvTxNumIntAC.ts","../src/RsuvTxFieldName.ts","../src/RsuvSearchHow.ts","../src/RsuvEnCaseSensitive.ts","../src/RsuvEnDataTypes.ts","../src/RsuvEnSort.ts","../src/RsuvSearchElem.ts","../src/RsuvTuInfo.ts","../src/RsuvConst.ts","../src/RsuvSearchElems.ts","../src/RsuvTxSort.ts","../src/RsuvValueAnd.ts"],"sourcesContent":["/**\n * Представляет какую-либо ошибку\n */\nexport class RsuvErr {\n  constructor(readonly code: string = '', readonly message: string = '') {\n  }\n\n  asString(): string {\n    return `code [${this.code}] message [${this.message}]`\n  }\n\n  static asStringB(oj: RsuvErr): string {\n    return `code [${oj.code}] message [${oj.message}]`\n  }\n}\n","/**\n * [[gyth]]\n * Сущность для пагинации. Передаём в конструктор \"общее кол-во элементов\" и \"кол-во элементов на странице\", и затем\n * по \"номеру страницы\" узнаём начальный и конечный индексы с помощью метода {@link indexesByPageNum}\n */\nexport class RsuvPaginationGyth {\n\n  /**\n   * Количество страниц\n   */\n  public readonly pageCount: number = 1\n\n  /**\n   * При интанцировании вычисляет поле {@link pageCount}\n   *\n   * @param elemsCount (1) -- общее количество элементов\n   * @param elemsPerPageCount (2) -- элементов на одной странице\n   */\n  constructor(readonly elemsCount: number = 20, readonly elemsPerPageCount: number = 10) {\n    // --- вычисление this.pageCount\n    if (elemsCount >= elemsPerPageCount) {\n      const pagesFloat = elemsCount / elemsPerPageCount\n      const pages = Math.trunc(pagesFloat)\n      const dev = pagesFloat - pages;\n      if (dev === 0) {\n        this.pageCount = pages\n      } else if (dev > 0) {\n        this.pageCount = pages + 1\n      }\n    }\n  }\n\n  /**\n   *\n   * @param pageNum (1) -- 1+, если больше реального количества страниц, то возвращаются данные для фактичесчки последней\n   * страницы\n   */\n  indexesByPageNum(pageNum: number): { indexStart: number, indexLast: number } {\n    const pageNum0 = pageNum > this.pageCount ? this.pageCount : pageNum;\n    // ---\n    const indexLast = pageNum0 * this.elemsPerPageCount - 1;\n    const indexStart = indexLast - this.elemsPerPageCount + 1;\n    return {indexStart, indexLast}\n  }\n\n  elemsByPageNum(elems: any[], pageNum: number): any[] {\n    const {indexStart, indexLast} = this.indexesByPageNum(pageNum);\n    return elems.slice(indexStart, indexLast + 1)\n  }\n\n}\n","\n/**\n * [[pknz]]\n * \n * представление результата вида \"успех/не-успех\"\n */\nexport class RsuvResultBoolPknz {\n\n  constructor(readonly success: boolean = true, readonly errCode: string = '', readonly errMessage: string = '') {\n  }\n\n  /**\n   * Возвращает информацию о том какие элементы из (1) являются {success: true, ...} а какие {success: false, ...}\n   * @param elems (1) --\n   */\n  static infoMulti(elems: RsuvResultBoolPknz[]): RsuvT2 {\n    const ret = {success: [], notSuccess: []} as RsuvT2\n    elems.forEach((el) => {\n      if (el.success) {\n        ret.success.push(el)\n      } else {\n        ret.notSuccess.push(el)\n      }\n    })\n    return ret\n  }\n\n  /**\n   * Возвращает TRUE если ВСЕ элементы (1) являются {success: true, ...}.\n   * Если elems это пустой массив, то возвращает FALSE\n   * @param elems (1) --\n   */\n  static successAllIsSugar(elems: RsuvResultBoolPknz[]): RsuvResultBoolPknz {\n    const info: RsuvT2 = RsuvResultBoolPknz.infoMulti(elems)\n    const b1 = info.notSuccess.length === 0 && info.success.length > 0\n    if (b1) {\n      return new RsuvResultBoolPknz(true)\n    }\n    if (info.notSuccess.length > 0) {\n      return info.notSuccess[0]\n    }\n    return new RsuvResultBoolPknz(false, '[[210725095419]]', '')\n  }\n}\n\nexport type RsuvT2 = {\n  success: RsuvResultBoolPknz[],\n  notSuccess: RsuvResultBoolPknz[]\n}\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\n\n/**\n * Представление результата \"успешно/неуспешно\" плюс значение <T> результата\n * \n * ID [[tibo]]\n */\nexport class RsuvResultTibo<T> {\n  success: boolean = true;\n  successCode?: string;\n  value?: T;\n  errCode?: string;\n  errMessage?: string;\n\n  constructor(tibo?: RsuvResultTibo<T>) {\n    if (tibo) {\n      this.success = tibo.success;\n      this.successCode = tibo.successCode;\n      this.value = tibo.value;\n      this.errCode = tibo.errCode;\n      this.errMessage = tibo.errMessage;\n    }\n  }\n\n  static fromPknz(pknz: RsuvResultBoolPknz): RsuvResultTibo<any> {\n    if (pknz) {\n      return new RsuvResultTibo({\n        success: pknz.success,\n        errCode: pknz.errCode,\n        errMessage: pknz.errMessage,\n      });\n    }\n    return new RsuvResultTibo({\n      success: false,\n      errCode: '[[210725095953]]',\n      errMessage: '',\n    });\n  }\n}\n","import { RsuvBnuwNT } from './RsuvBnuwNT';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport _ from 'lodash';\n\n/**\n * Представляет строку не нулевой длины\n * \n * ID [[1636807341]]\n * \n * @implements RsuvBnuwNT\n */\nexport class RsuvTxString implements RsuvBnuwNT {\n  constructor(public val: string) {}\n\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      if (!this.val) {\n        return new RsuvResultBoolPknz(false, '[[210705185504]]', 'is falsy');\n      }\n      if (!_.isString(this.val)) {\n        return new RsuvResultBoolPknz(\n          false,\n          '[[210706090804]]',\n          'is not string'\n        );\n      }\n      if (this.val.length < 1) {\n        return new RsuvResultBoolPknz(false, '[[210705185559]]', 'length < 1');\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(\n        false,\n        '[[210705185560]]',\n        (err as Error).message\n      );\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","/*\nутилиты для String\n */\n\nimport { RsuvTxString } from './RsuvTxString';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvResultTibo } from './RsuvResultTibo';\nimport _ from 'lodash';\n\n/**\n * Возвращает TRUE если строка str это falsy, строка нулевой длины, или строка из одних пробелов\n *\n * source [210217114100]\n */\nexport function isEmptyOrWhitespaces(str: any): Boolean {\n  return (!str || str.length === 0 || /^\\s*$/.test(str))\n}\n\n/**\n * ID [[210713104651]] rev 1 1.0 2021-07-13\n * source ID [210518234642] rev 1 1.0 2021-05-18\n *\n * Возвращает сколько раз строка (2) встречается в строке (1).\n * Чувствительна к регистру.\n * Если не находит вхождений, и в невалидных случаях, возвращает 0.\n * @param target string (1) -- например 'aba'\n * @param substr string (2) -- например 'a'\n * @return number например 2\n */\nexport function substrCount(target: string, substr: string): number {\n  if (target && substr) {\n    const ret = target.split(substr).length - 1\n    return ret >= 0 ? ret : 0;\n  }\n  return 0;\n}\n\n/**\n * ID [[210713104605]] rev 1 1.0.0 2021-07-13\n * source ID [210518234643] rev 1 1.0 2021-05-19\n *\n * {тоже что и А только не чувствительна к регистру}\n *\n * Возвращает сколько раз строка (2) встречается в строке (1).\n * Не чувствительна к регистру.\n * Если не находит вхождений, и в невалидных случаях, возвращает 0.\n * @param target string (1) -- например 'aba'\n * @param substr string (2) -- например 'A'\n * @return number например 2\n */\nexport function substrCountB(target: string, substr: string): number {\n  if (target && substr) {\n    const ret = target.toLowerCase().split(substr.toLowerCase()).length - 1\n    return ret >= 0 ? ret : 0;\n  }\n  return 0;\n}\n\n/**\n * Возвращает информацию о том в каких местах строки (1) встречается строка (2).\n * Допускает содержание в (2) символов считающихся специальными для регулярных выражений - экранирует их.\n * ID [[210801094836]] rev 1 1.0.0 2021-08-01\n * @param target (1) --\n * @param substr (2) --\n * @param ignoreCase (3) -- TRUE если нужно игнорировать регистр символов\n * @return RsuvT7[] - пустой массив если вхождений не найдено и при нештатах\n */\nexport function substrIndexes(target: string, substr: string, ignoreCase: boolean): RsuvT7[] {\n  const ret: RsuvT7[] = []\n  if (!target || !substr\n    || !_.isString(target) || !_.isString(substr)\n    || target.length < 1 || substr.length < 1\n    || target.length < substr.length) {\n    return ret\n  }\n  const substrEscape = _.escapeRegExp(substr);\n  const rg = new RegExp(substrEscape, 'g' + (ignoreCase ? 'i' : ''))\n  let res: any = true;\n  while (res) {\n    res = rg.exec(target)\n    if (res) {\n      ret.push(new RsuvT7(res.index, res.index + substr.length))\n    }\n  }\n  return ret\n}\n\n/**\n * Предоставляет полную информацию о том как строка (2) соотносится со строкой (1), например содержит ли (1) подстроку\n * (2), начинается ли с неё, заканчивается ли ей, имеет ли с ней полное соответствие. Вся эта информация проверяется для\n * двух варинатов - с учетом регистра и без учета регистра символов (этим отличается от версии А текущей функции)\n *\n * @param strTarget (1) --\n * @param strSub (2) --\n * @return RsuvResultTibo<RsuvT5>\n */\nexport function stringsTwoInfoB(strTarget: RsuvTxString, strSub: RsuvTxString): RsuvResultTibo<RsuvT5> {\n  // --- verify\n  const verif: RsuvResultBoolPknz = RsuvResultBoolPknz.successAllIsSugar([strTarget.bnuwIsValid(), strSub.bnuwIsValid()])\n  if (!verif.success) {\n    return RsuvResultTibo.fromPknz(verif)\n  }\n  // ---\n  const strTargetRaw = strTarget.val\n  const strSubRaw = strSub.val\n  // ---\n  const t5 = new RsuvT5()\n  // ---\n  if (strSubRaw.length > strTargetRaw.length) {\n    return new RsuvResultTibo({success: true, value: t5}); // <=== RETURN\n  }\n  // --- --- без учета регистра\n  const t4NoSens = new RsuvT4()\n  // --- full match\n  if (strTargetRaw.length === strSubRaw.length && strTargetRaw.toLowerCase() === strSubRaw.toLowerCase()) {\n    t4NoSens.rsuvT3.push(RSUV_T3.COMPLETE_MATCH)\n    t4NoSens.rsuvT3.push(RSUV_T3.STARTED)\n    t4NoSens.rsuvT3.push(RSUV_T3.ENDED)\n    t4NoSens.rsuvT3.push(RSUV_T3.CONTAINS)\n    t4NoSens.containsCount = 1\n    // ---\n    t4NoSens.containsIndexes.push(new RsuvT7(0, strSubRaw.length))\n  } else {\n    const indexes = substrIndexes(strTargetRaw, strSubRaw, true)\n    t4NoSens.containsIndexes = indexes\n    // -- contains\n    t4NoSens.containsCount = indexes.length\n    if (t4NoSens.containsCount > 0) {\n      t4NoSens.rsuvT3.push(RSUV_T3.CONTAINS)\n    }\n    // -- started\n    if (strTargetRaw.substring(0, strSubRaw.length).toLowerCase() === strSubRaw.toLowerCase()) {\n      t4NoSens.rsuvT3.push(RSUV_T3.STARTED)\n    }\n    // -- ended\n    if (strTargetRaw.substring(strTargetRaw.length - strSubRaw.length, strTargetRaw.length).toLowerCase() === strSubRaw.toLowerCase()) {\n      t4NoSens.rsuvT3.push(RSUV_T3.ENDED)\n    }\n  }\n  // --- --- с учетом регистра\n  const t4Sens = new RsuvT4()\n  if (strTargetRaw.length === strSubRaw.length && strTargetRaw === strSubRaw) {\n    t4Sens.rsuvT3.push(RSUV_T3.COMPLETE_MATCH)\n    t4Sens.rsuvT3.push(RSUV_T3.STARTED)\n    t4Sens.rsuvT3.push(RSUV_T3.ENDED)\n    t4Sens.rsuvT3.push(RSUV_T3.CONTAINS)\n    t4Sens.containsCount = 1\n    t4Sens.containsIndexes.push(new RsuvT7(0, strSubRaw.length))\n  } else {\n    const indexes2 = substrIndexes(strTargetRaw, strSubRaw, false)\n    t4Sens.containsIndexes = indexes2\n    t4Sens.containsCount = indexes2.length\n    if (t4Sens.containsCount > 0) {\n      t4Sens.rsuvT3.push(RSUV_T3.CONTAINS)\n    }\n    // -- started\n    if (strTargetRaw.substring(0, strSubRaw.length) === strSubRaw) {\n      t4Sens.rsuvT3.push(RSUV_T3.STARTED)\n    }\n    // -- ended\n    if (strTargetRaw.substring(strTargetRaw.length - strSubRaw.length, strTargetRaw.length) === strSubRaw) {\n      t4Sens.rsuvT3.push(RSUV_T3.ENDED)\n    }\n  }\n  // --- ---\n  t5.sensitive = t4Sens\n  t5.notSensitive = t4NoSens\n  // ---\n  return new RsuvResultTibo({success: true, value: t5})\n}\n\n/**\n * Предоставляет полную информацию о том как строка (2) соотносится со строкой (1), например содержит ли (1) подстроку\n * (2), начинается ли с неё, заканчивается ли ей, имеет ли с ней полное соответствие, на каких индексах начинается и\n * заканчивается подстрока (2) в строке (1). Вся эта информация проверяется для\n * двух варинатов - с учетом регистра и без учета регистра символов (3)\n * ID [[210801103621]] rev 1 1.0.0 2021-08-01\n * @param strTarget (1) --\n * @param strSub (2) --\n * @param ignoreCase (3) -- TRUE если нужно игнорировать регистр символов\n * @return RsuvResultTibo<RsuvT4>\n */\nexport function stringsTwoInfo(strTarget: RsuvTxString, strSub: RsuvTxString, ignoreCase: boolean = true): RsuvResultTibo<RsuvT4> {\n  // --- verify\n  const verif: RsuvResultBoolPknz = RsuvResultBoolPknz.successAllIsSugar([strTarget.bnuwIsValid(), strSub.bnuwIsValid()])\n  if (!verif.success) {\n    return RsuvResultTibo.fromPknz(verif)\n  }\n  // ---\n  const strTargetRaw = strTarget.val\n  const strSubRaw = strSub.val\n  // ---\n  let t4 = new RsuvT4();\n  if (strSubRaw.length > strTargetRaw.length) {\n    return new RsuvResultTibo({success: true, value: t4}); // <=== RETURN\n  }\n  // --- --- без учета регистра\n  if (ignoreCase) {\n    // --- full match\n    if (strTargetRaw.length === strSubRaw.length && strTargetRaw.toLowerCase() === strSubRaw.toLowerCase()) {\n      t4.rsuvT3.push(RSUV_T3.COMPLETE_MATCH)\n      t4.rsuvT3.push(RSUV_T3.STARTED)\n      t4.rsuvT3.push(RSUV_T3.ENDED)\n      t4.rsuvT3.push(RSUV_T3.CONTAINS)\n      t4.containsCount = 1\n      // ---\n      t4.containsIndexes.push(new RsuvT7(0, strSubRaw.length))\n    } else {\n      const indexes = substrIndexes(strTargetRaw, strSubRaw, true)\n      t4.containsIndexes = indexes\n      // -- contains\n      t4.containsCount = indexes.length\n      if (t4.containsCount > 0) {\n        t4.rsuvT3.push(RSUV_T3.CONTAINS)\n      }\n      // -- started\n      if (strTargetRaw.substring(0, strSubRaw.length).toLowerCase() === strSubRaw.toLowerCase()) {\n        t4.rsuvT3.push(RSUV_T3.STARTED)\n      }\n      // -- ended\n      if (strTargetRaw.substring(strTargetRaw.length - strSubRaw.length, strTargetRaw.length).toLowerCase() === strSubRaw.toLowerCase()) {\n        t4.rsuvT3.push(RSUV_T3.ENDED)\n      }\n    }\n  } else {\n    // --- --- с учетом регистра\n    if (strTargetRaw.length === strSubRaw.length && strTargetRaw === strSubRaw) {\n      t4.rsuvT3.push(RSUV_T3.COMPLETE_MATCH)\n      t4.rsuvT3.push(RSUV_T3.STARTED)\n      t4.rsuvT3.push(RSUV_T3.ENDED)\n      t4.rsuvT3.push(RSUV_T3.CONTAINS)\n      t4.containsCount = 1\n      t4.containsIndexes.push(new RsuvT7(0, strSubRaw.length))\n    } else {\n      const indexes2 = substrIndexes(strTargetRaw, strSubRaw, false)\n      t4.containsIndexes = indexes2\n      t4.containsCount = indexes2.length\n      if (t4.containsCount > 0) {\n        t4.rsuvT3.push(RSUV_T3.CONTAINS)\n      }\n      // -- started\n      if (strTargetRaw.substring(0, strSubRaw.length) === strSubRaw) {\n        t4.rsuvT3.push(RSUV_T3.STARTED)\n      }\n      // -- ended\n      if (strTargetRaw.substring(strTargetRaw.length - strSubRaw.length, strTargetRaw.length) === strSubRaw) {\n        t4.rsuvT3.push(RSUV_T3.ENDED)\n      }\n    }\n  }\n  // ---\n  return new RsuvResultTibo({success: true, value: t4})\n}\n\n/** \n * [[asau24]]\n * СМ. ТАКЖЕ: [asau22]\n */\nexport enum RSUV_T3 {\n  // target начинается с sub\n  STARTED = 'rsuv_t3_started',\n  // target заканчивается на sub\n  ENDED = 'rsuv_t3_ended',\n  // target содержит sub\n  CONTAINS = 'rsuv_t3_contains',\n  // target полностью совпадает с sub\n  COMPLETE_MATCH = 'rsuv_t3_complete_match'\n}\n\n/**\n * Учёт регистра символов\n */\nexport enum RSUV_T6_CASE {\n  SENSITIVE = 'rsuv_t6_case_sensitive',\n  NOT_SENSITIVE = 'rsuv_t6_not_case_sensitive'\n}\n\nexport class RsuvT4 {\n  // сколько раз sub встречается в target\n  containsCount: number = 0\n  containsIndexes: RsuvT7[] = []\n  rsuvT3: RSUV_T3[] = []\n}\n\nexport class RsuvT5 {\n  // информация для варианта \"чувствительно к регистру\"\n  sensitive: RsuvT4 = new RsuvT4()\n  // информация для варианта \"НЕ чувствительно к регистру\"\n  notSensitive: RsuvT4 = new RsuvT4()\n}\n\nexport class RsuvT7 {\n  constructor(public startIndex: number = 0, public endIndex: number = 0) {\n  }\n}\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxString } from './RsuvTxString';\n\n/**\n * Представляет строку которая: (не нулевой длины) И (не содержит пробелов/переносов)\n */\nexport class RsuvTxStringAA extends RsuvTxString {\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid();\n      if (!res.success) {\n        return res;\n      }\n      // ---\n      if (/\\s/.test(this.val)) {\n        return new RsuvResultBoolPknz(\n          false,\n          '[[210706092510]]',\n          'includes whitespace(s)'\n        );\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(\n        false,\n        '[[210706092135]]',\n        (err as Error).message\n      );\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxString } from './RsuvTxString';\n\n/**\n * Представляет строку которая: (не нулевой длины) И (состоит только из символов [a-zA-Z0-9_])\n * \n * ID [[1636807311]]\n * @implements RsuvBnuwNT\n */\nexport class RsuvTxStringAB extends RsuvTxString {\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid();\n      if (!res.success) {\n        return res;\n      }\n      // ---\n      if (!/^[a-zA-Z0-9_]+$/.test(this.val)) {\n        return new RsuvResultBoolPknz(\n          false,\n          '[[1636300398]]',\n          'allowable only [a-zA-Z0-9_] symbols'\n        );\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(\n        false,\n        '[[1636300404]]',\n        (err as Error).message\n      );\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxStringAB } from './RsuvTxStringAB';\n\n/**\n * Представляет строку которая: (не нулевой длины) И (состоит только из символов [a-zA-Z0-9_]) \n * И (начинается не с цифры)\n *\n * ID [[1636807220]]\n * @implements RsuvBnuwNT\n */\nexport class RsuvTxStringABB extends RsuvTxStringAB {\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid();\n      if (!res.success) {\n        return res;\n      }\n      // ---\n      if (/^[0-9]$/.test(this.val[0])) {\n        return new RsuvResultBoolPknz(\n          false,\n          '[[1636301354]]',\n          'first number is not allowable'\n        );\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(\n        false,\n        '[[1636301361]]',\n        (err as Error).message\n      );\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxStringAB } from './RsuvTxStringAB';\n\n/**\n * Представляет строку которая: (не нулевой длины) И (состоит только из символов [0-9] т.е. только из цифр)\n *\n * ID [[211210125644]]\n * @implements RsuvBnuwNT\n */\nexport class RsuvTxStringABC extends RsuvTxStringAB {\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid();\n      if (!res.success) {\n        return res;\n      }\n      // ---\n      if (!/^[0-9]+$/.test(this.val)) {\n        return new RsuvResultBoolPknz(\n          false,\n          '[[211210125801]]',\n          'only numbers allowable'\n        );\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(\n        false,\n        '[[211210125818]]',\n        (err as Error).message\n      );\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","import dayjs from 'dayjs';\nimport _ from 'lodash';\n\n/*\nПОНЯТИЯ:\n-- [yata] - {number} милисекунды с 01.01.1970\n-- [eavv] - {number} секунды с 01.01.1970\n-- [necz] - {string} [yata] в виде строки\n-- [tafb] - {string} [eavv] в виде строки\n-- [rvuo] - {string} формат YYYY-MM-DDTHH:mm, например '2021-12-12T12:04'\n */\n\nexport enum DATETIME {\n  YATA = 'yata',\n  NECZ = 'necz',\n  RVUO = 'rvuo'\n}\n\nexport class ResultAsau36<T> {\n  constructor(public success: boolean, public value: T, public code: number) {\n  }\n}\n\n// export function convert(from: DATETIME, to: DATETIME, fromVal: any): ResultAsau36<any> {\n//   if (!from) {\n//     return new ResultAsau36(false, null, 1)\n//   }\n//   if (!to) {\n//     return new ResultAsau36(false, null, 2)\n//   }\n//   if (!fromVal) {\n//     return new ResultAsau36(false, null, 3)\n//   }\n//\n// }\n\n/**\n * Преобразование формата [yata] (1) в формат [rvuo].\n * @param yata {number} (1) -- [yata], например 1637347161129\n * @return null если (1) не finite-число\n */\nexport function rvuoFromYata(yata: number | any): string | null {\n  if (!yataIs(yata)) {\n    return null\n  }\n  return dayjs(yata).format('YYYY-MM-DDTHH:mm');\n}\n\nexport function yataFromRvuo(rvuo: string | any): ResultAsau36<number> {\n  if (!_.isString(rvuo)) {\n    return new ResultAsau36<number>(false, 0, 2)\n  }\n  const necz = rvuoIs(rvuo)\n  if (necz) {\n    const yata = _.toInteger(necz)\n    return new ResultAsau36<number>(true, yata, 0)\n  }\n  return new ResultAsau36<number>(false, 0, 1)\n}\n\nexport function yataIs(yata: number | any): boolean {\n  if (!_.isFinite(yata)) {\n    return false;\n  }\n  return true;\n}\n\nexport function yataFromEavv(eavv: number | any): ResultAsau36<number> {\n  if (!eavvIs(eavv)) {\n    return new ResultAsau36<number>(false, 0, 1)\n  }\n  const yata = eavv * 1000;\n  return new ResultAsau36<number>(true, yata, 0)\n}\n\n/**\n * Возвращает {success: true, value: true, ...} если дата (1) не достигла даты (2) (т.е. меньше даты (2))\n * @param yata (1) -- [yata]\n * @param yataExpire (2) -- [yata]\n */\nexport function yataIsActual(yata: number | any, yataExpire: number | any): ResultAsau36<boolean> {\n  if (!yataIs(yata)) {\n    return new ResultAsau36<boolean>(false, false, 1)\n  }\n  if (!yataIs(yataExpire)) {\n    return new ResultAsau36<boolean>(false, false, 2)\n  }\n  if (yata > yataExpire) {\n    return new ResultAsau36<boolean>(true, false, 0)\n  }\n  return new ResultAsau36<boolean>(true, true, 0)\n}\n\nexport function eavvIs(eavv: number | any): boolean {\n  if (!_.isFinite(eavv)) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Возвращает [necz] ([yata] как строка) от (1) если (1) это валидный [rvuo], иначе возвращает null\n * @param rvuo (1) -- [rvuo], например '2021-12-10T12:04'\n */\nexport function rvuoIs(rvuo: string | any): string | null {\n  if (!_.isString(rvuo)) {\n    return null\n  }\n  const ex = /^(\\d\\d\\d\\d+)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d)$/.exec(rvuo)\n  if (ex) {\n    const month = Number(ex[2])\n    const day = Number(ex[3])\n    const hour = Number(ex[4])\n    const minute = Number(ex[5])\n    if (month < 1 || month > 12) {\n      return null\n    }\n    if (day < 1 || day > 31) {\n      return null\n    }\n    if (hour < 0 && hour > 24) {\n      return null\n    }\n    if (minute < 0 && minute > 59) {\n      return null\n    }\n  }\n  // ---\n  const day = dayjs(rvuo)\n  const yata = day.toDate().getTime()\n  if (!_.isFinite(yata)) {\n    return null;\n  }\n  return yata + '';\n}\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxString } from './RsuvTxString';\nimport { isEmptyOrWhitespaces } from './RsuvTuString';\n\n/**\n * Представляет строку которая: (не нулевой длины) И (не состоит из одних пробелов/переносов)\n */\nexport class RsuvTxStringB extends RsuvTxString {\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid();\n      if (!res.success) {\n        return res;\n      }\n      // ---\n      if (isEmptyOrWhitespaces(this.val)) {\n        return new RsuvResultBoolPknz(\n          false,\n          '[[210705191242]]',\n          'contains only whitespaces'\n        );\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(\n        false,\n        '[[210705190613]]',\n        (err as Error).message\n      );\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","import { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxStringB } from './RsuvTxStringB';\n\n/**\n * Представляет строку которая: (не нулевой длины) И (не состоит из одних пробелов/переносов) И (не начинается с пробела/переноса)\n * И (не заканчивается пробелом/переносом)\n */\nexport class RsuvTxStringC extends RsuvTxStringB {\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid();\n      if (!res.success) {\n        return res;\n      }\n      // ---\n      if (/^\\s/.test(this.val)) {\n        return new RsuvResultBoolPknz(\n          false,\n          '[[210705191717]]',\n          'started with whitespace'\n        );\n      }\n      if (/\\s$/.test(this.val)) {\n        return new RsuvResultBoolPknz(\n          false,\n          '[[210705191826]]',\n          'ended with whitespace'\n        );\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(\n        false,\n        '[[210705191508]]',\n        (err as Error)?.message\n      );\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","/**\n * [[asau22]]\n * КЛЮЧЕВЫЕ СЛОВА: поиск, строка\n * СМ ТАКЖЕ: [asau24]\n */\nexport enum RsuvSearchMode {\n  /** строгое равенство */\n  EQUAL_STRICT = 'equal_strict_asau22',\n  /**содержит */\n  CONTAINS = 'contains_asau22',\n  /** начинается с */\n  START_WITH = 'start_with_asau22',\n  /** заканчивается на */\n  END_WITH = 'end_with_asau22',\n}\n","import { RsuvTxStringAA } from './RsuvTxStringAA';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport EmailValidator from 'email-validator';\n\nexport class RsuvTxEmail extends RsuvTxStringAA {\n  bnuwIsValid(): RsuvResultBoolPknz {\n    const resV = EmailValidator.validate(this.val)\n    if(!resV) {\n      return new RsuvResultBoolPknz(false, '[[210706113857]]', 'EmailValidator')\n    }\n\n    // const resValid = super.bnuwIsValid();\n    // if (!resValid.success) {\n    //   return resValid;\n    // }\n    // // ---\n    // const b1 = new RegExp(\n    //   /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g,\n    // ).test(this.val)\n    // if (!b1) {\n    //   return new RsuvResultBoolPknz(false, '[[210706105956]]', 'is not email');\n    // }\n    // const splited = this.val.split('@');\n    // if (splited.length > 2) {\n    //   return new RsuvResultBoolPknz(false, '[[210706112944]]', 'only one @ allowed');\n    // }\n    // if(splited[0].length > 64) {\n    //   return new RsuvResultBoolPknz(false, '[[210706113459]]', 'local-part is > 64 length');\n    // }\n    return new RsuvResultBoolPknz(true)\n  }\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/*\n[[zrnx]]\n */\n\n/**\n * [[rkyr]]\n */\nimport { RsuvDataSourceAecrNT } from './RsuvDataSourceAecrNT';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvPaginationGyth } from './RsuvPaginationGyth';\n\n/**\n * @class\n */\nexport class RsuvZrnxSubData<T> {\n\n  /** @constructor */\n  constructor(\n    /**\n     * номер страницы\n     */\n    public page: number = 0,\n    /**\n     * общее количество страниц\n     */\n    public pageCount: number = 1,\n    /**\n     * общее количество элементов\n     */\n    public elemsAllCount: number = 0,\n    /**\n     * коллекция элементов страницы\n     */\n    public elemsOfPage: T[] = []\n  ) {\n  }\n}\n\n/**\n * [[zrnx]]\n *\n * Сущность для использования в качестве посредника между абстрактным источником-данных (интерефейс\n * {@link RsuvDataSourceAecrNT}) и UI-списком-с-пагинацией.\n *\n * При вызове {@link make} делаются обращения к {@link dataSource} и на базе полученных данных вычисляются поля {@link page}\n * {@link elemsAllCount}, {@link elemsOfPage}, {@link pageCount}. Эти поля можно получить с помощью метода {@link dataGet}\n * в виде типа {@link RsuvZrnxSubData} для последующего использования в качестве входных данных для UI-списка-с-пагинацией\n * \n * @class\n */\nexport class RsuvAdapterZrnx<T> {\n  private page: number = 0\n  private elemsAllCount: number = 0\n  private elemsOfPage: T[] = []\n  private pageCount: number = 0\n\n  /**\n   * @constructor\n   * @param perPage (1) -- число-записей-на-странице, 1+\n   * @param dataSource (2) -- источник-данных\n   */\n  constructor(readonly perPage: number, readonly dataSource: RsuvDataSourceAecrNT<T>) {\n  }\n\n  /**\n   * Запрос данных и вычисление полей текущего объекта\n   *\n   * @async\n   * @param pageNum (1) -- номер страницы\n   * @param last (2) -- если TRUE, то (1) игнирируется и вычисление выполняется для последней страницы\n   */\n  async make(pageNum: number, last: boolean = false): Promise<RsuvResultBoolPknz> {\n    const elemsCount = await this.dataSource.elemsAllCountGet();\n    // ---\n    const rmPagination = new RsuvPaginationGyth(elemsCount, this.perPage);\n    const pageCount = rmPagination.pageCount\n    if (last) {\n      this.page = pageCount\n    } else {\n      this.page = pageCount < pageNum ? pageCount : pageNum;\n    }\n    this.elemsAllCount = elemsCount\n    this.pageCount = pageCount\n    // ---\n    const {indexStart, indexLast} = rmPagination.indexesByPageNum(this.page)\n    this.elemsOfPage = await this.dataSource.elemsGet(indexStart, indexLast - indexStart + 1)\n    // ---\n    return new RsuvResultBoolPknz() // TODO нужно продумать по части ошибок\n  }\n\n  /**\n   * Получение результатов вычислений\n   */\n  dataGet(): RsuvZrnxSubData<T> {\n    return new RsuvZrnxSubData<T>(this.page, this.pageCount, this.elemsAllCount, this.elemsOfPage)\n  }\n\n}\n\n\n","/*\n * Представляет boolean\n */\n\nimport { RsuvBnuwNT } from './RsuvBnuwNT';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport _ from 'lodash';\n\nexport class RsuvTxBoolean implements RsuvBnuwNT {\n  constructor(public val: boolean) {\n\n  }\n\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      if (!_.isBoolean(this.val)) {\n        return new RsuvResultBoolPknz(false, '[[210711220826]]', 'is not boolean')\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(false, '[[210705185560]]', (err as Error).message)\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","/*\nСущности для работы с checked-списками (списки хранящие информацию о том какой элемент чекнут, какой нет)\n\n[[ecxm]] - массив из [gnpw]-объектов или пустой массив\n[[gnpw]] - объект вида {id: string, checked: boolean}\n */\n\nimport { RsuvBnuwNT } from './RsuvBnuwNT';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { bnuwUtilsVerifyMulti } from './RsuvBnuwUtils';\nimport { RsuvTxBoolean } from './RsuvTxBoolean';\nimport { RsuvTxStringAA } from './RsuvTxStringAA';\n\n/**\n * Вместо этого типа нужно передавать тип UnwrapRef<RsuvCheckModelGnpw[]>, т.е. value из ref сделанного на RsuvCheckModelGnpw[]\n * <code lang=\"js\">\n *   ref([new RsuvCheckModelGnpw('1', false)]).value\n * </code>\n */\nexport type RsuvT1 = any[]\n\nexport class RsuvEcxm {\n  static find(models: RsuvT1, id: string) {\n    return models.find((model: RsuvCheckModelGnpw) => model.id === id);\n  }\n\n  /**\n   * Добавляет новый элемент (2) в конец (1)\n   * @param modelsBack (1) --\n   * @param model\n   */\n  static append(modelsBack: RsuvT1, model: RsuvCheckModelGnpw): RsuvResultBoolPknz {\n    const fModel = RsuvEcxm.find(modelsBack, model.id);\n    if (fModel) {\n      return new RsuvResultBoolPknz(false, '[[210712155908]]', 'already exist');\n    }\n    modelsBack.push(model);\n    return new RsuvResultBoolPknz(true);\n  }\n\n  static appendMulti(modelsBack: RsuvT1, models: RsuvCheckModelGnpw[]): RsuvResultBoolPknz[] {\n    const ret: RsuvResultBoolPknz[] = [];\n    models.forEach(model => {\n      const res = RsuvEcxm.append(modelsBack, model);\n      if (!res.success) {\n        ret.push(res);\n      }\n    });\n    return ret;\n  }\n\n  static update(modelsBack: RsuvT1, model: RsuvCheckModelGnpw): RsuvResultBoolPknz {\n    const elem = RsuvEcxm.find(modelsBack, model.id);\n    if (elem) {\n      elem.checked = model.checked;\n      return new RsuvResultBoolPknz(true);\n    }\n    return new RsuvResultBoolPknz(false, '[[210712160222]]', 'not finded');\n  }\n\n  static updateMulti(modelsBack: RsuvT1, models: RsuvCheckModelGnpw[]): RsuvResultBoolPknz[] {\n    const ret: RsuvResultBoolPknz[] = [];\n    models.forEach(model => {\n      const res = RsuvEcxm.update(modelsBack, model);\n      if (!res.success) {\n        ret.push(res);\n      }\n    });\n    return ret;\n  }\n\n  static delete(modelsBack: RsuvT1, model: RsuvCheckModelGnpw): RsuvResultBoolPknz {\n    const index = modelsBack.findIndex((elModel: RsuvCheckModelGnpw) => elModel.id === model.id);\n    if (index !== -1) {\n      modelsBack.splice(index, 1);\n      return new RsuvResultBoolPknz(true);\n    }\n    return new RsuvResultBoolPknz(false, '[[210712160441]]', 'not finded');\n  }\n\n  static deleteMulti(modelsBack: RsuvT1, models: RsuvCheckModelGnpw[]): RsuvResultBoolPknz[] {\n    const ret: RsuvResultBoolPknz[] = [];\n    models.forEach(model => {\n      const res = RsuvEcxm.delete(modelsBack, model);\n      if (!res.success) {\n        ret.push(res);\n      }\n    });\n    return ret;\n  }\n\n  static filter(models: RsuvT1, checked: boolean) {\n    return models.filter((elModel: RsuvCheckModelGnpw) => elModel.checked === checked);\n  }\n\n  static inverse(modelsBack: RsuvT1) {\n    modelsBack.forEach((elModel: RsuvCheckModelGnpw) => elModel.checked = !elModel.checked);\n  }\n\n  static selectAll(modelsBack: RsuvT1) {\n    modelsBack.forEach((elModel: RsuvCheckModelGnpw) => {\n      if (!elModel.checked) {\n        elModel.checked = true;\n      }\n    })\n  }\n\n  static deselectAll(modelsBack: RsuvT1) {\n    modelsBack.forEach((elModel: RsuvCheckModelGnpw) => {\n      if (elModel.checked) {\n        elModel.checked = false;\n      }\n    })\n  }\n}\n\n\n/**\n * Представление [gnpw]\n */\nexport class RsuvCheckModelGnpw implements RsuvBnuwNT {\n\n  constructor(public id: string = '', public checked: boolean = false) {\n  }\n\n  bnuwIsValid(): RsuvResultBoolPknz {\n    const res = bnuwUtilsVerifyMulti([new RsuvTxStringAA(this.id), new RsuvTxBoolean(this.checked)])\n    if (res.length > 0) {\n      return res[0]\n    }\n    return new RsuvResultBoolPknz(true)\n  }\n}\n","import { RsuvBnuwNT } from './RsuvBnuwNT';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\n\nexport const bnuwUtilsVerify = (value: RsuvBnuwNT | any): RsuvResultBoolPknz => {\n  if (!value) {\n    return new RsuvResultBoolPknz(false, '[[210711215605]]', 'value is falsy')\n  }\n  const res = (value as RsuvBnuwNT).bnuwIsValid();\n  if (!res) {\n    return new RsuvResultBoolPknz(false, '[[210711215805]]', 'invalid value')\n  }\n  return res;\n}\n\n/**\n * Если возвращает пустой массив, значит все элементы (1) валидные, иначе в массиве результы неудачных проверок\n * @param values (1) -- элементы для проверки; пустой массив не валиден\n */\nexport const bnuwUtilsVerifyMulti = (values: any[]): RsuvResultBoolPknz[] => {\n  if (Array.isArray(values) && values.length > 0) {\n    const ret: RsuvResultBoolPknz[] = [];\n    values.forEach((el) => {\n      const verif = bnuwUtilsVerify(el)\n      if (!verif.success) {\n        ret.push(verif)\n      }\n    })\n    return ret;\n  }\n  return [new RsuvResultBoolPknz(false, '[[210711221552]]')]\n}\n","/**\n * -- success - TRUE означает успешный результат\n * -- codeNum - любое положительное число означает ошибку, -1 означает неопределённый результат, значение\n * меньшее -1 означает код успешного результата\n */\nexport class RsuvResultAsau11 {\n  success: boolean = false\n  codeNum: number = 0\n\n  constructor(codeNum = -1, success: boolean = false) {\n    this.success = success\n    this.codeNum = codeNum\n  }\n}\n","import _ from 'lodash';\nimport { RsuvResultAsau11 } from './RsuvResultAsau11';\n\n/**\n * Утилитные статические методы для работы с массивами\n */\nexport class RsuvTuArray {\n\n  /**\n   * Удаляет элемент по индексу (2)\n   * @param arrBack\n   * @param index\n   * @return RsuvResultAsau11\n   */\n  static elemDelete(arrBack: Array<any>, index: number): RsuvResultAsau11 {\n    if (!RsuvTuArray.fnArrValidIs(arrBack)) return new RsuvResultAsau11(1)\n    if (!RsuvTuArray.fnIndexValidIs(arrBack, index)) return new RsuvResultAsau11(2)\n    arrBack.splice(index, 1)\n    return new RsuvResultAsau11(0, true)\n  }\n\n  /**\n   * Добавляет элемент (3) по индексу (2), существующие элементы сдвигаются. Если нужно добавить в самый конец,\n   * указать индекс (2) равный длине массива (1)\n   * @param arrBack (1) -- массив, мутируется, например [1, 2, 3]\n   * @param index (2) -- например 1\n   * @param elem (3) -- например 's'\n   * @return RsuvResultAsau11 ..., (1) например [1, 's',  2, 3]\n   */\n  static elemAdd(arrBack: Array<any>, index: number, elem: any): RsuvResultAsau11 {\n    if (!RsuvTuArray.fnArrValidIs(arrBack)) return new RsuvResultAsau11(1)\n    if (!RsuvTuArray.fnIndexValidIsB(arrBack, index)) return new RsuvResultAsau11(2)\n    arrBack.splice(index, 0, elem)\n    return new RsuvResultAsau11(0, true)\n  }\n\n  /**\n   * В массиве (1) перемещает элемент с индекса (2) на индекс (3)\n   * @param arrBack {any[]} (1) -- массив, мутируется\n   * @param indexFrom {number} (2) --\n   * @param indexTo {number} (3) --\n   * @return RsuvResultAsau11\n   */\n  static elemMove(arrBack: Array<any>, indexFrom: number, indexTo: number): RsuvResultAsau11 {\n    if (!RsuvTuArray.fnArrValidIs(arrBack)) return new RsuvResultAsau11(1)\n    if (!RsuvTuArray.fnIndexValidIs(arrBack, indexFrom)) return new RsuvResultAsau11(2)\n    if (!RsuvTuArray.fnIndexValidIs(arrBack, indexTo)) return new RsuvResultAsau11(3)\n    if (indexFrom === indexTo) {\n      return new RsuvResultAsau11(0, true)\n    }\n    // ---\n    const el = arrBack.splice(indexFrom, 1)\n    arrBack.splice(indexTo, 0, el[0])\n    return new RsuvResultAsau11(0, true)\n  }\n\n  /**\n   * Меняет местами элементы (2) и (3)\n   * @param arrBack (1) -- массив, мутируется\n   * @param index1 (2) --\n   * @param index2 (3) --\n   * @return RsuvResultAsau11\n   */\n  static elemsSwap(arrBack: Array<any>, index1: number, index2: number): RsuvResultAsau11 {\n    if (!RsuvTuArray.fnArrValidIs(arrBack)) return new RsuvResultAsau11(1)\n    if (!RsuvTuArray.fnIndexValidIs(arrBack, index1)) return new RsuvResultAsau11(2)\n    if (!RsuvTuArray.fnIndexValidIs(arrBack, index2)) return new RsuvResultAsau11(3)\n    if (index1 === index2) {\n      return new RsuvResultAsau11(0, true)\n    }\n    // ---\n    const a = arrBack[index1]\n    arrBack[index1] = arrBack[index2]\n    arrBack[index2] = a\n    return new RsuvResultAsau11(0, true)\n  }\n\n  /**\n   * Заменяет значением (2), первый элемент (1) удовлетворяющий предикату (3).\n   * Неудачей считаются (среди прочего): пустой массив (1), если предикат (3) не функция\n   * @param arrBack (1) -- массив, мутируется\n   * @param value (2) -- новое значение\n   * @param predicate (3) -- вызывается для каждого элемента (1); аргументы - первый это сам элемент, второй это\n   * индекс этого элемента\n   */\n  static elemUpdate(arrBack: Array<any>, value: any, predicate: (elem: any, index: number) => boolean) {\n    if (!RsuvTuArray.fnArrValidIs(arrBack)) return new RsuvResultAsau11(1)\n    if (!_.isFunction(predicate)) {\n      return new RsuvResultAsau11(2)\n    }\n    if (arrBack.length < 1) {\n      return new RsuvResultAsau11(3)\n    }\n    const ix = arrBack.findIndex((el, index) => predicate(el, index))\n    if (ix === -1) {\n      return new RsuvResultAsau11(4)\n    }\n    arrBack[ix] = value;\n    return new RsuvResultAsau11(0, true)\n  }\n\n  static fnIndexValidIs(arr: Array<any>, index: number) {\n    if (index < 0) {\n      return false\n    }\n    return index <= (arr.length - 1);\n  }\n\n  static fnIndexValidIsB(arr: Array<any>, index: number) {\n    if (index < 0) {\n      return false\n    }\n    return index <= (arr.length);\n  }\n\n  static fnArrValidIs(arr: Array<any>) {\n    return !!_.isArray(arr);\n  }\n}\n","import toInteger from 'lodash/toInteger';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { substrCountB } from './RsuvTuString';\nimport { RsuvResultCountAndData } from './RsuvResultCountAndData';\nimport { RsuvResultTibo } from './RsuvResultTibo';\n\n/*\n-- [[ntxe]] - фильтр, например 'id=1&id=2' или 'json-server&author=typicode'.\n          Тут & работает как ИЛИ, т.е. для 'id=1&id=2' вернутся две записи (если они существуют с такими id)\n\n */\n\n/**\n * [[ktvg]]\n *\n * Утилита для запросав к json-server (https://github.com/typicode/json-server)\n */\nexport class RsuvTxJsonServer {\n\n  private readonly path: string;\n\n  /**\n   *\n   * @param basePath (1) -- expample 'http://localhost:21884/'\n   * @param collectionName (2) -- example 'products'\n   */\n  constructor(readonly basePath: string, readonly collectionName: string) {\n    this.path = `${this.basePath}${this.collectionName}`;\n  }\n\n  async elemsCountGetAll(): Promise<number> {\n    const resp = await fetch(`${this.path}?_limit=1`);\n    const countSt = resp.headers.get('x-total-count');\n    return toInteger(countSt);\n  }\n\n  async elemsGetAll() {\n    const resp = await fetch(this.path);\n    return resp.json();\n  }\n\n  /**\n   * см. также функцию elemsGetPage()\n   * @param offset (1) -- сколько элементов пропустить, с начала\n   * @param limit (2) -- сколько элементов взять после пропуска\n   */\n  async elemsGet(offset: number, limit: number) {\n    const resp = await fetch(`${this.path}?_start=${offset}&_limit=${limit}`);\n    return resp.json();\n  }\n\n  /**\n   * Другой вариант функции elemsGet()\n   * @param pageNum (1) -- номер страницы, 1+\n   * @param limit (2) -- количество элементов на странице\n   */\n  async elemsGetPage(pageNum: number, limit: number) {\n    const resp = await fetch(`${this.path}?_page=${pageNum}&_limit=${limit}`);\n    return resp.json();\n  }\n\n  /**\n   * Возвращает все записи удовлетворяющие [ntxe]-фильтру (1)\n   * @param filter (1) -- см. [ntxe]\n   */\n  async elemsGetByFilter(filter: string) {\n    const resp = await fetch(`${this.path}?${filter}`);\n    return resp.json();\n  }\n\n  /**\n   * Отбор записей у которых в поле (1) значение содержит подстроку (2) (без учета регистра символов).\n   * Из всех возможных результатов, отбрасываются первые (3) и из оставшихся берутся первые (4)\n   *\n   * @param fieldName (1) --\n   * @param substring (2) --\n   * @param offset (3) --\n   * @param limit (4) --\n   */\n  async elemsGetByFilterB(fieldName: string, substring: string, offset: number, limit: number) {\n    const elems = await this.elemsGetAll()\n    const elemsFiltered = elems.filter((elem: any) => {\n      return substrCountB(elem[fieldName], substring) > 0\n    })\n    return elemsFiltered.slice(offset, offset + limit)\n  }\n\n  /**\n   * Отличается от BA только тем что (3) это не offset а pageNumber\n   *\n   * Отбор записей у которых в поле (1) значение содержит подстроку (2) (без учета регистра символов).\n   * Из всех возможных результатов, берётся страница (3), (4) определяет число элементов на странице\n   *\n   * @param fieldName (1) --\n   * @param substring (2) --\n   * @param pageNumber (3) -- 1+\n   * @param limit (4) --\n   */\n  async elemsGetByFilterBB(fieldName: string, substring: string, pageNumber: number, limit: number) {\n    this.elemsGetByFilterB(fieldName, substring, (pageNumber - 1) * limit, limit)\n  }\n\n  /**\n   * Отличается от B тем что возвращает более развёрнутый ответ\n   *\n   * @param fieldName (1) --\n   * @param substring (2) --\n   * @param offset (3) --\n   * @param limit (4) --\n   * @return RsuvResultCountAndData где\n   * countAll - количество элементов удовлетворяющих фильтру (1)(2) без учета (3)(4),\n   * data - сами элементы удовлетворяющие (1)-(4),\n   * hasNext - TRUE если возвращены НЕ все данные удовлетворяющие фильтру (1)(2)\n   */\n  async elemsGetByFilterC<T>(fieldName: string, substring: string, offset: number, limit: number): Promise<RsuvResultCountAndData<T>> {\n    const elems = await this.elemsGetAll();\n    const elemsFiltered = elems.filter((elem: any) => {\n      return substrCountB(elem[fieldName], substring) > 0;\n    })\n    const elemsFilteredSliced = elemsFiltered.slice(offset, offset + limit);\n    return {\n      countAll: elemsFiltered.length,\n      data: elemsFilteredSliced,\n      hasNext: offset + limit < elemsFiltered.length\n    } as RsuvResultCountAndData<T>\n  }\n\n  /**\n   * Отличается от CA только параметром (3)\n   *\n   * @param fieldName (1) --\n   * @param substring (2) --\n   * @param pageNumber (3) -- 1+\n   * @param limit (4) --\n   */\n  async elemsGetByFilterCB<T>(fieldName: string, substring: string, pageNumber: number, limit: number): Promise<RsuvResultCountAndData<T>> {\n    return this.elemsGetByFilterC(fieldName, substring, (pageNumber - 1) * limit, limit);\n  }\n\n  async elemDelete(id: string | number): Promise<RsuvResultBoolPknz> {\n    const ret = await fetch(`${this.path}/${id}`, {\n      method: 'DELETE'\n    })\n    if (ret.status !== 200) {\n      return new RsuvResultBoolPknz(false, '210315153800', `err*: id not found; id [${id}]; ret.status [${ret.status}]`)\n    }\n    return new RsuvResultBoolPknz();\n  }\n\n  async elemsDelete(ids: string[] | number []): Promise<RsuvResultBoolPknz[]> {\n    const ret = [];\n    for (const id of ids) {\n      const res = await this.elemDelete(id);\n      ret.push(res);\n    }\n    return ret;\n  }\n\n  /**\n   *\n   * @param filter (1) -- см. [ntxe]\n   */\n  async elemsDeleteByFilter(filter: string): Promise<RsuvResultBoolPknz[]> {\n    const elems = await this.elemsGetByFilter(filter)\n    return await this.elemsDelete(elems.map((el: any) => el.id))\n  }\n\n  async elemCreate(data: object): Promise<RsuvResultBoolPknz> {\n    const res = await fetch(`${this.path}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    // ---\n    if (res.status === 201) {\n      return new RsuvResultBoolPknz()\n    }\n    return new RsuvResultBoolPknz(false, '210316120200', `err*: not created; status [${res.status}] url [${res.url}]`)\n  }\n\n  /**\n   * Отличается от А тем что возвращает также информацию об ID созданного элемента (в поле 'value' в виде строки)\n   * @param data (1) -- объект без поля 'id'\n   * @return\n   */\n  async elemCreateB(data: object): Promise<RsuvResultTibo<string>> {\n    const res = await fetch(`${this.path}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    // ---\n    if (res.status === 201) {\n      const createdElem = await res.json()\n      return new RsuvResultTibo({success: true, value: createdElem.id + ''})\n    }\n    return new RsuvResultTibo({success: false, errCode: res.status + '', errMessage: res.url})\n  }\n\n  async elemUpdate(data: any): Promise<RsuvResultBoolPknz> {\n    const res = await fetch(`${this.path}/${data.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    if (res.status === 200) {\n      return new RsuvResultBoolPknz()\n    }\n    return new RsuvResultBoolPknz(false, '210318111500', `err*: not updated; status [${res.status}] url [${res.url}]`)\n  }\n}\n","import _ from 'lodash';\nimport { RsuvBnuwNT } from '.';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\n\n/**\n * Представляет целое число, положительное, отрицательное, ноль, но не дробное, NaN, Infinity и т.п.\n */\nexport class RsuvTxNumInt implements RsuvBnuwNT {\n  constructor(public val: number) {}\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      if (!this.val && this.val !== 0) {\n        return new RsuvResultBoolPknz(false, '[[1636272243]]', 'is falsy');\n      }\n      if (!_.isFinite(this.val)) {\n        return new RsuvResultBoolPknz(false, '[[1636272327]]', 'is not number');\n      }\n      if (!_.isSafeInteger(this.val)) {\n        return new RsuvResultBoolPknz(\n          false,\n          '[[1636272328]]',\n          'is not integer'\n        );\n      }\n    } catch (error) {\n      return new RsuvResultBoolPknz(\n        false,\n        '[[1636279573]]',\n        (error as Error).message\n      );\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","import _ from 'lodash';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxNumInt } from './RsuvTxNumInt';\n\n/**\n * Представляет целое число большее нуля или равное нулю\n */\nexport class RsuvTxNumIntAB extends RsuvTxNumInt {\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid();\n      if (!res.success) {\n        return res;\n      }\n      // ---\n      if (this.val < 0) {\n        return new RsuvResultBoolPknz(false, '[[1636279844]]', 'number is < 0');\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(\n        false,\n        '[[1636279706]]',\n        (err as Error).message\n      );\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","import _ from 'lodash';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxNumIntAB } from './RsuvTxNumIntAB';\n\n/**\n * Представляет целое число большее нуля\n */\nexport class RsuvTxNumIntABB extends RsuvTxNumIntAB {\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid();\n      if (!res.success) {\n        return res;\n      }\n      // ---\n      if (this.val === 0) {\n        return new RsuvResultBoolPknz(\n          false,\n          '[[1636280020]]',\n          'number is === 0'\n        );\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(\n        false,\n        '[[1636280025]]',\n        (err as Error).message\n      );\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","import _ from 'lodash';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvTxNumInt } from './RsuvTxNumInt';\n\n/**\n * Представляет целое число большее нуля, или равное нулю или равное -1\n */\nexport class RsuvTxNumIntAC extends RsuvTxNumInt {\n  bnuwIsValid(): RsuvResultBoolPknz {\n    try {\n      const res = super.bnuwIsValid();\n      if (!res.success) {\n        return res;\n      }\n      // ---\n      if (this.val < -1) {\n        return new RsuvResultBoolPknz(\n          false,\n          '[[1636280874]]',\n          'number is < -1'\n        );\n      }\n    } catch (err) {\n      return new RsuvResultBoolPknz(\n        false,\n        '[[1636280879]]',\n        (err as Error).message\n      );\n    }\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","import { RsuvTxStringABB } from \"./RsuvTxStringABB\";\n\n/**\n * Представляет типовой \"ключ\", \"имя поля\", \"имя столбца таблицы БД\" и т.п.,\n * т.е. это строка состоящая только из символов [a-zA-Z0-9_] и начинающаяся \n * не с цифры\n * \n * ID [[1636807194]]\n * \n * @implements RsuvBnuwNT\n * @extends RsuvTxStringABB\n * @extends RsuvTxStringAB\n * @extends RsuvTxString\n */\nexport class RsuvTxFieldName extends RsuvTxStringABB {\n}\n","import { RsuvBnuwNT } from '.';\nimport { RsuvEnCaseSensitive } from './RsuvEnCaseSensitive';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\nimport { RsuvSearchMode } from './RsuvSearchMode';\n\n/**\n * ID: [[asau23]]\n * Сущность для указания как искать.\n * КЛЮЧЕВЫЕ СЛОВА: поиск\n */\nexport class RsuvSearchHow implements RsuvBnuwNT {\n  constructor(\n    public searchMode: RsuvSearchMode = RsuvSearchMode.CONTAINS,\n    /** учитывать ли регистр символов при поиске */\n    public isCaseSensitive: RsuvEnCaseSensitive\n  ) {}\n\n  bnuwIsValid(): RsuvResultBoolPknz {\n    return new RsuvResultBoolPknz(true);\n  }\n}\n","/**\n* ID [[asau26]]\n*/\nexport enum RsuvEnCaseSensitive {\n  CASE_SENSITIVE_TRUE = 'case_sensitive_true_asau26',\n  CASE_SENSITIVE_FALSE = 'case_sensitive_false_asau26',\n}","/**\n * ID [[asau27]]\n * Обозначения основных типов данных, например использующихся в базах данных\n */\nexport enum RsuvEnDataTypes {\n  /**\n   * строка\n   */\n  TEXT = 'text_asau27',\n  /**\n   * целое число, положительное или отрицательное, в том числе ноль\n   */\n  INT = 'int_asau27',\n  /**\n   * число дробное, с плавающей запятой\n   */\n  FLOAT = 'real_asau27'\n}\n","/**\n * Представление направления сортировки\n */\nexport enum RsuvEnSort {\n  /** по возрастанию */\n  ASC = 'asc',\n  /** по убыванию */\n  DESC = 'desc',\n  /** не определено */\n  UNDEF = 'undef'\n}\n","import {\n  RsuvBnuwNT,\n  RsuvEnDataTypes,\n  RsuvSearchHow,\n  RsuvTxFieldName,\n  RsuvTxString,\n} from '.';\nimport { RsuvResultBoolPknz } from './RsuvResultBoolPknz';\n\n/**\n * ID [[1636803407]]\n *\n * Представление единичного элемента поиска \"ключ/значение\"\n *\n * @param fieldName (1) -- имя поля (ключ) в котором нужно искать значение (3)\n * @param searchHow (2) -- указания как искать совпадение\n * @param value: (3) -- значение. Вне зависимости какой это тип значения (4), тут должна быть строка\n * @param valueType (4) -- тип значения (3)\n */\nexport class RsuvSearchElem implements RsuvBnuwNT {\n  constructor(\n    public fieldName: RsuvTxFieldName,\n    public searchHow: RsuvSearchHow,\n    public value: RsuvTxString,\n    public valueType: RsuvEnDataTypes = RsuvEnDataTypes.TEXT\n  ) {}\n\n  bnuwIsValid(): RsuvResultBoolPknz {\n    // TODO\n    return new RsuvResultBoolPknz()\n  }\n}\n","/*\nУтилиты для получения информации об объектах.\n\nСтатус: в разработке\n */\n\n\nexport enum TypeAsau42 {\n  KFRX = 'kfrx'\n}\n\nexport function info(entry: any) {\n  const is = []\n  if (entry) {\n    const con = entry.constructor\n    if (con) {\n      if (con.name === 'Function') {\n        is.push(TypeAsau42.KFRX)\n      }\n    }\n  }\n}\n","/*\nконстанты разные\n */\n\n/**\n * Когда что-то уже существует\n */\nexport const RSUV_AL_ALREADY_EXIST = 'RSUV_AL_ALREADY_EXIST';\n","import { RsuvSearchElem } from \"./RsuvSearchElem\";\n\n/**\n * Представление нескольких RsuvSearchElem-ID[1636803407] (пар ключ/значение).\n * \n * Значения интерпретируются по правилу \"И\". Например, если элемента два, то поиск считается\n * успешным если успешен поиск [(для элемента 1) \"И\" (для элемента 2)]\n * \n * ID [[1636805160]]\n */\nexport class RsuvSearchElems {\n\n  /**\n   * @param elems (1) --элементы\n   */\n  constructor(public elems: RsuvSearchElem[]) {}\n}\n","import { RsuvTxStringAB } from './RsuvTxStringAB';\nimport { RsuvEnSort } from './RsuvEnSort';\n\n\n/**\n * Представление сортировки чего-либо абстрактного, обозначенного идентификатором\n */\nexport class RsuvTxSort {\n\n  /**\n   * Бросает исключение если идентификатор (1) невалиден\n   *\n   * @param id (1) -- условный идентификатор\n   * @param sortDirect (2) -- направление сортировки\n   */\n  constructor(public id: RsuvTxStringAB, public sortDirect: RsuvEnSort) {\n    // --- id verify\n    const validRes = id.bnuwIsValid();\n    if (!validRes.success) {\n      throw new Error(validRes.errCode + ' : ' + validRes.errMessage)\n    }\n    // ---\n  }\n\n}\n","export class RsuvValueAnd {\n  /**\n   * МОТИВАЦИЯ: допустим мы хотим получить значение ячейки столбца, но такого столбца не существует; в этом случае\n   * возврат просто falsy значения (undefined и т.п.) не позволяет понять, это значение ячейки undefined или же это\n   * означает что ячейки не существует.\n   *\n   * @param value\n   * @param isValueExist (2) -- если здесь FALSE то это означает что значение поля {@link value} не следует брать во\n   * внимание т.к. на самом деле значения получить не удалось (например сущности из которой предполагается взять\n   * значение просто не существует)\n   */\n  constructor(readonly value: string, readonly isValueExist: boolean = true) {\n  }\n}\n"],"names":["RsuvErr","code","message","asString","this","asStringB","oj","RsuvPaginationGyth","elemsCount","elemsPerPageCount","pagesFloat","pages","Math","trunc","dev","pageCount","indexesByPageNum","pageNum","indexLast","indexStart","elemsByPageNum","elems","slice","RsuvResultBoolPknz","success","errCode","errMessage","infoMulti","ret","notSuccess","forEach","el","push","successAllIsSugar","info","length","RsuvResultTibo","tibo","successCode","value","fromPknz","pknz","RsuvTxString","val","bnuwIsValid","_","isString","err","RSUV_T3","RSUV_T6_CASE","RsuvTxStringAA","res","test","RsuvTxStringAB","RsuvTxStringABB","RsuvTxStringABC","isEmptyOrWhitespaces","str","substrCountB","target","substr","toLowerCase","split","substrIndexes","ignoreCase","substrEscape","escapeRegExp","rg","RegExp","exec","RsuvT7","index","DATETIME","RsuvT4","RsuvT5","startIndex","endIndex","strTarget","strSub","verif","strTargetRaw","strSubRaw","t5","t4NoSens","rsuvT3","COMPLETE_MATCH","STARTED","ENDED","CONTAINS","containsCount","containsIndexes","indexes","substring","t4Sens","indexes2","sensitive","notSensitive","t4","RsuvTxStringB","RsuvTxStringC","ResultAsau36","yataIs","yata","isFinite","eavvIs","eavv","rvuoIs","rvuo","ex","month","Number","day","hour","minute","dayjs","toDate","getTime","RsuvSearchMode","format","necz","toInteger","yataExpire","RsuvTxEmail","EmailValidator","validate","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","defineProperty","enumerable","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","doneResult","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","RsuvZrnxSubData","page","elemsAllCount","elemsOfPage","RsuvAdapterZrnx","perPage","dataSource","make","last","elemsAllCountGet","rmPagination","elemsGet","dataGet","RsuvTxBoolean","isBoolean","RsuvEcxm","find","models","id","model","append","modelsBack","appendMulti","update","elem","checked","updateMulti","findIndex","elModel","splice","deleteMulti","filter","inverse","selectAll","deselectAll","RsuvCheckModelGnpw","Array","isArray","bnuwUtilsVerifyMulti","RsuvResultAsau11","codeNum","RsuvTuArray","elemDelete","arrBack","fnArrValidIs","fnIndexValidIs","elemAdd","fnIndexValidIsB","elemMove","indexFrom","indexTo","elemsSwap","index1","index2","a","elemUpdate","predicate","isFunction","ix","arr","RsuvTxJsonServer","basePath","collectionName","path","elemsCountGetAll","fetch","countSt","headers","get","elemsGetAll","json","offset","limit","elemsGetPage","elemsGetByFilter","elemsGetByFilterB","fieldName","elemsFiltered","elemsGetByFilterBB","pageNumber","elemsGetByFilterC","elemsFilteredSliced","countAll","data","hasNext","elemsGetByFilterCB","status","elemsDelete","ids","elemsDeleteByFilter","map","elemCreate","body","JSON","stringify","url","elemCreateB","RsuvTxNumInt","isSafeInteger","RsuvTxNumIntAB","RsuvTxNumIntABB","RsuvTxNumIntAC","RsuvTxFieldName","RsuvEnCaseSensitive","RsuvEnDataTypes","RsuvEnSort","RsuvSearchHow","searchMode","isCaseSensitive","TypeAsau42","RsuvSearchElem","searchHow","valueType","TEXT","sortDirect","validRes","isValueExist"],"mappings":"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"}